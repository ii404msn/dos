// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: agent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "agent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dos {

namespace {

const ::google::protobuf::Descriptor* PollAgentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PollAgentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PollAgentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PollAgentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunPodRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunPodRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunPodResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunPodResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletePodRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletePodRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeletePodResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeletePodResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* Agent_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_agent_2eproto() {
  protobuf_AddDesc_agent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "agent.proto");
  GOOGLE_CHECK(file != NULL);
  PollAgentRequest_descriptor_ = file->message_type(0);
  static const int PollAgentRequest_offsets_[1] = {
  };
  PollAgentRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PollAgentRequest_descriptor_,
      PollAgentRequest::default_instance_,
      PollAgentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollAgentRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollAgentRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PollAgentRequest));
  PollAgentResponse_descriptor_ = file->message_type(1);
  static const int PollAgentResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollAgentResponse, status_),
  };
  PollAgentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PollAgentResponse_descriptor_,
      PollAgentResponse::default_instance_,
      PollAgentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollAgentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PollAgentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PollAgentResponse));
  RunPodRequest_descriptor_ = file->message_type(2);
  static const int RunPodRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPodRequest, pod_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPodRequest, pod_),
  };
  RunPodRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunPodRequest_descriptor_,
      RunPodRequest::default_instance_,
      RunPodRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPodRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPodRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunPodRequest));
  RunPodResponse_descriptor_ = file->message_type(3);
  static const int RunPodResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPodResponse, status_),
  };
  RunPodResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunPodResponse_descriptor_,
      RunPodResponse::default_instance_,
      RunPodResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPodResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunPodResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunPodResponse));
  DeletePodRequest_descriptor_ = file->message_type(4);
  static const int DeletePodRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePodRequest, name_),
  };
  DeletePodRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletePodRequest_descriptor_,
      DeletePodRequest::default_instance_,
      DeletePodRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePodRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePodRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletePodRequest));
  DeletePodResponse_descriptor_ = file->message_type(5);
  static const int DeletePodResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePodResponse, status_),
  };
  DeletePodResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeletePodResponse_descriptor_,
      DeletePodResponse::default_instance_,
      DeletePodResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePodResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeletePodResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeletePodResponse));
  Agent_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_agent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PollAgentRequest_descriptor_, &PollAgentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PollAgentResponse_descriptor_, &PollAgentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunPodRequest_descriptor_, &RunPodRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunPodResponse_descriptor_, &RunPodResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletePodRequest_descriptor_, &DeletePodRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeletePodResponse_descriptor_, &DeletePodResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_agent_2eproto() {
  delete PollAgentRequest::default_instance_;
  delete PollAgentRequest_reflection_;
  delete PollAgentResponse::default_instance_;
  delete PollAgentResponse_reflection_;
  delete RunPodRequest::default_instance_;
  delete RunPodRequest_reflection_;
  delete RunPodResponse::default_instance_;
  delete RunPodResponse_reflection_;
  delete DeletePodRequest::default_instance_;
  delete DeletePodRequest_reflection_;
  delete DeletePodResponse::default_instance_;
  delete DeletePodResponse_reflection_;
}

void protobuf_AddDesc_agent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dos::protobuf_AddDesc_dos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013agent.proto\022\003dos\032\tdos.proto\"\022\n\020PollAge"
    "ntRequest\"4\n\021PollAgentResponse\022\037\n\006status"
    "\030\001 \001(\0132\017.dos.NodeStatus\"<\n\rRunPodRequest"
    "\022\020\n\010pod_name\030\001 \001(\t\022\031\n\003pod\030\003 \001(\0132\014.dos.Po"
    "dSpec\"0\n\016RunPodResponse\022\036\n\006status\030\001 \001(\0162"
    "\016.dos.RpcStatus\" \n\020DeletePodRequest\022\014\n\004n"
    "ame\030\001 \001(\t\"3\n\021DeletePodResponse\022\036\n\006status"
    "\030\001 \001(\0162\016.dos.RpcStatus2\247\001\n\005Agent\0225\n\004Poll"
    "\022\025.dos.PollAgentRequest\032\026.dos.PollAgentR"
    "esponse\022.\n\003Run\022\022.dos.RunPodRequest\032\023.dos"
    ".RunPodResponse\0227\n\006Delete\022\025.dos.DeletePo"
    "dRequest\032\026.dos.DeletePodResponseB\006\200\001\001\220\001\001", 480);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "agent.proto", &protobuf_RegisterTypes);
  PollAgentRequest::default_instance_ = new PollAgentRequest();
  PollAgentResponse::default_instance_ = new PollAgentResponse();
  RunPodRequest::default_instance_ = new RunPodRequest();
  RunPodResponse::default_instance_ = new RunPodResponse();
  DeletePodRequest::default_instance_ = new DeletePodRequest();
  DeletePodResponse::default_instance_ = new DeletePodResponse();
  PollAgentRequest::default_instance_->InitAsDefaultInstance();
  PollAgentResponse::default_instance_->InitAsDefaultInstance();
  RunPodRequest::default_instance_->InitAsDefaultInstance();
  RunPodResponse::default_instance_->InitAsDefaultInstance();
  DeletePodRequest::default_instance_->InitAsDefaultInstance();
  DeletePodResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_agent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_agent_2eproto {
  StaticDescriptorInitializer_agent_2eproto() {
    protobuf_AddDesc_agent_2eproto();
  }
} static_descriptor_initializer_agent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PollAgentRequest::PollAgentRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.PollAgentRequest)
}

void PollAgentRequest::InitAsDefaultInstance() {
}

PollAgentRequest::PollAgentRequest(const PollAgentRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.PollAgentRequest)
}

void PollAgentRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PollAgentRequest::~PollAgentRequest() {
  // @@protoc_insertion_point(destructor:dos.PollAgentRequest)
  SharedDtor();
}

void PollAgentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PollAgentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PollAgentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PollAgentRequest_descriptor_;
}

const PollAgentRequest& PollAgentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

PollAgentRequest* PollAgentRequest::default_instance_ = NULL;

PollAgentRequest* PollAgentRequest::New() const {
  return new PollAgentRequest;
}

void PollAgentRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PollAgentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.PollAgentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dos.PollAgentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.PollAgentRequest)
  return false;
#undef DO_
}

void PollAgentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.PollAgentRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.PollAgentRequest)
}

::google::protobuf::uint8* PollAgentRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.PollAgentRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.PollAgentRequest)
  return target;
}

int PollAgentRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PollAgentRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PollAgentRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PollAgentRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PollAgentRequest::MergeFrom(const PollAgentRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PollAgentRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PollAgentRequest::CopyFrom(const PollAgentRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollAgentRequest::IsInitialized() const {

  return true;
}

void PollAgentRequest::Swap(PollAgentRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PollAgentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PollAgentRequest_descriptor_;
  metadata.reflection = PollAgentRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PollAgentResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

PollAgentResponse::PollAgentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.PollAgentResponse)
}

void PollAgentResponse::InitAsDefaultInstance() {
  status_ = const_cast< ::dos::NodeStatus*>(&::dos::NodeStatus::default_instance());
}

PollAgentResponse::PollAgentResponse(const PollAgentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.PollAgentResponse)
}

void PollAgentResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PollAgentResponse::~PollAgentResponse() {
  // @@protoc_insertion_point(destructor:dos.PollAgentResponse)
  SharedDtor();
}

void PollAgentResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void PollAgentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PollAgentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PollAgentResponse_descriptor_;
}

const PollAgentResponse& PollAgentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

PollAgentResponse* PollAgentResponse::default_instance_ = NULL;

PollAgentResponse* PollAgentResponse::New() const {
  return new PollAgentResponse;
}

void PollAgentResponse::Clear() {
  if (has_status()) {
    if (status_ != NULL) status_->::dos::NodeStatus::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PollAgentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.PollAgentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.NodeStatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.PollAgentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.PollAgentResponse)
  return false;
#undef DO_
}

void PollAgentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.PollAgentResponse)
  // optional .dos.NodeStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.PollAgentResponse)
}

::google::protobuf::uint8* PollAgentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.PollAgentResponse)
  // optional .dos.NodeStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.PollAgentResponse)
  return target;
}

int PollAgentResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.NodeStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PollAgentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PollAgentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PollAgentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PollAgentResponse::MergeFrom(const PollAgentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      mutable_status()->::dos::NodeStatus::MergeFrom(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PollAgentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PollAgentResponse::CopyFrom(const PollAgentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PollAgentResponse::IsInitialized() const {

  return true;
}

void PollAgentResponse::Swap(PollAgentResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PollAgentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PollAgentResponse_descriptor_;
  metadata.reflection = PollAgentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunPodRequest::kPodNameFieldNumber;
const int RunPodRequest::kPodFieldNumber;
#endif  // !_MSC_VER

RunPodRequest::RunPodRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.RunPodRequest)
}

void RunPodRequest::InitAsDefaultInstance() {
  pod_ = const_cast< ::dos::PodSpec*>(&::dos::PodSpec::default_instance());
}

RunPodRequest::RunPodRequest(const RunPodRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.RunPodRequest)
}

void RunPodRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pod_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pod_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunPodRequest::~RunPodRequest() {
  // @@protoc_insertion_point(destructor:dos.RunPodRequest)
  SharedDtor();
}

void RunPodRequest::SharedDtor() {
  if (pod_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pod_name_;
  }
  if (this != default_instance_) {
    delete pod_;
  }
}

void RunPodRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunPodRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunPodRequest_descriptor_;
}

const RunPodRequest& RunPodRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

RunPodRequest* RunPodRequest::default_instance_ = NULL;

RunPodRequest* RunPodRequest::New() const {
  return new RunPodRequest;
}

void RunPodRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_pod_name()) {
      if (pod_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pod_name_->clear();
      }
    }
    if (has_pod()) {
      if (pod_ != NULL) pod_->::dos::PodSpec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunPodRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.RunPodRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pod_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pod_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pod_name().data(), this->pod_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pod_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pod;
        break;
      }

      // optional .dos.PodSpec pod = 3;
      case 3: {
        if (tag == 26) {
         parse_pod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pod()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.RunPodRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.RunPodRequest)
  return false;
#undef DO_
}

void RunPodRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.RunPodRequest)
  // optional string pod_name = 1;
  if (has_pod_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pod_name().data(), this->pod_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pod_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pod_name(), output);
  }

  // optional .dos.PodSpec pod = 3;
  if (has_pod()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.RunPodRequest)
}

::google::protobuf::uint8* RunPodRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.RunPodRequest)
  // optional string pod_name = 1;
  if (has_pod_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pod_name().data(), this->pod_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pod_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pod_name(), target);
  }

  // optional .dos.PodSpec pod = 3;
  if (has_pod()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.RunPodRequest)
  return target;
}

int RunPodRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pod_name = 1;
    if (has_pod_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pod_name());
    }

    // optional .dos.PodSpec pod = 3;
    if (has_pod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pod());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunPodRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunPodRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunPodRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunPodRequest::MergeFrom(const RunPodRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pod_name()) {
      set_pod_name(from.pod_name());
    }
    if (from.has_pod()) {
      mutable_pod()->::dos::PodSpec::MergeFrom(from.pod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunPodRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunPodRequest::CopyFrom(const RunPodRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunPodRequest::IsInitialized() const {

  return true;
}

void RunPodRequest::Swap(RunPodRequest* other) {
  if (other != this) {
    std::swap(pod_name_, other->pod_name_);
    std::swap(pod_, other->pod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunPodRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunPodRequest_descriptor_;
  metadata.reflection = RunPodRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunPodResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

RunPodResponse::RunPodResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.RunPodResponse)
}

void RunPodResponse::InitAsDefaultInstance() {
}

RunPodResponse::RunPodResponse(const RunPodResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.RunPodResponse)
}

void RunPodResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunPodResponse::~RunPodResponse() {
  // @@protoc_insertion_point(destructor:dos.RunPodResponse)
  SharedDtor();
}

void RunPodResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunPodResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunPodResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunPodResponse_descriptor_;
}

const RunPodResponse& RunPodResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

RunPodResponse* RunPodResponse::default_instance_ = NULL;

RunPodResponse* RunPodResponse::New() const {
  return new RunPodResponse;
}

void RunPodResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunPodResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.RunPodResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.RpcStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.RunPodResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.RunPodResponse)
  return false;
#undef DO_
}

void RunPodResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.RunPodResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.RunPodResponse)
}

::google::protobuf::uint8* RunPodResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.RunPodResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.RunPodResponse)
  return target;
}

int RunPodResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.RpcStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunPodResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunPodResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunPodResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunPodResponse::MergeFrom(const RunPodResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunPodResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunPodResponse::CopyFrom(const RunPodResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunPodResponse::IsInitialized() const {

  return true;
}

void RunPodResponse::Swap(RunPodResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunPodResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunPodResponse_descriptor_;
  metadata.reflection = RunPodResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeletePodRequest::kNameFieldNumber;
#endif  // !_MSC_VER

DeletePodRequest::DeletePodRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.DeletePodRequest)
}

void DeletePodRequest::InitAsDefaultInstance() {
}

DeletePodRequest::DeletePodRequest(const DeletePodRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.DeletePodRequest)
}

void DeletePodRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePodRequest::~DeletePodRequest() {
  // @@protoc_insertion_point(destructor:dos.DeletePodRequest)
  SharedDtor();
}

void DeletePodRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DeletePodRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePodRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletePodRequest_descriptor_;
}

const DeletePodRequest& DeletePodRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

DeletePodRequest* DeletePodRequest::default_instance_ = NULL;

DeletePodRequest* DeletePodRequest::New() const {
  return new DeletePodRequest;
}

void DeletePodRequest::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletePodRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.DeletePodRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.DeletePodRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.DeletePodRequest)
  return false;
#undef DO_
}

void DeletePodRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.DeletePodRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.DeletePodRequest)
}

::google::protobuf::uint8* DeletePodRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.DeletePodRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.DeletePodRequest)
  return target;
}

int DeletePodRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePodRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletePodRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletePodRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletePodRequest::MergeFrom(const DeletePodRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletePodRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePodRequest::CopyFrom(const DeletePodRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePodRequest::IsInitialized() const {

  return true;
}

void DeletePodRequest::Swap(DeletePodRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletePodRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletePodRequest_descriptor_;
  metadata.reflection = DeletePodRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeletePodResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

DeletePodResponse::DeletePodResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.DeletePodResponse)
}

void DeletePodResponse::InitAsDefaultInstance() {
}

DeletePodResponse::DeletePodResponse(const DeletePodResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.DeletePodResponse)
}

void DeletePodResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeletePodResponse::~DeletePodResponse() {
  // @@protoc_insertion_point(destructor:dos.DeletePodResponse)
  SharedDtor();
}

void DeletePodResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeletePodResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeletePodResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeletePodResponse_descriptor_;
}

const DeletePodResponse& DeletePodResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_agent_2eproto();
  return *default_instance_;
}

DeletePodResponse* DeletePodResponse::default_instance_ = NULL;

DeletePodResponse* DeletePodResponse::New() const {
  return new DeletePodResponse;
}

void DeletePodResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeletePodResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.DeletePodResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.RpcStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.DeletePodResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.DeletePodResponse)
  return false;
#undef DO_
}

void DeletePodResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.DeletePodResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.DeletePodResponse)
}

::google::protobuf::uint8* DeletePodResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.DeletePodResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.DeletePodResponse)
  return target;
}

int DeletePodResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.RpcStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeletePodResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeletePodResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeletePodResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeletePodResponse::MergeFrom(const DeletePodResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeletePodResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePodResponse::CopyFrom(const DeletePodResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePodResponse::IsInitialized() const {

  return true;
}

void DeletePodResponse::Swap(DeletePodResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeletePodResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeletePodResponse_descriptor_;
  metadata.reflection = DeletePodResponse_reflection_;
  return metadata;
}


// ===================================================================

Agent::~Agent() {}

const ::google::protobuf::ServiceDescriptor* Agent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Agent_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Agent::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Agent_descriptor_;
}

void Agent::Poll(::google::protobuf::RpcController* controller,
                         const ::dos::PollAgentRequest*,
                         ::dos::PollAgentResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Poll() not implemented.");
  done->Run();
}

void Agent::Run(::google::protobuf::RpcController* controller,
                         const ::dos::RunPodRequest*,
                         ::dos::RunPodResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Run() not implemented.");
  done->Run();
}

void Agent::Delete(::google::protobuf::RpcController* controller,
                         const ::dos::DeletePodRequest*,
                         ::dos::DeletePodResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Delete() not implemented.");
  done->Run();
}

void Agent::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Agent_descriptor_);
  switch(method->index()) {
    case 0:
      Poll(controller,
             ::google::protobuf::down_cast<const ::dos::PollAgentRequest*>(request),
             ::google::protobuf::down_cast< ::dos::PollAgentResponse*>(response),
             done);
      break;
    case 1:
      Run(controller,
             ::google::protobuf::down_cast<const ::dos::RunPodRequest*>(request),
             ::google::protobuf::down_cast< ::dos::RunPodResponse*>(response),
             done);
      break;
    case 2:
      Delete(controller,
             ::google::protobuf::down_cast<const ::dos::DeletePodRequest*>(request),
             ::google::protobuf::down_cast< ::dos::DeletePodResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Agent::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dos::PollAgentRequest::default_instance();
    case 1:
      return ::dos::RunPodRequest::default_instance();
    case 2:
      return ::dos::DeletePodRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& Agent::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dos::PollAgentResponse::default_instance();
    case 1:
      return ::dos::RunPodResponse::default_instance();
    case 2:
      return ::dos::DeletePodResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

Agent_Stub::Agent_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Agent_Stub::Agent_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Agent_Stub::~Agent_Stub() {
  if (owns_channel_) delete channel_;
}

void Agent_Stub::Poll(::google::protobuf::RpcController* controller,
                              const ::dos::PollAgentRequest* request,
                              ::dos::PollAgentResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Agent_Stub::Run(::google::protobuf::RpcController* controller,
                              const ::dos::RunPodRequest* request,
                              ::dos::RunPodResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Agent_Stub::Delete(::google::protobuf::RpcController* controller,
                              const ::dos::DeletePodRequest* request,
                              ::dos::DeletePodResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace dos

// @@protoc_insertion_point(global_scope)
