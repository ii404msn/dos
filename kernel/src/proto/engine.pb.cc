// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "engine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dos {

namespace {

const ::google::protobuf::Descriptor* RunContainerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunContainerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RunContainerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RunContainerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerOverview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerOverview_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowContainerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowContainerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowContainerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowContainerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowCLogRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowCLogRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowCLogResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowCLogResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInitdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInitdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInitdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInitdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateContainerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateContainerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateContainerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateContainerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteContainerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteContainerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteContainerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteContainerResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* Engine_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_engine_2eproto() {
  protobuf_AddDesc_engine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "engine.proto");
  GOOGLE_CHECK(file != NULL);
  RunContainerRequest_descriptor_ = file->message_type(0);
  static const int RunContainerRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunContainerRequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunContainerRequest, container_),
  };
  RunContainerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunContainerRequest_descriptor_,
      RunContainerRequest::default_instance_,
      RunContainerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunContainerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunContainerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunContainerRequest));
  RunContainerResponse_descriptor_ = file->message_type(1);
  static const int RunContainerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunContainerResponse, status_),
  };
  RunContainerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RunContainerResponse_descriptor_,
      RunContainerResponse::default_instance_,
      RunContainerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunContainerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RunContainerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RunContainerResponse));
  ContainerOverview_descriptor_ = file->message_type(2);
  static const int ContainerOverview_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOverview, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOverview, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOverview, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOverview, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOverview, boot_time_),
  };
  ContainerOverview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerOverview_descriptor_,
      ContainerOverview::default_instance_,
      ContainerOverview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOverview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerOverview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerOverview));
  ShowContainerRequest_descriptor_ = file->message_type(3);
  static const int ShowContainerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowContainerRequest, names_),
  };
  ShowContainerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowContainerRequest_descriptor_,
      ShowContainerRequest::default_instance_,
      ShowContainerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowContainerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowContainerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowContainerRequest));
  ShowContainerResponse_descriptor_ = file->message_type(4);
  static const int ShowContainerResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowContainerResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowContainerResponse, containers_),
  };
  ShowContainerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowContainerResponse_descriptor_,
      ShowContainerResponse::default_instance_,
      ShowContainerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowContainerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowContainerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowContainerResponse));
  ShowCLogRequest_descriptor_ = file->message_type(5);
  static const int ShowCLogRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCLogRequest, name_),
  };
  ShowCLogRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowCLogRequest_descriptor_,
      ShowCLogRequest::default_instance_,
      ShowCLogRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCLogRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCLogRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowCLogRequest));
  ShowCLogResponse_descriptor_ = file->message_type(6);
  static const int ShowCLogResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCLogResponse, logs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCLogResponse, status_),
  };
  ShowCLogResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowCLogResponse_descriptor_,
      ShowCLogResponse::default_instance_,
      ShowCLogResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCLogResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowCLogResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowCLogResponse));
  GetInitdRequest_descriptor_ = file->message_type(7);
  static const int GetInitdRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInitdRequest, name_),
  };
  GetInitdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInitdRequest_descriptor_,
      GetInitdRequest::default_instance_,
      GetInitdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInitdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInitdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInitdRequest));
  GetInitdResponse_descriptor_ = file->message_type(8);
  static const int GetInitdResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInitdResponse, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInitdResponse, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInitdResponse, rootfs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInitdResponse, status_),
  };
  GetInitdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInitdResponse_descriptor_,
      GetInitdResponse::default_instance_,
      GetInitdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInitdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInitdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInitdResponse));
  UpdateContainerRequest_descriptor_ = file->message_type(9);
  static const int UpdateContainerRequest_offsets_[1] = {
  };
  UpdateContainerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateContainerRequest_descriptor_,
      UpdateContainerRequest::default_instance_,
      UpdateContainerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateContainerRequest));
  UpdateContainerResponse_descriptor_ = file->message_type(10);
  static const int UpdateContainerResponse_offsets_[1] = {
  };
  UpdateContainerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateContainerResponse_descriptor_,
      UpdateContainerResponse::default_instance_,
      UpdateContainerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateContainerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateContainerResponse));
  DeleteContainerRequest_descriptor_ = file->message_type(11);
  static const int DeleteContainerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteContainerRequest, name_),
  };
  DeleteContainerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteContainerRequest_descriptor_,
      DeleteContainerRequest::default_instance_,
      DeleteContainerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteContainerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteContainerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteContainerRequest));
  DeleteContainerResponse_descriptor_ = file->message_type(12);
  static const int DeleteContainerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteContainerResponse, status_),
  };
  DeleteContainerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteContainerResponse_descriptor_,
      DeleteContainerResponse::default_instance_,
      DeleteContainerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteContainerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteContainerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteContainerResponse));
  Engine_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_engine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunContainerRequest_descriptor_, &RunContainerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RunContainerResponse_descriptor_, &RunContainerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerOverview_descriptor_, &ContainerOverview::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowContainerRequest_descriptor_, &ShowContainerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowContainerResponse_descriptor_, &ShowContainerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowCLogRequest_descriptor_, &ShowCLogRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowCLogResponse_descriptor_, &ShowCLogResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInitdRequest_descriptor_, &GetInitdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInitdResponse_descriptor_, &GetInitdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateContainerRequest_descriptor_, &UpdateContainerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateContainerResponse_descriptor_, &UpdateContainerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteContainerRequest_descriptor_, &DeleteContainerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteContainerResponse_descriptor_, &DeleteContainerResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_engine_2eproto() {
  delete RunContainerRequest::default_instance_;
  delete RunContainerRequest_reflection_;
  delete RunContainerResponse::default_instance_;
  delete RunContainerResponse_reflection_;
  delete ContainerOverview::default_instance_;
  delete ContainerOverview_reflection_;
  delete ShowContainerRequest::default_instance_;
  delete ShowContainerRequest_reflection_;
  delete ShowContainerResponse::default_instance_;
  delete ShowContainerResponse_reflection_;
  delete ShowCLogRequest::default_instance_;
  delete ShowCLogRequest_reflection_;
  delete ShowCLogResponse::default_instance_;
  delete ShowCLogResponse_reflection_;
  delete GetInitdRequest::default_instance_;
  delete GetInitdRequest_reflection_;
  delete GetInitdResponse::default_instance_;
  delete GetInitdResponse_reflection_;
  delete UpdateContainerRequest::default_instance_;
  delete UpdateContainerRequest_reflection_;
  delete UpdateContainerResponse::default_instance_;
  delete UpdateContainerResponse_reflection_;
  delete DeleteContainerRequest::default_instance_;
  delete DeleteContainerRequest_reflection_;
  delete DeleteContainerResponse::default_instance_;
  delete DeleteContainerResponse_reflection_;
}

void protobuf_AddDesc_engine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dos::protobuf_AddDesc_dos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014engine.proto\022\003dos\032\tdos.proto\"F\n\023RunCon"
    "tainerRequest\022\014\n\004name\030\001 \001(\t\022!\n\tcontainer"
    "\030\002 \001(\0132\016.dos.Container\"6\n\024RunContainerRe"
    "sponse\022\036\n\006status\030\001 \001(\0162\016.dos.RpcStatus\"\216"
    "\001\n\021ContainerOverview\022\014\n\004name\030\001 \001(\t\022\022\n\nst"
    "art_time\030\002 \001(\003\022\"\n\005state\030\003 \001(\0162\023.dos.Cont"
    "ainerState\022 \n\004type\030\004 \001(\0162\022.dos.Container"
    "Type\022\021\n\tboot_time\030\005 \001(\003\"%\n\024ShowContainer"
    "Request\022\r\n\005names\030\001 \003(\t\"c\n\025ShowContainerR"
    "esponse\022\036\n\006status\030\001 \001(\0162\016.dos.RpcStatus\022"
    "*\n\ncontainers\030\002 \003(\0132\026.dos.ContainerOverv"
    "iew\"\037\n\017ShowCLogRequest\022\014\n\004name\030\001 \001(\t\"S\n\020"
    "ShowCLogResponse\022\037\n\004logs\030\001 \003(\0132\021.dos.Con"
    "tainerLog\022\036\n\006status\030\002 \001(\0162\016.dos.RpcStatu"
    "s\"\037\n\017GetInitdRequest\022\014\n\004name\030\001 \001(\t\"a\n\020Ge"
    "tInitdResponse\022\013\n\003pid\030\001 \001(\005\022\020\n\010endpoint\030"
    "\002 \001(\t\022\016\n\006rootfs\030\003 \001(\t\022\036\n\006status\030\004 \001(\0162\016."
    "dos.RpcStatus\"\030\n\026UpdateContainerRequest\""
    "\031\n\027UpdateContainerResponse\"&\n\026DeleteCont"
    "ainerRequest\022\014\n\004name\030\001 \001(\t\"9\n\027DeleteCont"
    "ainerResponse\022\036\n\006status\030\002 \001(\0162\016.dos.RpcS"
    "tatus2\325\002\n\006Engine\022C\n\014RunContainer\022\030.dos.R"
    "unContainerRequest\032\031.dos.RunContainerRes"
    "ponse\022F\n\rShowContainer\022\031.dos.ShowContain"
    "erRequest\032\032.dos.ShowContainerResponse\0227\n"
    "\010ShowCLog\022\024.dos.ShowCLogRequest\032\025.dos.Sh"
    "owCLogResponse\0227\n\010GetInitd\022\024.dos.GetInit"
    "dRequest\032\025.dos.GetInitdResponse\022L\n\017Delet"
    "eContainer\022\033.dos.DeleteContainerRequest\032"
    "\034.dos.DeleteContainerResponseB\006\200\001\001\220\001\001", 1197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "engine.proto", &protobuf_RegisterTypes);
  RunContainerRequest::default_instance_ = new RunContainerRequest();
  RunContainerResponse::default_instance_ = new RunContainerResponse();
  ContainerOverview::default_instance_ = new ContainerOverview();
  ShowContainerRequest::default_instance_ = new ShowContainerRequest();
  ShowContainerResponse::default_instance_ = new ShowContainerResponse();
  ShowCLogRequest::default_instance_ = new ShowCLogRequest();
  ShowCLogResponse::default_instance_ = new ShowCLogResponse();
  GetInitdRequest::default_instance_ = new GetInitdRequest();
  GetInitdResponse::default_instance_ = new GetInitdResponse();
  UpdateContainerRequest::default_instance_ = new UpdateContainerRequest();
  UpdateContainerResponse::default_instance_ = new UpdateContainerResponse();
  DeleteContainerRequest::default_instance_ = new DeleteContainerRequest();
  DeleteContainerResponse::default_instance_ = new DeleteContainerResponse();
  RunContainerRequest::default_instance_->InitAsDefaultInstance();
  RunContainerResponse::default_instance_->InitAsDefaultInstance();
  ContainerOverview::default_instance_->InitAsDefaultInstance();
  ShowContainerRequest::default_instance_->InitAsDefaultInstance();
  ShowContainerResponse::default_instance_->InitAsDefaultInstance();
  ShowCLogRequest::default_instance_->InitAsDefaultInstance();
  ShowCLogResponse::default_instance_->InitAsDefaultInstance();
  GetInitdRequest::default_instance_->InitAsDefaultInstance();
  GetInitdResponse::default_instance_->InitAsDefaultInstance();
  UpdateContainerRequest::default_instance_->InitAsDefaultInstance();
  UpdateContainerResponse::default_instance_->InitAsDefaultInstance();
  DeleteContainerRequest::default_instance_->InitAsDefaultInstance();
  DeleteContainerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_engine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_engine_2eproto {
  StaticDescriptorInitializer_engine_2eproto() {
    protobuf_AddDesc_engine_2eproto();
  }
} static_descriptor_initializer_engine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RunContainerRequest::kNameFieldNumber;
const int RunContainerRequest::kContainerFieldNumber;
#endif  // !_MSC_VER

RunContainerRequest::RunContainerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.RunContainerRequest)
}

void RunContainerRequest::InitAsDefaultInstance() {
  container_ = const_cast< ::dos::Container*>(&::dos::Container::default_instance());
}

RunContainerRequest::RunContainerRequest(const RunContainerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.RunContainerRequest)
}

void RunContainerRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  container_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunContainerRequest::~RunContainerRequest() {
  // @@protoc_insertion_point(destructor:dos.RunContainerRequest)
  SharedDtor();
}

void RunContainerRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete container_;
  }
}

void RunContainerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunContainerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunContainerRequest_descriptor_;
}

const RunContainerRequest& RunContainerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

RunContainerRequest* RunContainerRequest::default_instance_ = NULL;

RunContainerRequest* RunContainerRequest::New() const {
  return new RunContainerRequest;
}

void RunContainerRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_container()) {
      if (container_ != NULL) container_->::dos::Container::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunContainerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.RunContainerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_container;
        break;
      }

      // optional .dos.Container container = 2;
      case 2: {
        if (tag == 18) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.RunContainerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.RunContainerRequest)
  return false;
#undef DO_
}

void RunContainerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.RunContainerRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .dos.Container container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.RunContainerRequest)
}

::google::protobuf::uint8* RunContainerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.RunContainerRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dos.Container container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.RunContainerRequest)
  return target;
}

int RunContainerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dos.Container container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunContainerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunContainerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunContainerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunContainerRequest::MergeFrom(const RunContainerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_container()) {
      mutable_container()->::dos::Container::MergeFrom(from.container());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunContainerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunContainerRequest::CopyFrom(const RunContainerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunContainerRequest::IsInitialized() const {

  return true;
}

void RunContainerRequest::Swap(RunContainerRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(container_, other->container_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunContainerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunContainerRequest_descriptor_;
  metadata.reflection = RunContainerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RunContainerResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

RunContainerResponse::RunContainerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.RunContainerResponse)
}

void RunContainerResponse::InitAsDefaultInstance() {
}

RunContainerResponse::RunContainerResponse(const RunContainerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.RunContainerResponse)
}

void RunContainerResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RunContainerResponse::~RunContainerResponse() {
  // @@protoc_insertion_point(destructor:dos.RunContainerResponse)
  SharedDtor();
}

void RunContainerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RunContainerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RunContainerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RunContainerResponse_descriptor_;
}

const RunContainerResponse& RunContainerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

RunContainerResponse* RunContainerResponse::default_instance_ = NULL;

RunContainerResponse* RunContainerResponse::New() const {
  return new RunContainerResponse;
}

void RunContainerResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RunContainerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.RunContainerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.RpcStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.RunContainerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.RunContainerResponse)
  return false;
#undef DO_
}

void RunContainerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.RunContainerResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.RunContainerResponse)
}

::google::protobuf::uint8* RunContainerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.RunContainerResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.RunContainerResponse)
  return target;
}

int RunContainerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.RpcStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RunContainerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RunContainerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RunContainerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RunContainerResponse::MergeFrom(const RunContainerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RunContainerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunContainerResponse::CopyFrom(const RunContainerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunContainerResponse::IsInitialized() const {

  return true;
}

void RunContainerResponse::Swap(RunContainerResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RunContainerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RunContainerResponse_descriptor_;
  metadata.reflection = RunContainerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerOverview::kNameFieldNumber;
const int ContainerOverview::kStartTimeFieldNumber;
const int ContainerOverview::kStateFieldNumber;
const int ContainerOverview::kTypeFieldNumber;
const int ContainerOverview::kBootTimeFieldNumber;
#endif  // !_MSC_VER

ContainerOverview::ContainerOverview()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.ContainerOverview)
}

void ContainerOverview::InitAsDefaultInstance() {
}

ContainerOverview::ContainerOverview(const ContainerOverview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.ContainerOverview)
}

void ContainerOverview::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = GOOGLE_LONGLONG(0);
  state_ = 0;
  type_ = 0;
  boot_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerOverview::~ContainerOverview() {
  // @@protoc_insertion_point(destructor:dos.ContainerOverview)
  SharedDtor();
}

void ContainerOverview::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ContainerOverview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerOverview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerOverview_descriptor_;
}

const ContainerOverview& ContainerOverview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

ContainerOverview* ContainerOverview::default_instance_ = NULL;

ContainerOverview* ContainerOverview::New() const {
  return new ContainerOverview;
}

void ContainerOverview::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ContainerOverview*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(start_time_, boot_time_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerOverview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.ContainerOverview)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .dos.ContainerState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::ContainerState_IsValid(value)) {
            set_state(static_cast< ::dos::ContainerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .dos.ContainerType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::ContainerType_IsValid(value)) {
            set_type(static_cast< ::dos::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_boot_time;
        break;
      }

      // optional int64 boot_time = 5;
      case 5: {
        if (tag == 40) {
         parse_boot_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boot_time_)));
          set_has_boot_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.ContainerOverview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.ContainerOverview)
  return false;
#undef DO_
}

void ContainerOverview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.ContainerOverview)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

  // optional .dos.ContainerState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional .dos.ContainerType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional int64 boot_time = 5;
  if (has_boot_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->boot_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.ContainerOverview)
}

::google::protobuf::uint8* ContainerOverview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.ContainerOverview)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_time(), target);
  }

  // optional .dos.ContainerState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional .dos.ContainerType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional int64 boot_time = 5;
  if (has_boot_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->boot_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.ContainerOverview)
  return target;
}

int ContainerOverview::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional .dos.ContainerState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .dos.ContainerType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 boot_time = 5;
    if (has_boot_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boot_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerOverview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerOverview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerOverview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerOverview::MergeFrom(const ContainerOverview& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_boot_time()) {
      set_boot_time(from.boot_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerOverview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerOverview::CopyFrom(const ContainerOverview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerOverview::IsInitialized() const {

  return true;
}

void ContainerOverview::Swap(ContainerOverview* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(start_time_, other->start_time_);
    std::swap(state_, other->state_);
    std::swap(type_, other->type_);
    std::swap(boot_time_, other->boot_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerOverview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerOverview_descriptor_;
  metadata.reflection = ContainerOverview_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowContainerRequest::kNamesFieldNumber;
#endif  // !_MSC_VER

ShowContainerRequest::ShowContainerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.ShowContainerRequest)
}

void ShowContainerRequest::InitAsDefaultInstance() {
}

ShowContainerRequest::ShowContainerRequest(const ShowContainerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.ShowContainerRequest)
}

void ShowContainerRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowContainerRequest::~ShowContainerRequest() {
  // @@protoc_insertion_point(destructor:dos.ShowContainerRequest)
  SharedDtor();
}

void ShowContainerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowContainerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowContainerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowContainerRequest_descriptor_;
}

const ShowContainerRequest& ShowContainerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

ShowContainerRequest* ShowContainerRequest::default_instance_ = NULL;

ShowContainerRequest* ShowContainerRequest::New() const {
  return new ShowContainerRequest;
}

void ShowContainerRequest::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowContainerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.ShowContainerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (tag == 10) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.ShowContainerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.ShowContainerRequest)
  return false;
#undef DO_
}

void ShowContainerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.ShowContainerRequest)
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.ShowContainerRequest)
}

::google::protobuf::uint8* ShowContainerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.ShowContainerRequest)
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.ShowContainerRequest)
  return target;
}

int ShowContainerRequest::ByteSize() const {
  int total_size = 0;

  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowContainerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowContainerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowContainerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowContainerRequest::MergeFrom(const ShowContainerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowContainerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowContainerRequest::CopyFrom(const ShowContainerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowContainerRequest::IsInitialized() const {

  return true;
}

void ShowContainerRequest::Swap(ShowContainerRequest* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowContainerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowContainerRequest_descriptor_;
  metadata.reflection = ShowContainerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowContainerResponse::kStatusFieldNumber;
const int ShowContainerResponse::kContainersFieldNumber;
#endif  // !_MSC_VER

ShowContainerResponse::ShowContainerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.ShowContainerResponse)
}

void ShowContainerResponse::InitAsDefaultInstance() {
}

ShowContainerResponse::ShowContainerResponse(const ShowContainerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.ShowContainerResponse)
}

void ShowContainerResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowContainerResponse::~ShowContainerResponse() {
  // @@protoc_insertion_point(destructor:dos.ShowContainerResponse)
  SharedDtor();
}

void ShowContainerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowContainerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowContainerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowContainerResponse_descriptor_;
}

const ShowContainerResponse& ShowContainerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

ShowContainerResponse* ShowContainerResponse::default_instance_ = NULL;

ShowContainerResponse* ShowContainerResponse::New() const {
  return new ShowContainerResponse;
}

void ShowContainerResponse::Clear() {
  status_ = 0;
  containers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowContainerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.ShowContainerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.RpcStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_containers;
        break;
      }

      // repeated .dos.ContainerOverview containers = 2;
      case 2: {
        if (tag == 18) {
         parse_containers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_containers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_containers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.ShowContainerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.ShowContainerResponse)
  return false;
#undef DO_
}

void ShowContainerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.ShowContainerResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .dos.ContainerOverview containers = 2;
  for (int i = 0; i < this->containers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->containers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.ShowContainerResponse)
}

::google::protobuf::uint8* ShowContainerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.ShowContainerResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .dos.ContainerOverview containers = 2;
  for (int i = 0; i < this->containers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->containers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.ShowContainerResponse)
  return target;
}

int ShowContainerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.RpcStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .dos.ContainerOverview containers = 2;
  total_size += 1 * this->containers_size();
  for (int i = 0; i < this->containers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->containers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowContainerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowContainerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowContainerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowContainerResponse::MergeFrom(const ShowContainerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  containers_.MergeFrom(from.containers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowContainerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowContainerResponse::CopyFrom(const ShowContainerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowContainerResponse::IsInitialized() const {

  return true;
}

void ShowContainerResponse::Swap(ShowContainerResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    containers_.Swap(&other->containers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowContainerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowContainerResponse_descriptor_;
  metadata.reflection = ShowContainerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowCLogRequest::kNameFieldNumber;
#endif  // !_MSC_VER

ShowCLogRequest::ShowCLogRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.ShowCLogRequest)
}

void ShowCLogRequest::InitAsDefaultInstance() {
}

ShowCLogRequest::ShowCLogRequest(const ShowCLogRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.ShowCLogRequest)
}

void ShowCLogRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowCLogRequest::~ShowCLogRequest() {
  // @@protoc_insertion_point(destructor:dos.ShowCLogRequest)
  SharedDtor();
}

void ShowCLogRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ShowCLogRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowCLogRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowCLogRequest_descriptor_;
}

const ShowCLogRequest& ShowCLogRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

ShowCLogRequest* ShowCLogRequest::default_instance_ = NULL;

ShowCLogRequest* ShowCLogRequest::New() const {
  return new ShowCLogRequest;
}

void ShowCLogRequest::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowCLogRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.ShowCLogRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.ShowCLogRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.ShowCLogRequest)
  return false;
#undef DO_
}

void ShowCLogRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.ShowCLogRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.ShowCLogRequest)
}

::google::protobuf::uint8* ShowCLogRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.ShowCLogRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.ShowCLogRequest)
  return target;
}

int ShowCLogRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowCLogRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowCLogRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowCLogRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowCLogRequest::MergeFrom(const ShowCLogRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowCLogRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowCLogRequest::CopyFrom(const ShowCLogRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCLogRequest::IsInitialized() const {

  return true;
}

void ShowCLogRequest::Swap(ShowCLogRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowCLogRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowCLogRequest_descriptor_;
  metadata.reflection = ShowCLogRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowCLogResponse::kLogsFieldNumber;
const int ShowCLogResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ShowCLogResponse::ShowCLogResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.ShowCLogResponse)
}

void ShowCLogResponse::InitAsDefaultInstance() {
}

ShowCLogResponse::ShowCLogResponse(const ShowCLogResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.ShowCLogResponse)
}

void ShowCLogResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowCLogResponse::~ShowCLogResponse() {
  // @@protoc_insertion_point(destructor:dos.ShowCLogResponse)
  SharedDtor();
}

void ShowCLogResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowCLogResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowCLogResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowCLogResponse_descriptor_;
}

const ShowCLogResponse& ShowCLogResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

ShowCLogResponse* ShowCLogResponse::default_instance_ = NULL;

ShowCLogResponse* ShowCLogResponse::New() const {
  return new ShowCLogResponse;
}

void ShowCLogResponse::Clear() {
  status_ = 0;
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowCLogResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.ShowCLogResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dos.ContainerLog logs = 1;
      case 1: {
        if (tag == 10) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_logs;
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .dos.RpcStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.ShowCLogResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.ShowCLogResponse)
  return false;
#undef DO_
}

void ShowCLogResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.ShowCLogResponse)
  // repeated .dos.ContainerLog logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->logs(i), output);
  }

  // optional .dos.RpcStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.ShowCLogResponse)
}

::google::protobuf::uint8* ShowCLogResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.ShowCLogResponse)
  // repeated .dos.ContainerLog logs = 1;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->logs(i), target);
  }

  // optional .dos.RpcStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.ShowCLogResponse)
  return target;
}

int ShowCLogResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .dos.RpcStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .dos.ContainerLog logs = 1;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowCLogResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowCLogResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowCLogResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowCLogResponse::MergeFrom(const ShowCLogResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowCLogResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowCLogResponse::CopyFrom(const ShowCLogResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowCLogResponse::IsInitialized() const {

  return true;
}

void ShowCLogResponse::Swap(ShowCLogResponse* other) {
  if (other != this) {
    logs_.Swap(&other->logs_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowCLogResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowCLogResponse_descriptor_;
  metadata.reflection = ShowCLogResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInitdRequest::kNameFieldNumber;
#endif  // !_MSC_VER

GetInitdRequest::GetInitdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.GetInitdRequest)
}

void GetInitdRequest::InitAsDefaultInstance() {
}

GetInitdRequest::GetInitdRequest(const GetInitdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.GetInitdRequest)
}

void GetInitdRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInitdRequest::~GetInitdRequest() {
  // @@protoc_insertion_point(destructor:dos.GetInitdRequest)
  SharedDtor();
}

void GetInitdRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GetInitdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInitdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInitdRequest_descriptor_;
}

const GetInitdRequest& GetInitdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

GetInitdRequest* GetInitdRequest::default_instance_ = NULL;

GetInitdRequest* GetInitdRequest::New() const {
  return new GetInitdRequest;
}

void GetInitdRequest::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInitdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.GetInitdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.GetInitdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.GetInitdRequest)
  return false;
#undef DO_
}

void GetInitdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.GetInitdRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.GetInitdRequest)
}

::google::protobuf::uint8* GetInitdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.GetInitdRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.GetInitdRequest)
  return target;
}

int GetInitdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInitdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInitdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInitdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInitdRequest::MergeFrom(const GetInitdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInitdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInitdRequest::CopyFrom(const GetInitdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInitdRequest::IsInitialized() const {

  return true;
}

void GetInitdRequest::Swap(GetInitdRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInitdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInitdRequest_descriptor_;
  metadata.reflection = GetInitdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInitdResponse::kPidFieldNumber;
const int GetInitdResponse::kEndpointFieldNumber;
const int GetInitdResponse::kRootfsFieldNumber;
const int GetInitdResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

GetInitdResponse::GetInitdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.GetInitdResponse)
}

void GetInitdResponse::InitAsDefaultInstance() {
}

GetInitdResponse::GetInitdResponse(const GetInitdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.GetInitdResponse)
}

void GetInitdResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = 0;
  endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rootfs_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInitdResponse::~GetInitdResponse() {
  // @@protoc_insertion_point(destructor:dos.GetInitdResponse)
  SharedDtor();
}

void GetInitdResponse::SharedDtor() {
  if (endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endpoint_;
  }
  if (rootfs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rootfs_;
  }
  if (this != default_instance_) {
  }
}

void GetInitdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInitdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInitdResponse_descriptor_;
}

const GetInitdResponse& GetInitdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

GetInitdResponse* GetInitdResponse::default_instance_ = NULL;

GetInitdResponse* GetInitdResponse::New() const {
  return new GetInitdResponse;
}

void GetInitdResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetInitdResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(pid_, status_);
    if (has_endpoint()) {
      if (endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endpoint_->clear();
      }
    }
    if (has_rootfs()) {
      if (rootfs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rootfs_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInitdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.GetInitdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_endpoint;
        break;
      }

      // optional string endpoint = 2;
      case 2: {
        if (tag == 18) {
         parse_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endpoint().data(), this->endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rootfs;
        break;
      }

      // optional string rootfs = 3;
      case 3: {
        if (tag == 26) {
         parse_rootfs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rootfs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rootfs().data(), this->rootfs().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rootfs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .dos.RpcStatus status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.GetInitdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.GetInitdResponse)
  return false;
#undef DO_
}

void GetInitdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.GetInitdResponse)
  // optional int32 pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pid(), output);
  }

  // optional string endpoint = 2;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->endpoint(), output);
  }

  // optional string rootfs = 3;
  if (has_rootfs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rootfs().data(), this->rootfs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rootfs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rootfs(), output);
  }

  // optional .dos.RpcStatus status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.GetInitdResponse)
}

::google::protobuf::uint8* GetInitdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.GetInitdResponse)
  // optional int32 pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pid(), target);
  }

  // optional string endpoint = 2;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endpoint(), target);
  }

  // optional string rootfs = 3;
  if (has_rootfs()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rootfs().data(), this->rootfs().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rootfs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rootfs(), target);
  }

  // optional .dos.RpcStatus status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.GetInitdResponse)
  return target;
}

int GetInitdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional string endpoint = 2;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endpoint());
    }

    // optional string rootfs = 3;
    if (has_rootfs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rootfs());
    }

    // optional .dos.RpcStatus status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInitdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInitdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInitdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInitdResponse::MergeFrom(const GetInitdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_endpoint()) {
      set_endpoint(from.endpoint());
    }
    if (from.has_rootfs()) {
      set_rootfs(from.rootfs());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInitdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInitdResponse::CopyFrom(const GetInitdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInitdResponse::IsInitialized() const {

  return true;
}

void GetInitdResponse::Swap(GetInitdResponse* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(endpoint_, other->endpoint_);
    std::swap(rootfs_, other->rootfs_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInitdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInitdResponse_descriptor_;
  metadata.reflection = GetInitdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UpdateContainerRequest::UpdateContainerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.UpdateContainerRequest)
}

void UpdateContainerRequest::InitAsDefaultInstance() {
}

UpdateContainerRequest::UpdateContainerRequest(const UpdateContainerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.UpdateContainerRequest)
}

void UpdateContainerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateContainerRequest::~UpdateContainerRequest() {
  // @@protoc_insertion_point(destructor:dos.UpdateContainerRequest)
  SharedDtor();
}

void UpdateContainerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateContainerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateContainerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateContainerRequest_descriptor_;
}

const UpdateContainerRequest& UpdateContainerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

UpdateContainerRequest* UpdateContainerRequest::default_instance_ = NULL;

UpdateContainerRequest* UpdateContainerRequest::New() const {
  return new UpdateContainerRequest;
}

void UpdateContainerRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateContainerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.UpdateContainerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dos.UpdateContainerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.UpdateContainerRequest)
  return false;
#undef DO_
}

void UpdateContainerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.UpdateContainerRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.UpdateContainerRequest)
}

::google::protobuf::uint8* UpdateContainerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.UpdateContainerRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.UpdateContainerRequest)
  return target;
}

int UpdateContainerRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateContainerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateContainerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateContainerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateContainerRequest::MergeFrom(const UpdateContainerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateContainerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContainerRequest::CopyFrom(const UpdateContainerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContainerRequest::IsInitialized() const {

  return true;
}

void UpdateContainerRequest::Swap(UpdateContainerRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateContainerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateContainerRequest_descriptor_;
  metadata.reflection = UpdateContainerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UpdateContainerResponse::UpdateContainerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.UpdateContainerResponse)
}

void UpdateContainerResponse::InitAsDefaultInstance() {
}

UpdateContainerResponse::UpdateContainerResponse(const UpdateContainerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.UpdateContainerResponse)
}

void UpdateContainerResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateContainerResponse::~UpdateContainerResponse() {
  // @@protoc_insertion_point(destructor:dos.UpdateContainerResponse)
  SharedDtor();
}

void UpdateContainerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateContainerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateContainerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateContainerResponse_descriptor_;
}

const UpdateContainerResponse& UpdateContainerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

UpdateContainerResponse* UpdateContainerResponse::default_instance_ = NULL;

UpdateContainerResponse* UpdateContainerResponse::New() const {
  return new UpdateContainerResponse;
}

void UpdateContainerResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateContainerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.UpdateContainerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dos.UpdateContainerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.UpdateContainerResponse)
  return false;
#undef DO_
}

void UpdateContainerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.UpdateContainerResponse)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.UpdateContainerResponse)
}

::google::protobuf::uint8* UpdateContainerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.UpdateContainerResponse)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.UpdateContainerResponse)
  return target;
}

int UpdateContainerResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateContainerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateContainerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateContainerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateContainerResponse::MergeFrom(const UpdateContainerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateContainerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateContainerResponse::CopyFrom(const UpdateContainerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContainerResponse::IsInitialized() const {

  return true;
}

void UpdateContainerResponse::Swap(UpdateContainerResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateContainerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateContainerResponse_descriptor_;
  metadata.reflection = UpdateContainerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteContainerRequest::kNameFieldNumber;
#endif  // !_MSC_VER

DeleteContainerRequest::DeleteContainerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.DeleteContainerRequest)
}

void DeleteContainerRequest::InitAsDefaultInstance() {
}

DeleteContainerRequest::DeleteContainerRequest(const DeleteContainerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.DeleteContainerRequest)
}

void DeleteContainerRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteContainerRequest::~DeleteContainerRequest() {
  // @@protoc_insertion_point(destructor:dos.DeleteContainerRequest)
  SharedDtor();
}

void DeleteContainerRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DeleteContainerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteContainerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteContainerRequest_descriptor_;
}

const DeleteContainerRequest& DeleteContainerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

DeleteContainerRequest* DeleteContainerRequest::default_instance_ = NULL;

DeleteContainerRequest* DeleteContainerRequest::New() const {
  return new DeleteContainerRequest;
}

void DeleteContainerRequest::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteContainerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.DeleteContainerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.DeleteContainerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.DeleteContainerRequest)
  return false;
#undef DO_
}

void DeleteContainerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.DeleteContainerRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.DeleteContainerRequest)
}

::google::protobuf::uint8* DeleteContainerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.DeleteContainerRequest)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.DeleteContainerRequest)
  return target;
}

int DeleteContainerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteContainerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteContainerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteContainerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteContainerRequest::MergeFrom(const DeleteContainerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteContainerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteContainerRequest::CopyFrom(const DeleteContainerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteContainerRequest::IsInitialized() const {

  return true;
}

void DeleteContainerRequest::Swap(DeleteContainerRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteContainerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteContainerRequest_descriptor_;
  metadata.reflection = DeleteContainerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteContainerResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

DeleteContainerResponse::DeleteContainerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.DeleteContainerResponse)
}

void DeleteContainerResponse::InitAsDefaultInstance() {
}

DeleteContainerResponse::DeleteContainerResponse(const DeleteContainerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.DeleteContainerResponse)
}

void DeleteContainerResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteContainerResponse::~DeleteContainerResponse() {
  // @@protoc_insertion_point(destructor:dos.DeleteContainerResponse)
  SharedDtor();
}

void DeleteContainerResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteContainerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteContainerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteContainerResponse_descriptor_;
}

const DeleteContainerResponse& DeleteContainerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_2eproto();
  return *default_instance_;
}

DeleteContainerResponse* DeleteContainerResponse::default_instance_ = NULL;

DeleteContainerResponse* DeleteContainerResponse::New() const {
  return new DeleteContainerResponse;
}

void DeleteContainerResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteContainerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.DeleteContainerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.RpcStatus status = 2;
      case 2: {
        if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.DeleteContainerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.DeleteContainerResponse)
  return false;
#undef DO_
}

void DeleteContainerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.DeleteContainerResponse)
  // optional .dos.RpcStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.DeleteContainerResponse)
}

::google::protobuf::uint8* DeleteContainerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.DeleteContainerResponse)
  // optional .dos.RpcStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.DeleteContainerResponse)
  return target;
}

int DeleteContainerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.RpcStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteContainerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteContainerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteContainerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteContainerResponse::MergeFrom(const DeleteContainerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteContainerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteContainerResponse::CopyFrom(const DeleteContainerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteContainerResponse::IsInitialized() const {

  return true;
}

void DeleteContainerResponse::Swap(DeleteContainerResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteContainerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteContainerResponse_descriptor_;
  metadata.reflection = DeleteContainerResponse_reflection_;
  return metadata;
}


// ===================================================================

Engine::~Engine() {}

const ::google::protobuf::ServiceDescriptor* Engine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Engine_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Engine::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Engine_descriptor_;
}

void Engine::RunContainer(::google::protobuf::RpcController* controller,
                         const ::dos::RunContainerRequest*,
                         ::dos::RunContainerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RunContainer() not implemented.");
  done->Run();
}

void Engine::ShowContainer(::google::protobuf::RpcController* controller,
                         const ::dos::ShowContainerRequest*,
                         ::dos::ShowContainerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShowContainer() not implemented.");
  done->Run();
}

void Engine::ShowCLog(::google::protobuf::RpcController* controller,
                         const ::dos::ShowCLogRequest*,
                         ::dos::ShowCLogResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShowCLog() not implemented.");
  done->Run();
}

void Engine::GetInitd(::google::protobuf::RpcController* controller,
                         const ::dos::GetInitdRequest*,
                         ::dos::GetInitdResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetInitd() not implemented.");
  done->Run();
}

void Engine::DeleteContainer(::google::protobuf::RpcController* controller,
                         const ::dos::DeleteContainerRequest*,
                         ::dos::DeleteContainerResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method DeleteContainer() not implemented.");
  done->Run();
}

void Engine::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Engine_descriptor_);
  switch(method->index()) {
    case 0:
      RunContainer(controller,
             ::google::protobuf::down_cast<const ::dos::RunContainerRequest*>(request),
             ::google::protobuf::down_cast< ::dos::RunContainerResponse*>(response),
             done);
      break;
    case 1:
      ShowContainer(controller,
             ::google::protobuf::down_cast<const ::dos::ShowContainerRequest*>(request),
             ::google::protobuf::down_cast< ::dos::ShowContainerResponse*>(response),
             done);
      break;
    case 2:
      ShowCLog(controller,
             ::google::protobuf::down_cast<const ::dos::ShowCLogRequest*>(request),
             ::google::protobuf::down_cast< ::dos::ShowCLogResponse*>(response),
             done);
      break;
    case 3:
      GetInitd(controller,
             ::google::protobuf::down_cast<const ::dos::GetInitdRequest*>(request),
             ::google::protobuf::down_cast< ::dos::GetInitdResponse*>(response),
             done);
      break;
    case 4:
      DeleteContainer(controller,
             ::google::protobuf::down_cast<const ::dos::DeleteContainerRequest*>(request),
             ::google::protobuf::down_cast< ::dos::DeleteContainerResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Engine::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dos::RunContainerRequest::default_instance();
    case 1:
      return ::dos::ShowContainerRequest::default_instance();
    case 2:
      return ::dos::ShowCLogRequest::default_instance();
    case 3:
      return ::dos::GetInitdRequest::default_instance();
    case 4:
      return ::dos::DeleteContainerRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& Engine::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dos::RunContainerResponse::default_instance();
    case 1:
      return ::dos::ShowContainerResponse::default_instance();
    case 2:
      return ::dos::ShowCLogResponse::default_instance();
    case 3:
      return ::dos::GetInitdResponse::default_instance();
    case 4:
      return ::dos::DeleteContainerResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

Engine_Stub::Engine_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Engine_Stub::Engine_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Engine_Stub::~Engine_Stub() {
  if (owns_channel_) delete channel_;
}

void Engine_Stub::RunContainer(::google::protobuf::RpcController* controller,
                              const ::dos::RunContainerRequest* request,
                              ::dos::RunContainerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Engine_Stub::ShowContainer(::google::protobuf::RpcController* controller,
                              const ::dos::ShowContainerRequest* request,
                              ::dos::ShowContainerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Engine_Stub::ShowCLog(::google::protobuf::RpcController* controller,
                              const ::dos::ShowCLogRequest* request,
                              ::dos::ShowCLogResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Engine_Stub::GetInitd(::google::protobuf::RpcController* controller,
                              const ::dos::GetInitdRequest* request,
                              ::dos::GetInitdResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void Engine_Stub::DeleteContainer(::google::protobuf::RpcController* controller,
                              const ::dos::DeleteContainerRequest* request,
                              ::dos::DeleteContainerResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace dos

// @@protoc_insertion_point(global_scope)
