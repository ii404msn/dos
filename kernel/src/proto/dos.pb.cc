// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dos.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dos.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dos {

namespace {

const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cpu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cpu_reflection_ = NULL;
const ::google::protobuf::Descriptor* Memory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Memory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* Port_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Port_reflection_ = NULL;
const ::google::protobuf::Descriptor* Network_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Network_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiskIO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiskIO_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_reflection_ = NULL;
const ::google::protobuf::Descriptor* Process_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Process_reflection_ = NULL;
const ::google::protobuf::Descriptor* Platform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Platform_reflection_ = NULL;
const ::google::protobuf::Descriptor* Root_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Root_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mount_reflection_ = NULL;
const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* Container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Container_reflection_ = NULL;
const ::google::protobuf::Descriptor* PodSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PodSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PodLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PodLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PodStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PodStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* NodeStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RpcStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContainerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RestartStrategy_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PodType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JobState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PodSchedStage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PodState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContainerState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HealthState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dos_2eproto() {
  protobuf_AddDesc_dos_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dos.proto");
  GOOGLE_CHECK(file != NULL);
  User_descriptor_ = file->message_type(0);
  static const int User_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, home_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  Group_descriptor_ = file->message_type(1);
  static const int Group_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, ctime_),
  };
  Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Group_descriptor_,
      Group::default_instance_,
      Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Group));
  Cpu_descriptor_ = file->message_type(2);
  static const int Cpu_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpu, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpu, share_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpu, used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpu, assigned_),
  };
  Cpu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cpu_descriptor_,
      Cpu::default_instance_,
      Cpu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cpu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cpu));
  Memory_descriptor_ = file->message_type(3);
  static const int Memory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, assigned_),
  };
  Memory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Memory_descriptor_,
      Memory::default_instance_,
      Memory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Memory));
  Range_descriptor_ = file->message_type(4);
  static const int Range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, end_),
  };
  Range_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Range_descriptor_,
      Range::default_instance_,
      Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Range));
  Port_descriptor_ = file->message_type(5);
  static const int Port_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, assigned_),
  };
  Port_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Port_descriptor_,
      Port::default_instance_,
      Port_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Port, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Port));
  Network_descriptor_ = file->message_type(6);
  static const int Network_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, out_bytes_ps_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, out_bytes_ps_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, out_bytes_ps_assigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, in_bytes_ps_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, in_bytes_ps_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, in_bytes_ps_assigned_),
  };
  Network_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Network_descriptor_,
      Network::default_instance_,
      Network_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Network, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Network));
  DiskIO_descriptor_ = file->message_type(7);
  static const int DiskIO_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskIO, read_bytes_ps_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskIO, read_bytes_ps_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskIO, read_bytes_ps_assigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskIO, write_bytes_ps_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskIO, write_bytes_ps_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskIO, write_bytes_ps_assigned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskIO, device_),
  };
  DiskIO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiskIO_descriptor_,
      DiskIO::default_instance_,
      DiskIO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskIO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiskIO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiskIO));
  Resource_descriptor_ = file->message_type(8);
  static const int Resource_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, diskio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, gtime_),
  };
  Resource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Resource_descriptor_,
      Resource::default_instance_,
      Resource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Resource));
  Process_descriptor_ = file->message_type(9);
  static const int Process_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, envs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, cwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, pty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, running_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, gpid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, rtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, coredump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, exit_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, terminal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, interceptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, hostname_),
  };
  Process_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Process_descriptor_,
      Process::default_instance_,
      Process_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Process, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Process));
  Platform_descriptor_ = file->message_type(10);
  static const int Platform_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, arch_),
  };
  Platform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Platform_descriptor_,
      Platform::default_instance_,
      Platform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Platform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Platform));
  Root_descriptor_ = file->message_type(11);
  static const int Root_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, readonly_),
  };
  Root_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Root_descriptor_,
      Root::default_instance_,
      Root_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Root, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Root));
  Mount_descriptor_ = file->message_type(12);
  static const int Mount_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mount, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mount, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mount, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mount, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mount, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mount, options_),
  };
  Mount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mount_descriptor_,
      Mount::default_instance_,
      Mount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mount));
  Device_descriptor_ = file->message_type(13);
  static const int Device_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, permissions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, gid_),
  };
  Device_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Device));
  NodeMeta_descriptor_ = file->message_type(14);
  static const int NodeMeta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, resource_),
  };
  NodeMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeMeta_descriptor_,
      NodeMeta::default_instance_,
      NodeMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeMeta));
  Container_descriptor_ = file->message_type(15);
  static const int Container_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, requirement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, enable_ns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, reserve_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, restart_strategy_),
  };
  Container_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Container_descriptor_,
      Container::default_instance_,
      Container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Container));
  PodSpec_descriptor_ = file->message_type(16);
  static const int PodSpec_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodSpec, containers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodSpec, log_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodSpec, type_),
  };
  PodSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PodSpec_descriptor_,
      PodSpec::default_instance_,
      PodSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PodSpec));
  JobSpec_descriptor_ = file->message_type(17);
  static const int JobSpec_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSpec, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSpec, replica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSpec, deploy_step_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSpec, update_step_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSpec, pod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSpec, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSpec, raw_),
  };
  JobSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobSpec_descriptor_,
      JobSpec::default_instance_,
      JobSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobSpec));
  JobStatus_descriptor_ = file->message_type(18);
  static const int JobStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, utime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, desc_),
  };
  JobStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobStatus_descriptor_,
      JobStatus::default_instance_,
      JobStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobStatus));
  PodLog_descriptor_ = file->message_type(19);
  static const int PodLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodLog, state_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodLog, state_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodLog, msg_),
  };
  PodLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PodLog_descriptor_,
      PodLog::default_instance_,
      PodLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PodLog));
  PodStatus_descriptor_ = file->message_type(20);
  static const int PodStatus_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, cstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, sched_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, boot_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, start_pending_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, job_name_),
  };
  PodStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PodStatus_descriptor_,
      PodStatus::default_instance_,
      PodStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PodStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PodStatus));
  NodeStatus_descriptor_ = file->message_type(21);
  static const int NodeStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, pstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, version_),
  };
  NodeStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeStatus_descriptor_,
      NodeStatus::default_instance_,
      NodeStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeStatus));
  ContainerLog_descriptor_ = file->message_type(22);
  static const int ContainerLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLog, cfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLog, cto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLog, msg_),
  };
  ContainerLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerLog_descriptor_,
      ContainerLog::default_instance_,
      ContainerLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerLog));
  ContainerStatus_descriptor_ = file->message_type(23);
  static const int ContainerStatus_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, boot_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, spec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, last_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, restart_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, node_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, health_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, lowest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, highest_),
  };
  ContainerStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerStatus_descriptor_,
      ContainerStatus::default_instance_,
      ContainerStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerStatus));
  RpcStatus_descriptor_ = file->enum_type(0);
  NodeState_descriptor_ = file->enum_type(1);
  ContainerType_descriptor_ = file->enum_type(2);
  RestartStrategy_descriptor_ = file->enum_type(3);
  PodType_descriptor_ = file->enum_type(4);
  JobState_descriptor_ = file->enum_type(5);
  PodSchedStage_descriptor_ = file->enum_type(6);
  PodState_descriptor_ = file->enum_type(7);
  ContainerState_descriptor_ = file->enum_type(8);
  HealthState_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dos_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Group_descriptor_, &Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cpu_descriptor_, &Cpu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Memory_descriptor_, &Memory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Range_descriptor_, &Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Port_descriptor_, &Port::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Network_descriptor_, &Network::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiskIO_descriptor_, &DiskIO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Resource_descriptor_, &Resource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Process_descriptor_, &Process::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Platform_descriptor_, &Platform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Root_descriptor_, &Root::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mount_descriptor_, &Mount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Device_descriptor_, &Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeMeta_descriptor_, &NodeMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Container_descriptor_, &Container::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PodSpec_descriptor_, &PodSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobSpec_descriptor_, &JobSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobStatus_descriptor_, &JobStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PodLog_descriptor_, &PodLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PodStatus_descriptor_, &PodStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeStatus_descriptor_, &NodeStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerLog_descriptor_, &ContainerLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerStatus_descriptor_, &ContainerStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dos_2eproto() {
  delete User::default_instance_;
  delete User_reflection_;
  delete Group::default_instance_;
  delete Group_reflection_;
  delete Cpu::default_instance_;
  delete Cpu_reflection_;
  delete Memory::default_instance_;
  delete Memory_reflection_;
  delete Range::default_instance_;
  delete Range_reflection_;
  delete Port::default_instance_;
  delete Port_reflection_;
  delete Network::default_instance_;
  delete Network_reflection_;
  delete DiskIO::default_instance_;
  delete DiskIO_reflection_;
  delete Resource::default_instance_;
  delete Resource_reflection_;
  delete Process::default_instance_;
  delete Process_reflection_;
  delete Platform::default_instance_;
  delete Platform_reflection_;
  delete Root::default_instance_;
  delete Root_reflection_;
  delete Mount::default_instance_;
  delete Mount_reflection_;
  delete Device::default_instance_;
  delete Device_reflection_;
  delete NodeMeta::default_instance_;
  delete NodeMeta_reflection_;
  delete Container::default_instance_;
  delete Container_reflection_;
  delete PodSpec::default_instance_;
  delete PodSpec_reflection_;
  delete JobSpec::default_instance_;
  delete JobSpec_reflection_;
  delete JobStatus::default_instance_;
  delete JobStatus_reflection_;
  delete PodLog::default_instance_;
  delete PodLog_reflection_;
  delete PodStatus::default_instance_;
  delete PodStatus_reflection_;
  delete NodeStatus::default_instance_;
  delete NodeStatus_reflection_;
  delete ContainerLog::default_instance_;
  delete ContainerLog_reflection_;
  delete ContainerStatus::default_instance_;
  delete ContainerStatus_reflection_;
}

void protobuf_AddDesc_dos_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tdos.proto\022\003dos\"K\n\004User\022\013\n\003uid\030\001 \001(\005\022\014\n"
    "\004name\030\002 \001(\t\022\013\n\003gid\030\003 \001(\005\022\r\n\005ctime\030\004 \001(\004\022"
    "\014\n\004home\030\005 \001(\t\"1\n\005Group\022\013\n\003gid\030\001 \001(\005\022\014\n\004n"
    "ame\030\002 \001(\t\022\r\n\005ctime\030\003 \001(\004\"C\n\003Cpu\022\r\n\005limit"
    "\030\001 \001(\004\022\r\n\005share\030\002 \001(\004\022\014\n\004used\030\003 \001(\004\022\020\n\010a"
    "ssigned\030\004 \001(\004\"7\n\006Memory\022\r\n\005limit\030\001 \001(\004\022\014"
    "\n\004used\030\002 \001(\004\022\020\n\010assigned\030\003 \001(\004\"#\n\005Range\022"
    "\r\n\005start\030\001 \001(\r\022\013\n\003end\030\002 \001(\r\"3\n\004Port\022\031\n\005r"
    "ange\030\001 \001(\0132\n.dos.Range\022\020\n\010assigned\030\002 \003(\r"
    "\"\262\001\n\007Network\022\032\n\022out_bytes_ps_limit\030\001 \001(\r"
    "\022\031\n\021out_bytes_ps_used\030\002 \001(\r\022\035\n\025out_bytes"
    "_ps_assigned\030\003 \001(\r\022\031\n\021in_bytes_ps_limit\030"
    "\004 \001(\r\022\030\n\020in_bytes_ps_used\030\005 \001(\r\022\034\n\024in_by"
    "tes_ps_assigned\030\006 \001(\r\"\315\001\n\006DiskIO\022\033\n\023read"
    "_bytes_ps_limit\030\001 \001(\r\022\032\n\022read_bytes_ps_u"
    "sed\030\002 \001(\r\022\036\n\026read_bytes_ps_assigned\030\003 \001("
    "\r\022\034\n\024write_bytes_ps_limit\030\004 \001(\r\022\033\n\023write"
    "_bytes_ps_used\030\005 \001(\r\022\037\n\027write_bytes_ps_a"
    "ssigned\030\006 \001(\r\022\016\n\006device\030\007 \001(\t\"\242\001\n\010Resour"
    "ce\022\025\n\003cpu\030\001 \001(\0132\010.dos.Cpu\022\033\n\006memory\030\002 \001("
    "\0132\013.dos.Memory\022\027\n\004port\030\003 \001(\0132\t.dos.Port\022"
    "\035\n\007network\030\004 \001(\0132\014.dos.Network\022\033\n\006diskio"
    "\030\005 \003(\0132\013.dos.DiskIO\022\r\n\005gtime\030\006 \001(\004\"\377\001\n\007P"
    "rocess\022\014\n\004args\030\001 \003(\t\022\027\n\004user\030\002 \001(\0132\t.dos"
    ".User\022\014\n\004envs\030\003 \003(\t\022\013\n\003cwd\030\004 \001(\t\022\013\n\003pty\030"
    "\005 \001(\t\022\017\n\007running\030\006 \001(\010\022\013\n\003pid\030\007 \001(\005\022\014\n\004g"
    "pid\030\010 \001(\005\022\r\n\005rtime\030\t \001(\003\022\020\n\010coredump\030\n \001"
    "(\010\022\021\n\texit_code\030\013 \001(\005\022\014\n\004name\030\014 \001(\t\022\020\n\010t"
    "erminal\030\r \001(\010\022\023\n\013interceptor\030\016 \001(\t\022\020\n\010ho"
    "stname\030\017 \001(\t\"$\n\010Platform\022\n\n\002os\030\001 \001(\t\022\014\n\004"
    "arch\030\002 \001(\t\"&\n\004Root\022\014\n\004path\030\001 \001(\t\022\020\n\010read"
    "only\030\002 \001(\010\"g\n\005Mount\022\014\n\004name\030\001 \001(\t\022\014\n\004pat"
    "h\030\002 \001(\t\022\014\n\004type\030\003 \001(\t\022\016\n\006source\030\005 \001(\t\022\023\n"
    "\013destination\030\006 \001(\t\022\017\n\007options\030\007 \003(\t\"\177\n\006D"
    "evice\022\014\n\004path\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\022\r\n\005maj"
    "or\030\003 \001(\005\022\r\n\005minor\030\004 \001(\005\022\023\n\013permissions\030\005"
    " \001(\t\022\014\n\004mode\030\006 \001(\005\022\013\n\003uid\030\007 \001(\005\022\013\n\003gid\030\010"
    " \001(\005\"[\n\010NodeMeta\022\n\n\002ip\030\001 \001(\t\022\020\n\010hostname"
    "\030\002 \001(\t\022\020\n\010endpoint\030\003 \001(\t\022\037\n\010resource\030\004 \001"
    "(\0132\r.dos.Resource\"\323\001\n\tContainer\022\"\n\013requi"
    "rement\030\001 \001(\0132\r.dos.Resource\022\r\n\005image\030\002 \001"
    "(\t\022\013\n\003tag\030\003 \001(\t\022\013\n\003uri\030\004 \001(\t\022 \n\004type\030\005 \001"
    "(\0162\022.dos.ContainerType\022\021\n\tenable_ns\030\006 \001("
    "\010\022\024\n\014reserve_time\030\007 \001(\005\022.\n\020restart_strat"
    "egy\030\010 \001(\0162\024.dos.RestartStrategy\"[\n\007PodSp"
    "ec\022\"\n\ncontainers\030\001 \003(\0132\016.dos.Container\022\020"
    "\n\010log_size\030\002 \001(\005\022\032\n\004type\030\003 \001(\0162\014.dos.Pod"
    "Type\"\225\001\n\007JobSpec\022\014\n\004name\030\001 \001(\t\022\017\n\007replic"
    "a\030\002 \001(\r\022\030\n\020deploy_step_size\030\003 \001(\r\022\030\n\020upd"
    "ate_step_size\030\004 \001(\r\022\031\n\003pod\030\005 \001(\0132\014.dos.P"
    "odSpec\022\017\n\007version\030\006 \001(\t\022\013\n\003raw\030\007 \001(\014\"\204\001\n"
    "\tJobStatus\022\014\n\004name\030\001 \001(\t\022\034\n\005state\030\002 \001(\0162"
    "\r.dos.JobState\022\021\n\tuser_name\030\003 \001(\t\022\r\n\005cti"
    "me\030\004 \001(\003\022\r\n\005utime\030\005 \001(\003\022\032\n\004desc\030\006 \001(\0132\014."
    "dos.JobSpec\"u\n\006PodLog\022\014\n\004name\030\001 \001(\t\022!\n\ns"
    "tate_from\030\002 \001(\0162\r.dos.PodState\022\037\n\010state_"
    "to\030\003 \001(\0162\r.dos.PodState\022\014\n\004time\030\004 \001(\003\022\013\n"
    "\003msg\030\005 \001(\t\"\204\002\n\tPodStatus\022\014\n\004name\030\001 \001(\t\022%"
    "\n\007cstatus\030\002 \003(\0132\024.dos.ContainerStatus\022\032\n"
    "\004desc\030\003 \001(\0132\014.dos.PodSpec\022!\n\005stage\030\004 \001(\016"
    "2\022.dos.PodSchedStage\022\034\n\005state\030\005 \001(\0162\r.do"
    "s.PodState\022\022\n\nsched_time\030\006 \001(\003\022\021\n\tboot_t"
    "ime\030\007 \001(\003\022\032\n\022start_pending_time\030\010 \001(\003\022\020\n"
    "\010endpoint\030\t \001(\t\022\020\n\010job_name\030\n \001(\t\"\254\001\n\nNo"
    "deStatus\022\037\n\010resource\030\001 \001(\0132\r.dos.Resourc"
    "e\022\037\n\007pstatus\030\002 \003(\0132\016.dos.PodStatus\022\035\n\005st"
    "ate\030\003 \001(\0162\016.dos.NodeState\022\033\n\004meta\030\004 \001(\0132"
    "\r.dos.NodeMeta\022\017\n\007task_id\030\005 \001(\003\022\017\n\007versi"
    "on\030\006 \001(\005\"}\n\014ContainerLog\022\014\n\004name\030\001 \001(\t\022\""
    "\n\005cfrom\030\002 \001(\0162\023.dos.ContainerState\022 \n\003ct"
    "o\030\003 \001(\0162\023.dos.ContainerState\022\014\n\004time\030\004 \001"
    "(\003\022\013\n\003msg\030\005 \001(\t\"\317\002\n\017ContainerStatus\022\014\n\004n"
    "ame\030\001 \001(\t\022\022\n\nstart_time\030\002 \001(\003\022\037\n\010resourc"
    "e\030\003 \001(\0132\r.dos.Resource\022\"\n\005state\030\004 \001(\0162\023."
    "dos.ContainerState\022\021\n\tboot_time\030\006 \001(\003\022\034\n"
    "\004spec\030\007 \001(\0132\016.dos.Container\022\023\n\013last_upda"
    "te\030\010 \001(\003\022\025\n\rrestart_count\030\t \001(\003\022\021\n\tnode_"
    "addr\030\n \001(\t\022&\n\014health_state\030\013 \001(\0162\020.dos.H"
    "ealthState\022\035\n\006lowest\030\014 \001(\0132\r.dos.Resourc"
    "e\022\036\n\007highest\030\r \001(\0132\r.dos.Resource*|\n\tRpc"
    "Status\022\n\n\006kRpcOk\020\000\022\033\n\027kRpcPrepareRootfsF"
    "ailed\020\001\022\021\n\rkRpcNameExist\020\002\022\r\n\tkRpcError\020"
    "\003\022\020\n\014kRpcNotFound\020\004\022\022\n\016kRpcNoResource\020\005*"
    "\?\n\tNodeState\022\017\n\013kNodeNormal\020\000\022\020\n\014kNodeOf"
    "fline\020\001\022\017\n\013kNodeFrozen\020\002*3\n\rContainerTyp"
    "e\022\013\n\007kSystem\020\000\022\013\n\007kDocker\020\001\022\010\n\004kOci\020\002*Z\n"
    "\017RestartStrategy\022\n\n\006kNever\020\000\022\024\n\020kTenTime"
    "sPerHour\020\n\022\027\n\023kTwentyTimesPerHour\020\024\022\014\n\007k"
    "Always\020\350\007*M\n\007PodType\022\022\n\016kPodBesteffort\020\000"
    "\022\r\n\tkPodBatch\020\036\022\017\n\013kPodLongrun\020<\022\016\n\nkPod"
    "System\020P*+\n\010JobState\022\016\n\nkJobNormal\020\000\022\017\n\013"
    "kJobRemoved\020\001*y\n\rPodSchedStage\022\031\n\025kPodSc"
    "hedStagePending\020\000\022\031\n\025kPodSchedStageRunni"
    "ng\020\001\022\027\n\023kPodSchedStageDeath\020\002\022\031\n\025kPodSch"
    "edStageRemoved\020\003*N\n\010PodState\022\017\n\013kPodPend"
    "ing\020\000\022\021\n\rkPodDeploying\020\001\022\017\n\013kPodRunning\020"
    "\002\022\r\n\tkPodDeath\020\003*\311\001\n\016ContainerState\022\025\n\021k"
    "ContainerPending\020\000\022\025\n\021kContainerPulling\020"
    "\001\022\025\n\021kContainerBooting\020\002\022\025\n\021kContainerRu"
    "nning\020\003\022\027\n\023kContainerCompleted\020\004\022\024\n\020kCon"
    "tainerKilled\020\005\022\027\n\023kContainerReserving\020\006\022"
    "\023\n\017kContainerError\020\007*J\n\013HealthState\022\021\n\rk"
    "UnCalculated\020\000\022\t\n\005kGood\020\n\022\016\n\nkSubHealth\020"
    "\036\022\r\n\tkUnHealth\020(", 4136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dos.proto", &protobuf_RegisterTypes);
  User::default_instance_ = new User();
  Group::default_instance_ = new Group();
  Cpu::default_instance_ = new Cpu();
  Memory::default_instance_ = new Memory();
  Range::default_instance_ = new Range();
  Port::default_instance_ = new Port();
  Network::default_instance_ = new Network();
  DiskIO::default_instance_ = new DiskIO();
  Resource::default_instance_ = new Resource();
  Process::default_instance_ = new Process();
  Platform::default_instance_ = new Platform();
  Root::default_instance_ = new Root();
  Mount::default_instance_ = new Mount();
  Device::default_instance_ = new Device();
  NodeMeta::default_instance_ = new NodeMeta();
  Container::default_instance_ = new Container();
  PodSpec::default_instance_ = new PodSpec();
  JobSpec::default_instance_ = new JobSpec();
  JobStatus::default_instance_ = new JobStatus();
  PodLog::default_instance_ = new PodLog();
  PodStatus::default_instance_ = new PodStatus();
  NodeStatus::default_instance_ = new NodeStatus();
  ContainerLog::default_instance_ = new ContainerLog();
  ContainerStatus::default_instance_ = new ContainerStatus();
  User::default_instance_->InitAsDefaultInstance();
  Group::default_instance_->InitAsDefaultInstance();
  Cpu::default_instance_->InitAsDefaultInstance();
  Memory::default_instance_->InitAsDefaultInstance();
  Range::default_instance_->InitAsDefaultInstance();
  Port::default_instance_->InitAsDefaultInstance();
  Network::default_instance_->InitAsDefaultInstance();
  DiskIO::default_instance_->InitAsDefaultInstance();
  Resource::default_instance_->InitAsDefaultInstance();
  Process::default_instance_->InitAsDefaultInstance();
  Platform::default_instance_->InitAsDefaultInstance();
  Root::default_instance_->InitAsDefaultInstance();
  Mount::default_instance_->InitAsDefaultInstance();
  Device::default_instance_->InitAsDefaultInstance();
  NodeMeta::default_instance_->InitAsDefaultInstance();
  Container::default_instance_->InitAsDefaultInstance();
  PodSpec::default_instance_->InitAsDefaultInstance();
  JobSpec::default_instance_->InitAsDefaultInstance();
  JobStatus::default_instance_->InitAsDefaultInstance();
  PodLog::default_instance_->InitAsDefaultInstance();
  PodStatus::default_instance_->InitAsDefaultInstance();
  NodeStatus::default_instance_->InitAsDefaultInstance();
  ContainerLog::default_instance_->InitAsDefaultInstance();
  ContainerStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dos_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dos_2eproto {
  StaticDescriptorInitializer_dos_2eproto() {
    protobuf_AddDesc_dos_2eproto();
  }
} static_descriptor_initializer_dos_2eproto_;
const ::google::protobuf::EnumDescriptor* RpcStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpcStatus_descriptor_;
}
bool RpcStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeState_descriptor_;
}
bool NodeState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContainerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerType_descriptor_;
}
bool ContainerType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RestartStrategy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RestartStrategy_descriptor_;
}
bool RestartStrategy_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 20:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PodType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PodType_descriptor_;
}
bool PodType_IsValid(int value) {
  switch(value) {
    case 0:
    case 30:
    case 60:
    case 80:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JobState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobState_descriptor_;
}
bool JobState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PodSchedStage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PodSchedStage_descriptor_;
}
bool PodSchedStage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PodState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PodState_descriptor_;
}
bool PodState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContainerState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerState_descriptor_;
}
bool ContainerState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HealthState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HealthState_descriptor_;
}
bool HealthState_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 30:
    case 40:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int User::kUidFieldNumber;
const int User::kNameFieldNumber;
const int User::kGidFieldNumber;
const int User::kCtimeFieldNumber;
const int User::kHomeFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.User)
}

void User::InitAsDefaultInstance() {
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.User)
}

void User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gid_ = 0;
  ctime_ = GOOGLE_ULONGLONG(0);
  home_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:dos.User)
  SharedDtor();
}

void User::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (home_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete home_;
  }
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<User*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, ctime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_home()) {
      if (home_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        home_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }

      // optional int32 gid = 3;
      case 3: {
        if (tag == 24) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ctime;
        break;
      }

      // optional uint64 ctime = 4;
      case 4: {
        if (tag == 32) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_home;
        break;
      }

      // optional string home = 5;
      case 5: {
        if (tag == 42) {
         parse_home:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_home()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->home().data(), this->home().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "home");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.User)
  // optional int32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }

  // optional uint64 ctime = 4;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ctime(), output);
  }

  // optional string home = 5;
  if (has_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->home().data(), this->home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "home");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->home(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.User)
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.User)
  // optional int32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }

  // optional uint64 ctime = 4;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ctime(), target);
  }

  // optional string home = 5;
  if (has_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->home().data(), this->home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "home");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->home(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.User)
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

    // optional uint64 ctime = 4;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctime());
    }

    // optional string home = 5;
    if (has_home()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->home());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_home()) {
      set_home(from.home());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {

  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(gid_, other->gid_);
    std::swap(ctime_, other->ctime_);
    std::swap(home_, other->home_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Group::kGidFieldNumber;
const int Group::kNameFieldNumber;
const int Group::kCtimeFieldNumber;
#endif  // !_MSC_VER

Group::Group()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Group)
}

void Group::InitAsDefaultInstance() {
}

Group::Group(const Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Group)
}

void Group::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:dos.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New() const {
  return new Group;
}

void Group::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Group*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ctime_, gid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ctime;
        break;
      }

      // optional uint64 ctime = 3;
      case 3: {
        if (tag == 24) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Group)
  // optional int32 gid = 1;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint64 ctime = 3;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ctime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Group)
}

::google::protobuf::uint8* Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Group)
  // optional int32 gid = 1;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 ctime = 3;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ctime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Group)
  return target;
}

int Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gid = 1;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 ctime = 3;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {

  return true;
}

void Group::Swap(Group* other) {
  if (other != this) {
    std::swap(gid_, other->gid_);
    std::swap(name_, other->name_);
    std::swap(ctime_, other->ctime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cpu::kLimitFieldNumber;
const int Cpu::kShareFieldNumber;
const int Cpu::kUsedFieldNumber;
const int Cpu::kAssignedFieldNumber;
#endif  // !_MSC_VER

Cpu::Cpu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Cpu)
}

void Cpu::InitAsDefaultInstance() {
}

Cpu::Cpu(const Cpu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Cpu)
}

void Cpu::SharedCtor() {
  _cached_size_ = 0;
  limit_ = GOOGLE_ULONGLONG(0);
  share_ = GOOGLE_ULONGLONG(0);
  used_ = GOOGLE_ULONGLONG(0);
  assigned_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cpu::~Cpu() {
  // @@protoc_insertion_point(destructor:dos.Cpu)
  SharedDtor();
}

void Cpu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Cpu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cpu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cpu_descriptor_;
}

const Cpu& Cpu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Cpu* Cpu::default_instance_ = NULL;

Cpu* Cpu::New() const {
  return new Cpu;
}

void Cpu::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Cpu*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(limit_, assigned_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cpu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Cpu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 limit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_share;
        break;
      }

      // optional uint64 share = 2;
      case 2: {
        if (tag == 16) {
         parse_share:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_)));
          set_has_share();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_used;
        break;
      }

      // optional uint64 used = 3;
      case 3: {
        if (tag == 24) {
         parse_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_)));
          set_has_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_assigned;
        break;
      }

      // optional uint64 assigned = 4;
      case 4: {
        if (tag == 32) {
         parse_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &assigned_)));
          set_has_assigned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Cpu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Cpu)
  return false;
#undef DO_
}

void Cpu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Cpu)
  // optional uint64 limit = 1;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->limit(), output);
  }

  // optional uint64 share = 2;
  if (has_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->share(), output);
  }

  // optional uint64 used = 3;
  if (has_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->used(), output);
  }

  // optional uint64 assigned = 4;
  if (has_assigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->assigned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Cpu)
}

::google::protobuf::uint8* Cpu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Cpu)
  // optional uint64 limit = 1;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->limit(), target);
  }

  // optional uint64 share = 2;
  if (has_share()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->share(), target);
  }

  // optional uint64 used = 3;
  if (has_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->used(), target);
  }

  // optional uint64 assigned = 4;
  if (has_assigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->assigned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Cpu)
  return target;
}

int Cpu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 limit = 1;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->limit());
    }

    // optional uint64 share = 2;
    if (has_share()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share());
    }

    // optional uint64 used = 3;
    if (has_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->used());
    }

    // optional uint64 assigned = 4;
    if (has_assigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->assigned());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cpu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cpu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cpu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cpu::MergeFrom(const Cpu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_share()) {
      set_share(from.share());
    }
    if (from.has_used()) {
      set_used(from.used());
    }
    if (from.has_assigned()) {
      set_assigned(from.assigned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cpu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cpu::CopyFrom(const Cpu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cpu::IsInitialized() const {

  return true;
}

void Cpu::Swap(Cpu* other) {
  if (other != this) {
    std::swap(limit_, other->limit_);
    std::swap(share_, other->share_);
    std::swap(used_, other->used_);
    std::swap(assigned_, other->assigned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cpu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cpu_descriptor_;
  metadata.reflection = Cpu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Memory::kLimitFieldNumber;
const int Memory::kUsedFieldNumber;
const int Memory::kAssignedFieldNumber;
#endif  // !_MSC_VER

Memory::Memory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Memory)
}

void Memory::InitAsDefaultInstance() {
}

Memory::Memory(const Memory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Memory)
}

void Memory::SharedCtor() {
  _cached_size_ = 0;
  limit_ = GOOGLE_ULONGLONG(0);
  used_ = GOOGLE_ULONGLONG(0);
  assigned_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:dos.Memory)
  SharedDtor();
}

void Memory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Memory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Memory_descriptor_;
}

const Memory& Memory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Memory* Memory::default_instance_ = NULL;

Memory* Memory::New() const {
  return new Memory;
}

void Memory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Memory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(limit_, assigned_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Memory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 limit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_used;
        break;
      }

      // optional uint64 used = 2;
      case 2: {
        if (tag == 16) {
         parse_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &used_)));
          set_has_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_assigned;
        break;
      }

      // optional uint64 assigned = 3;
      case 3: {
        if (tag == 24) {
         parse_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &assigned_)));
          set_has_assigned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Memory)
  return false;
#undef DO_
}

void Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Memory)
  // optional uint64 limit = 1;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->limit(), output);
  }

  // optional uint64 used = 2;
  if (has_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->used(), output);
  }

  // optional uint64 assigned = 3;
  if (has_assigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->assigned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Memory)
}

::google::protobuf::uint8* Memory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Memory)
  // optional uint64 limit = 1;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->limit(), target);
  }

  // optional uint64 used = 2;
  if (has_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->used(), target);
  }

  // optional uint64 assigned = 3;
  if (has_assigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->assigned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Memory)
  return target;
}

int Memory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 limit = 1;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->limit());
    }

    // optional uint64 used = 2;
    if (has_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->used());
    }

    // optional uint64 assigned = 3;
    if (has_assigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->assigned());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Memory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Memory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Memory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_used()) {
      set_used(from.used());
    }
    if (from.has_assigned()) {
      set_assigned(from.assigned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Memory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {

  return true;
}

void Memory::Swap(Memory* other) {
  if (other != this) {
    std::swap(limit_, other->limit_);
    std::swap(used_, other->used_);
    std::swap(assigned_, other->assigned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Memory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Memory_descriptor_;
  metadata.reflection = Memory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Range::kStartFieldNumber;
const int Range::kEndFieldNumber;
#endif  // !_MSC_VER

Range::Range()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Range)
}

void Range::InitAsDefaultInstance() {
}

Range::Range(const Range& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Range)
}

void Range::SharedCtor() {
  _cached_size_ = 0;
  start_ = 0u;
  end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Range::~Range() {
  // @@protoc_insertion_point(destructor:dos.Range)
  SharedDtor();
}

void Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Range_descriptor_;
}

const Range& Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Range* Range::default_instance_ = NULL;

Range* Range::New() const {
  return new Range;
}

void Range::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Range*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(start_, end_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Range)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // optional uint32 end = 2;
      case 2: {
        if (tag == 16) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Range)
  return false;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Range)
  // optional uint32 start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start(), output);
  }

  // optional uint32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Range)
}

::google::protobuf::uint8* Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Range)
  // optional uint32 start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start(), target);
  }

  // optional uint32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Range)
  return target;
}

int Range::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }

    // optional uint32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {

  return true;
}

void Range::Swap(Range* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Range_descriptor_;
  metadata.reflection = Range_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Port::kRangeFieldNumber;
const int Port::kAssignedFieldNumber;
#endif  // !_MSC_VER

Port::Port()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Port)
}

void Port::InitAsDefaultInstance() {
  range_ = const_cast< ::dos::Range*>(&::dos::Range::default_instance());
}

Port::Port(const Port& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Port)
}

void Port::SharedCtor() {
  _cached_size_ = 0;
  range_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Port::~Port() {
  // @@protoc_insertion_point(destructor:dos.Port)
  SharedDtor();
}

void Port::SharedDtor() {
  if (this != default_instance_) {
    delete range_;
  }
}

void Port::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Port::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Port_descriptor_;
}

const Port& Port::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Port* Port::default_instance_ = NULL;

Port* Port::New() const {
  return new Port;
}

void Port::Clear() {
  if (has_range()) {
    if (range_ != NULL) range_->::dos::Range::Clear();
  }
  assigned_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Port::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Port)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.Range range = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_assigned;
        break;
      }

      // repeated uint32 assigned = 2;
      case 2: {
        if (tag == 16) {
         parse_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_assigned())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_assigned())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_assigned;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Port)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Port)
  return false;
#undef DO_
}

void Port::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Port)
  // optional .dos.Range range = 1;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->range(), output);
  }

  // repeated uint32 assigned = 2;
  for (int i = 0; i < this->assigned_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->assigned(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Port)
}

::google::protobuf::uint8* Port::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Port)
  // optional .dos.Range range = 1;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->range(), target);
  }

  // repeated uint32 assigned = 2;
  for (int i = 0; i < this->assigned_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->assigned(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Port)
  return target;
}

int Port::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.Range range = 1;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

  }
  // repeated uint32 assigned = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->assigned_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->assigned(i));
    }
    total_size += 1 * this->assigned_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Port::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Port* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Port*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Port::MergeFrom(const Port& from) {
  GOOGLE_CHECK_NE(&from, this);
  assigned_.MergeFrom(from.assigned_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range()) {
      mutable_range()->::dos::Range::MergeFrom(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Port::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Port::CopyFrom(const Port& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Port::IsInitialized() const {

  return true;
}

void Port::Swap(Port* other) {
  if (other != this) {
    std::swap(range_, other->range_);
    assigned_.Swap(&other->assigned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Port::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Port_descriptor_;
  metadata.reflection = Port_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Network::kOutBytesPsLimitFieldNumber;
const int Network::kOutBytesPsUsedFieldNumber;
const int Network::kOutBytesPsAssignedFieldNumber;
const int Network::kInBytesPsLimitFieldNumber;
const int Network::kInBytesPsUsedFieldNumber;
const int Network::kInBytesPsAssignedFieldNumber;
#endif  // !_MSC_VER

Network::Network()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Network)
}

void Network::InitAsDefaultInstance() {
}

Network::Network(const Network& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Network)
}

void Network::SharedCtor() {
  _cached_size_ = 0;
  out_bytes_ps_limit_ = 0u;
  out_bytes_ps_used_ = 0u;
  out_bytes_ps_assigned_ = 0u;
  in_bytes_ps_limit_ = 0u;
  in_bytes_ps_used_ = 0u;
  in_bytes_ps_assigned_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Network::~Network() {
  // @@protoc_insertion_point(destructor:dos.Network)
  SharedDtor();
}

void Network::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Network::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Network::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Network_descriptor_;
}

const Network& Network::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Network* Network::default_instance_ = NULL;

Network* Network::New() const {
  return new Network;
}

void Network::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Network*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(out_bytes_ps_limit_, in_bytes_ps_assigned_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Network::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Network)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 out_bytes_ps_limit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_ps_limit_)));
          set_has_out_bytes_ps_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_out_bytes_ps_used;
        break;
      }

      // optional uint32 out_bytes_ps_used = 2;
      case 2: {
        if (tag == 16) {
         parse_out_bytes_ps_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_ps_used_)));
          set_has_out_bytes_ps_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_out_bytes_ps_assigned;
        break;
      }

      // optional uint32 out_bytes_ps_assigned = 3;
      case 3: {
        if (tag == 24) {
         parse_out_bytes_ps_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_ps_assigned_)));
          set_has_out_bytes_ps_assigned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_in_bytes_ps_limit;
        break;
      }

      // optional uint32 in_bytes_ps_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_in_bytes_ps_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_ps_limit_)));
          set_has_in_bytes_ps_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_in_bytes_ps_used;
        break;
      }

      // optional uint32 in_bytes_ps_used = 5;
      case 5: {
        if (tag == 40) {
         parse_in_bytes_ps_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_ps_used_)));
          set_has_in_bytes_ps_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_in_bytes_ps_assigned;
        break;
      }

      // optional uint32 in_bytes_ps_assigned = 6;
      case 6: {
        if (tag == 48) {
         parse_in_bytes_ps_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_ps_assigned_)));
          set_has_in_bytes_ps_assigned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Network)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Network)
  return false;
#undef DO_
}

void Network::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Network)
  // optional uint32 out_bytes_ps_limit = 1;
  if (has_out_bytes_ps_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->out_bytes_ps_limit(), output);
  }

  // optional uint32 out_bytes_ps_used = 2;
  if (has_out_bytes_ps_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_bytes_ps_used(), output);
  }

  // optional uint32 out_bytes_ps_assigned = 3;
  if (has_out_bytes_ps_assigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->out_bytes_ps_assigned(), output);
  }

  // optional uint32 in_bytes_ps_limit = 4;
  if (has_in_bytes_ps_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_bytes_ps_limit(), output);
  }

  // optional uint32 in_bytes_ps_used = 5;
  if (has_in_bytes_ps_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->in_bytes_ps_used(), output);
  }

  // optional uint32 in_bytes_ps_assigned = 6;
  if (has_in_bytes_ps_assigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->in_bytes_ps_assigned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Network)
}

::google::protobuf::uint8* Network::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Network)
  // optional uint32 out_bytes_ps_limit = 1;
  if (has_out_bytes_ps_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->out_bytes_ps_limit(), target);
  }

  // optional uint32 out_bytes_ps_used = 2;
  if (has_out_bytes_ps_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_bytes_ps_used(), target);
  }

  // optional uint32 out_bytes_ps_assigned = 3;
  if (has_out_bytes_ps_assigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->out_bytes_ps_assigned(), target);
  }

  // optional uint32 in_bytes_ps_limit = 4;
  if (has_in_bytes_ps_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_bytes_ps_limit(), target);
  }

  // optional uint32 in_bytes_ps_used = 5;
  if (has_in_bytes_ps_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->in_bytes_ps_used(), target);
  }

  // optional uint32 in_bytes_ps_assigned = 6;
  if (has_in_bytes_ps_assigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->in_bytes_ps_assigned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Network)
  return target;
}

int Network::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 out_bytes_ps_limit = 1;
    if (has_out_bytes_ps_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_ps_limit());
    }

    // optional uint32 out_bytes_ps_used = 2;
    if (has_out_bytes_ps_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_ps_used());
    }

    // optional uint32 out_bytes_ps_assigned = 3;
    if (has_out_bytes_ps_assigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_ps_assigned());
    }

    // optional uint32 in_bytes_ps_limit = 4;
    if (has_in_bytes_ps_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_ps_limit());
    }

    // optional uint32 in_bytes_ps_used = 5;
    if (has_in_bytes_ps_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_ps_used());
    }

    // optional uint32 in_bytes_ps_assigned = 6;
    if (has_in_bytes_ps_assigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_ps_assigned());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Network::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Network* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Network*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Network::MergeFrom(const Network& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_out_bytes_ps_limit()) {
      set_out_bytes_ps_limit(from.out_bytes_ps_limit());
    }
    if (from.has_out_bytes_ps_used()) {
      set_out_bytes_ps_used(from.out_bytes_ps_used());
    }
    if (from.has_out_bytes_ps_assigned()) {
      set_out_bytes_ps_assigned(from.out_bytes_ps_assigned());
    }
    if (from.has_in_bytes_ps_limit()) {
      set_in_bytes_ps_limit(from.in_bytes_ps_limit());
    }
    if (from.has_in_bytes_ps_used()) {
      set_in_bytes_ps_used(from.in_bytes_ps_used());
    }
    if (from.has_in_bytes_ps_assigned()) {
      set_in_bytes_ps_assigned(from.in_bytes_ps_assigned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Network::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Network::CopyFrom(const Network& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Network::IsInitialized() const {

  return true;
}

void Network::Swap(Network* other) {
  if (other != this) {
    std::swap(out_bytes_ps_limit_, other->out_bytes_ps_limit_);
    std::swap(out_bytes_ps_used_, other->out_bytes_ps_used_);
    std::swap(out_bytes_ps_assigned_, other->out_bytes_ps_assigned_);
    std::swap(in_bytes_ps_limit_, other->in_bytes_ps_limit_);
    std::swap(in_bytes_ps_used_, other->in_bytes_ps_used_);
    std::swap(in_bytes_ps_assigned_, other->in_bytes_ps_assigned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Network::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Network_descriptor_;
  metadata.reflection = Network_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiskIO::kReadBytesPsLimitFieldNumber;
const int DiskIO::kReadBytesPsUsedFieldNumber;
const int DiskIO::kReadBytesPsAssignedFieldNumber;
const int DiskIO::kWriteBytesPsLimitFieldNumber;
const int DiskIO::kWriteBytesPsUsedFieldNumber;
const int DiskIO::kWriteBytesPsAssignedFieldNumber;
const int DiskIO::kDeviceFieldNumber;
#endif  // !_MSC_VER

DiskIO::DiskIO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.DiskIO)
}

void DiskIO::InitAsDefaultInstance() {
}

DiskIO::DiskIO(const DiskIO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.DiskIO)
}

void DiskIO::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  read_bytes_ps_limit_ = 0u;
  read_bytes_ps_used_ = 0u;
  read_bytes_ps_assigned_ = 0u;
  write_bytes_ps_limit_ = 0u;
  write_bytes_ps_used_ = 0u;
  write_bytes_ps_assigned_ = 0u;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiskIO::~DiskIO() {
  // @@protoc_insertion_point(destructor:dos.DiskIO)
  SharedDtor();
}

void DiskIO::SharedDtor() {
  if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void DiskIO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiskIO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiskIO_descriptor_;
}

const DiskIO& DiskIO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

DiskIO* DiskIO::default_instance_ = NULL;

DiskIO* DiskIO::New() const {
  return new DiskIO;
}

void DiskIO::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DiskIO*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(read_bytes_ps_limit_, write_bytes_ps_assigned_);
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        device_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiskIO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.DiskIO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 read_bytes_ps_limit = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_bytes_ps_limit_)));
          set_has_read_bytes_ps_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_read_bytes_ps_used;
        break;
      }

      // optional uint32 read_bytes_ps_used = 2;
      case 2: {
        if (tag == 16) {
         parse_read_bytes_ps_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_bytes_ps_used_)));
          set_has_read_bytes_ps_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_read_bytes_ps_assigned;
        break;
      }

      // optional uint32 read_bytes_ps_assigned = 3;
      case 3: {
        if (tag == 24) {
         parse_read_bytes_ps_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_bytes_ps_assigned_)));
          set_has_read_bytes_ps_assigned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_write_bytes_ps_limit;
        break;
      }

      // optional uint32 write_bytes_ps_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_write_bytes_ps_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &write_bytes_ps_limit_)));
          set_has_write_bytes_ps_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_write_bytes_ps_used;
        break;
      }

      // optional uint32 write_bytes_ps_used = 5;
      case 5: {
        if (tag == 40) {
         parse_write_bytes_ps_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &write_bytes_ps_used_)));
          set_has_write_bytes_ps_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_write_bytes_ps_assigned;
        break;
      }

      // optional uint32 write_bytes_ps_assigned = 6;
      case 6: {
        if (tag == 48) {
         parse_write_bytes_ps_assigned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &write_bytes_ps_assigned_)));
          set_has_write_bytes_ps_assigned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_device;
        break;
      }

      // optional string device = 7;
      case 7: {
        if (tag == 58) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.DiskIO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.DiskIO)
  return false;
#undef DO_
}

void DiskIO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.DiskIO)
  // optional uint32 read_bytes_ps_limit = 1;
  if (has_read_bytes_ps_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->read_bytes_ps_limit(), output);
  }

  // optional uint32 read_bytes_ps_used = 2;
  if (has_read_bytes_ps_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->read_bytes_ps_used(), output);
  }

  // optional uint32 read_bytes_ps_assigned = 3;
  if (has_read_bytes_ps_assigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->read_bytes_ps_assigned(), output);
  }

  // optional uint32 write_bytes_ps_limit = 4;
  if (has_write_bytes_ps_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->write_bytes_ps_limit(), output);
  }

  // optional uint32 write_bytes_ps_used = 5;
  if (has_write_bytes_ps_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->write_bytes_ps_used(), output);
  }

  // optional uint32 write_bytes_ps_assigned = 6;
  if (has_write_bytes_ps_assigned()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->write_bytes_ps_assigned(), output);
  }

  // optional string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.DiskIO)
}

::google::protobuf::uint8* DiskIO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.DiskIO)
  // optional uint32 read_bytes_ps_limit = 1;
  if (has_read_bytes_ps_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->read_bytes_ps_limit(), target);
  }

  // optional uint32 read_bytes_ps_used = 2;
  if (has_read_bytes_ps_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->read_bytes_ps_used(), target);
  }

  // optional uint32 read_bytes_ps_assigned = 3;
  if (has_read_bytes_ps_assigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->read_bytes_ps_assigned(), target);
  }

  // optional uint32 write_bytes_ps_limit = 4;
  if (has_write_bytes_ps_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->write_bytes_ps_limit(), target);
  }

  // optional uint32 write_bytes_ps_used = 5;
  if (has_write_bytes_ps_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->write_bytes_ps_used(), target);
  }

  // optional uint32 write_bytes_ps_assigned = 6;
  if (has_write_bytes_ps_assigned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->write_bytes_ps_assigned(), target);
  }

  // optional string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.DiskIO)
  return target;
}

int DiskIO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 read_bytes_ps_limit = 1;
    if (has_read_bytes_ps_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->read_bytes_ps_limit());
    }

    // optional uint32 read_bytes_ps_used = 2;
    if (has_read_bytes_ps_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->read_bytes_ps_used());
    }

    // optional uint32 read_bytes_ps_assigned = 3;
    if (has_read_bytes_ps_assigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->read_bytes_ps_assigned());
    }

    // optional uint32 write_bytes_ps_limit = 4;
    if (has_write_bytes_ps_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->write_bytes_ps_limit());
    }

    // optional uint32 write_bytes_ps_used = 5;
    if (has_write_bytes_ps_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->write_bytes_ps_used());
    }

    // optional uint32 write_bytes_ps_assigned = 6;
    if (has_write_bytes_ps_assigned()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->write_bytes_ps_assigned());
    }

    // optional string device = 7;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiskIO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiskIO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiskIO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiskIO::MergeFrom(const DiskIO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_read_bytes_ps_limit()) {
      set_read_bytes_ps_limit(from.read_bytes_ps_limit());
    }
    if (from.has_read_bytes_ps_used()) {
      set_read_bytes_ps_used(from.read_bytes_ps_used());
    }
    if (from.has_read_bytes_ps_assigned()) {
      set_read_bytes_ps_assigned(from.read_bytes_ps_assigned());
    }
    if (from.has_write_bytes_ps_limit()) {
      set_write_bytes_ps_limit(from.write_bytes_ps_limit());
    }
    if (from.has_write_bytes_ps_used()) {
      set_write_bytes_ps_used(from.write_bytes_ps_used());
    }
    if (from.has_write_bytes_ps_assigned()) {
      set_write_bytes_ps_assigned(from.write_bytes_ps_assigned());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiskIO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskIO::CopyFrom(const DiskIO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskIO::IsInitialized() const {

  return true;
}

void DiskIO::Swap(DiskIO* other) {
  if (other != this) {
    std::swap(read_bytes_ps_limit_, other->read_bytes_ps_limit_);
    std::swap(read_bytes_ps_used_, other->read_bytes_ps_used_);
    std::swap(read_bytes_ps_assigned_, other->read_bytes_ps_assigned_);
    std::swap(write_bytes_ps_limit_, other->write_bytes_ps_limit_);
    std::swap(write_bytes_ps_used_, other->write_bytes_ps_used_);
    std::swap(write_bytes_ps_assigned_, other->write_bytes_ps_assigned_);
    std::swap(device_, other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiskIO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiskIO_descriptor_;
  metadata.reflection = DiskIO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Resource::kCpuFieldNumber;
const int Resource::kMemoryFieldNumber;
const int Resource::kPortFieldNumber;
const int Resource::kNetworkFieldNumber;
const int Resource::kDiskioFieldNumber;
const int Resource::kGtimeFieldNumber;
#endif  // !_MSC_VER

Resource::Resource()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Resource)
}

void Resource::InitAsDefaultInstance() {
  cpu_ = const_cast< ::dos::Cpu*>(&::dos::Cpu::default_instance());
  memory_ = const_cast< ::dos::Memory*>(&::dos::Memory::default_instance());
  port_ = const_cast< ::dos::Port*>(&::dos::Port::default_instance());
  network_ = const_cast< ::dos::Network*>(&::dos::Network::default_instance());
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Resource)
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
  cpu_ = NULL;
  memory_ = NULL;
  port_ = NULL;
  network_ = NULL;
  gtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:dos.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
  if (this != default_instance_) {
    delete cpu_;
    delete memory_;
    delete port_;
    delete network_;
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}

const Resource& Resource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New() const {
  return new Resource;
}

void Resource::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    if (has_cpu()) {
      if (cpu_ != NULL) cpu_->::dos::Cpu::Clear();
    }
    if (has_memory()) {
      if (memory_ != NULL) memory_->::dos::Memory::Clear();
    }
    if (has_port()) {
      if (port_ != NULL) port_->::dos::Port::Clear();
    }
    if (has_network()) {
      if (network_ != NULL) network_->::dos::Network::Clear();
    }
    gtime_ = GOOGLE_ULONGLONG(0);
  }
  diskio_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Resource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.Cpu cpu = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cpu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_memory;
        break;
      }

      // optional .dos.Memory memory = 2;
      case 2: {
        if (tag == 18) {
         parse_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_port;
        break;
      }

      // optional .dos.Port port = 3;
      case 3: {
        if (tag == 26) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_port()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_network;
        break;
      }

      // optional .dos.Network network = 4;
      case 4: {
        if (tag == 34) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_diskio;
        break;
      }

      // repeated .dos.DiskIO diskio = 5;
      case 5: {
        if (tag == 42) {
         parse_diskio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_diskio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_diskio;
        if (input->ExpectTag(48)) goto parse_gtime;
        break;
      }

      // optional uint64 gtime = 6;
      case 6: {
        if (tag == 48) {
         parse_gtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gtime_)));
          set_has_gtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Resource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Resource)
  return false;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Resource)
  // optional .dos.Cpu cpu = 1;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cpu(), output);
  }

  // optional .dos.Memory memory = 2;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memory(), output);
  }

  // optional .dos.Port port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->port(), output);
  }

  // optional .dos.Network network = 4;
  if (has_network()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->network(), output);
  }

  // repeated .dos.DiskIO diskio = 5;
  for (int i = 0; i < this->diskio_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->diskio(i), output);
  }

  // optional uint64 gtime = 6;
  if (has_gtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Resource)
}

::google::protobuf::uint8* Resource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Resource)
  // optional .dos.Cpu cpu = 1;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cpu(), target);
  }

  // optional .dos.Memory memory = 2;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memory(), target);
  }

  // optional .dos.Port port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->port(), target);
  }

  // optional .dos.Network network = 4;
  if (has_network()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->network(), target);
  }

  // repeated .dos.DiskIO diskio = 5;
  for (int i = 0; i < this->diskio_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->diskio(i), target);
  }

  // optional uint64 gtime = 6;
  if (has_gtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Resource)
  return target;
}

int Resource::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.Cpu cpu = 1;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cpu());
    }

    // optional .dos.Memory memory = 2;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memory());
    }

    // optional .dos.Port port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->port());
    }

    // optional .dos.Network network = 4;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->network());
    }

    // optional uint64 gtime = 6;
    if (has_gtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gtime());
    }

  }
  // repeated .dos.DiskIO diskio = 5;
  total_size += 1 * this->diskio_size();
  for (int i = 0; i < this->diskio_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->diskio(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Resource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Resource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
  GOOGLE_CHECK_NE(&from, this);
  diskio_.MergeFrom(from.diskio_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu()) {
      mutable_cpu()->::dos::Cpu::MergeFrom(from.cpu());
    }
    if (from.has_memory()) {
      mutable_memory()->::dos::Memory::MergeFrom(from.memory());
    }
    if (from.has_port()) {
      mutable_port()->::dos::Port::MergeFrom(from.port());
    }
    if (from.has_network()) {
      mutable_network()->::dos::Network::MergeFrom(from.network());
    }
    if (from.has_gtime()) {
      set_gtime(from.gtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {

  return true;
}

void Resource::Swap(Resource* other) {
  if (other != this) {
    std::swap(cpu_, other->cpu_);
    std::swap(memory_, other->memory_);
    std::swap(port_, other->port_);
    std::swap(network_, other->network_);
    diskio_.Swap(&other->diskio_);
    std::swap(gtime_, other->gtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_descriptor_;
  metadata.reflection = Resource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Process::kArgsFieldNumber;
const int Process::kUserFieldNumber;
const int Process::kEnvsFieldNumber;
const int Process::kCwdFieldNumber;
const int Process::kPtyFieldNumber;
const int Process::kRunningFieldNumber;
const int Process::kPidFieldNumber;
const int Process::kGpidFieldNumber;
const int Process::kRtimeFieldNumber;
const int Process::kCoredumpFieldNumber;
const int Process::kExitCodeFieldNumber;
const int Process::kNameFieldNumber;
const int Process::kTerminalFieldNumber;
const int Process::kInterceptorFieldNumber;
const int Process::kHostnameFieldNumber;
#endif  // !_MSC_VER

Process::Process()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Process)
}

void Process::InitAsDefaultInstance() {
  user_ = const_cast< ::dos::User*>(&::dos::User::default_instance());
}

Process::Process(const Process& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Process)
}

void Process::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_ = NULL;
  cwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pty_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  running_ = false;
  pid_ = 0;
  gpid_ = 0;
  rtime_ = GOOGLE_LONGLONG(0);
  coredump_ = false;
  exit_code_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  terminal_ = false;
  interceptor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Process::~Process() {
  // @@protoc_insertion_point(destructor:dos.Process)
  SharedDtor();
}

void Process::SharedDtor() {
  if (cwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cwd_;
  }
  if (pty_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pty_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (interceptor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interceptor_;
  }
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (this != default_instance_) {
    delete user_;
  }
}

void Process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Process::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Process_descriptor_;
}

const Process& Process::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Process* Process::default_instance_ = NULL;

Process* Process::New() const {
  return new Process;
}

void Process::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Process*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 250) {
    ZR_(pid_, gpid_);
    if (has_user()) {
      if (user_ != NULL) user_->::dos::User::Clear();
    }
    if (has_cwd()) {
      if (cwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cwd_->clear();
      }
    }
    if (has_pty()) {
      if (pty_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pty_->clear();
      }
    }
    running_ = false;
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(coredump_, exit_code_);
    rtime_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_interceptor()) {
      if (interceptor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        interceptor_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  args_.Clear();
  envs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Process)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string args = 1;
      case 1: {
        if (tag == 10) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_args;
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional .dos.User user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_envs;
        break;
      }

      // repeated string envs = 3;
      case 3: {
        if (tag == 26) {
         parse_envs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_envs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->envs(this->envs_size() - 1).data(),
            this->envs(this->envs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "envs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_envs;
        if (input->ExpectTag(34)) goto parse_cwd;
        break;
      }

      // optional string cwd = 4;
      case 4: {
        if (tag == 34) {
         parse_cwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cwd().data(), this->cwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pty;
        break;
      }

      // optional string pty = 5;
      case 5: {
        if (tag == 42) {
         parse_pty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pty().data(), this->pty().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pty");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_running;
        break;
      }

      // optional bool running = 6;
      case 6: {
        if (tag == 48) {
         parse_running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
          set_has_running();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_pid;
        break;
      }

      // optional int32 pid = 7;
      case 7: {
        if (tag == 56) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gpid;
        break;
      }

      // optional int32 gpid = 8;
      case 8: {
        if (tag == 64) {
         parse_gpid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpid_)));
          set_has_gpid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_rtime;
        break;
      }

      // optional int64 rtime = 9;
      case 9: {
        if (tag == 72) {
         parse_rtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rtime_)));
          set_has_rtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_coredump;
        break;
      }

      // optional bool coredump = 10;
      case 10: {
        if (tag == 80) {
         parse_coredump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coredump_)));
          set_has_coredump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_exit_code;
        break;
      }

      // optional int32 exit_code = 11;
      case 11: {
        if (tag == 88) {
         parse_exit_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_code_)));
          set_has_exit_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }

      // optional string name = 12;
      case 12: {
        if (tag == 98) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_terminal;
        break;
      }

      // optional bool terminal = 13;
      case 13: {
        if (tag == 104) {
         parse_terminal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terminal_)));
          set_has_terminal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_interceptor;
        break;
      }

      // optional string interceptor = 14;
      case 14: {
        if (tag == 114) {
         parse_interceptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interceptor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interceptor().data(), this->interceptor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "interceptor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_hostname;
        break;
      }

      // optional string hostname = 15;
      case 15: {
        if (tag == 122) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Process)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Process)
  return false;
#undef DO_
}

void Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Process)
  // repeated string args = 1;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->args(i), output);
  }

  // optional .dos.User user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user(), output);
  }

  // repeated string envs = 3;
  for (int i = 0; i < this->envs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->envs(i).data(), this->envs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "envs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->envs(i), output);
  }

  // optional string cwd = 4;
  if (has_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cwd().data(), this->cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cwd(), output);
  }

  // optional string pty = 5;
  if (has_pty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pty().data(), this->pty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pty");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pty(), output);
  }

  // optional bool running = 6;
  if (has_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->running(), output);
  }

  // optional int32 pid = 7;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->pid(), output);
  }

  // optional int32 gpid = 8;
  if (has_gpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gpid(), output);
  }

  // optional int64 rtime = 9;
  if (has_rtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->rtime(), output);
  }

  // optional bool coredump = 10;
  if (has_coredump()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->coredump(), output);
  }

  // optional int32 exit_code = 11;
  if (has_exit_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->exit_code(), output);
  }

  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->name(), output);
  }

  // optional bool terminal = 13;
  if (has_terminal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->terminal(), output);
  }

  // optional string interceptor = 14;
  if (has_interceptor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interceptor().data(), this->interceptor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interceptor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->interceptor(), output);
  }

  // optional string hostname = 15;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->hostname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Process)
}

::google::protobuf::uint8* Process::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Process)
  // repeated string args = 1;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->args(i), target);
  }

  // optional .dos.User user = 2;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user(), target);
  }

  // repeated string envs = 3;
  for (int i = 0; i < this->envs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->envs(i).data(), this->envs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "envs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->envs(i), target);
  }

  // optional string cwd = 4;
  if (has_cwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cwd().data(), this->cwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cwd(), target);
  }

  // optional string pty = 5;
  if (has_pty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pty().data(), this->pty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pty");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pty(), target);
  }

  // optional bool running = 6;
  if (has_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->running(), target);
  }

  // optional int32 pid = 7;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->pid(), target);
  }

  // optional int32 gpid = 8;
  if (has_gpid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gpid(), target);
  }

  // optional int64 rtime = 9;
  if (has_rtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->rtime(), target);
  }

  // optional bool coredump = 10;
  if (has_coredump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->coredump(), target);
  }

  // optional int32 exit_code = 11;
  if (has_exit_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->exit_code(), target);
  }

  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }

  // optional bool terminal = 13;
  if (has_terminal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->terminal(), target);
  }

  // optional string interceptor = 14;
  if (has_interceptor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interceptor().data(), this->interceptor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interceptor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->interceptor(), target);
  }

  // optional string hostname = 15;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->hostname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Process)
  return target;
}

int Process::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .dos.User user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional string cwd = 4;
    if (has_cwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cwd());
    }

    // optional string pty = 5;
    if (has_pty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pty());
    }

    // optional bool running = 6;
    if (has_running()) {
      total_size += 1 + 1;
    }

    // optional int32 pid = 7;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }

    // optional int32 gpid = 8;
    if (has_gpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 rtime = 9;
    if (has_rtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rtime());
    }

    // optional bool coredump = 10;
    if (has_coredump()) {
      total_size += 1 + 1;
    }

    // optional int32 exit_code = 11;
    if (has_exit_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exit_code());
    }

    // optional string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool terminal = 13;
    if (has_terminal()) {
      total_size += 1 + 1;
    }

    // optional string interceptor = 14;
    if (has_interceptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interceptor());
    }

    // optional string hostname = 15;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

  }
  // repeated string args = 1;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  // repeated string envs = 3;
  total_size += 1 * this->envs_size();
  for (int i = 0; i < this->envs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->envs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Process::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Process* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Process*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Process::MergeFrom(const Process& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  envs_.MergeFrom(from.envs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_user()) {
      mutable_user()->::dos::User::MergeFrom(from.user());
    }
    if (from.has_cwd()) {
      set_cwd(from.cwd());
    }
    if (from.has_pty()) {
      set_pty(from.pty());
    }
    if (from.has_running()) {
      set_running(from.running());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_gpid()) {
      set_gpid(from.gpid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rtime()) {
      set_rtime(from.rtime());
    }
    if (from.has_coredump()) {
      set_coredump(from.coredump());
    }
    if (from.has_exit_code()) {
      set_exit_code(from.exit_code());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_terminal()) {
      set_terminal(from.terminal());
    }
    if (from.has_interceptor()) {
      set_interceptor(from.interceptor());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Process::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Process::CopyFrom(const Process& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Process::IsInitialized() const {

  return true;
}

void Process::Swap(Process* other) {
  if (other != this) {
    args_.Swap(&other->args_);
    std::swap(user_, other->user_);
    envs_.Swap(&other->envs_);
    std::swap(cwd_, other->cwd_);
    std::swap(pty_, other->pty_);
    std::swap(running_, other->running_);
    std::swap(pid_, other->pid_);
    std::swap(gpid_, other->gpid_);
    std::swap(rtime_, other->rtime_);
    std::swap(coredump_, other->coredump_);
    std::swap(exit_code_, other->exit_code_);
    std::swap(name_, other->name_);
    std::swap(terminal_, other->terminal_);
    std::swap(interceptor_, other->interceptor_);
    std::swap(hostname_, other->hostname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Process::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Process_descriptor_;
  metadata.reflection = Process_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Platform::kOsFieldNumber;
const int Platform::kArchFieldNumber;
#endif  // !_MSC_VER

Platform::Platform()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Platform)
}

void Platform::InitAsDefaultInstance() {
}

Platform::Platform(const Platform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Platform)
}

void Platform::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  os_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arch_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Platform::~Platform() {
  // @@protoc_insertion_point(destructor:dos.Platform)
  SharedDtor();
}

void Platform::SharedDtor() {
  if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete os_;
  }
  if (arch_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete arch_;
  }
  if (this != default_instance_) {
  }
}

void Platform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Platform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Platform_descriptor_;
}

const Platform& Platform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Platform* Platform::default_instance_ = NULL;

Platform* Platform::New() const {
  return new Platform;
}

void Platform::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_os()) {
      if (os_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        os_->clear();
      }
    }
    if (has_arch()) {
      if (arch_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        arch_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Platform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Platform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string os = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->os().data(), this->os().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "os");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_arch;
        break;
      }

      // optional string arch = 2;
      case 2: {
        if (tag == 18) {
         parse_arch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arch()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arch().data(), this->arch().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "arch");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Platform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Platform)
  return false;
#undef DO_
}

void Platform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Platform)
  // optional string os = 1;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->os(), output);
  }

  // optional string arch = 2;
  if (has_arch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arch().data(), this->arch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->arch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Platform)
}

::google::protobuf::uint8* Platform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Platform)
  // optional string os = 1;
  if (has_os()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->os().data(), this->os().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "os");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->os(), target);
  }

  // optional string arch = 2;
  if (has_arch()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arch().data(), this->arch().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arch");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->arch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Platform)
  return target;
}

int Platform::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string os = 1;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os());
    }

    // optional string arch = 2;
    if (has_arch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->arch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Platform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Platform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Platform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Platform::MergeFrom(const Platform& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_arch()) {
      set_arch(from.arch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Platform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Platform::CopyFrom(const Platform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Platform::IsInitialized() const {

  return true;
}

void Platform::Swap(Platform* other) {
  if (other != this) {
    std::swap(os_, other->os_);
    std::swap(arch_, other->arch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Platform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Platform_descriptor_;
  metadata.reflection = Platform_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Root::kPathFieldNumber;
const int Root::kReadonlyFieldNumber;
#endif  // !_MSC_VER

Root::Root()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Root)
}

void Root::InitAsDefaultInstance() {
}

Root::Root(const Root& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Root)
}

void Root::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readonly_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Root::~Root() {
  // @@protoc_insertion_point(destructor:dos.Root)
  SharedDtor();
}

void Root::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void Root::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Root::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Root_descriptor_;
}

const Root& Root::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Root* Root::default_instance_ = NULL;

Root* Root::New() const {
  return new Root;
}

void Root::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    readonly_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Root::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Root)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_readonly;
        break;
      }

      // optional bool readonly = 2;
      case 2: {
        if (tag == 16) {
         parse_readonly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readonly_)));
          set_has_readonly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Root)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Root)
  return false;
#undef DO_
}

void Root::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Root)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional bool readonly = 2;
  if (has_readonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->readonly(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Root)
}

::google::protobuf::uint8* Root::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Root)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional bool readonly = 2;
  if (has_readonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->readonly(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Root)
  return target;
}

int Root::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional bool readonly = 2;
    if (has_readonly()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Root::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Root* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Root*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Root::MergeFrom(const Root& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_readonly()) {
      set_readonly(from.readonly());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Root::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Root::CopyFrom(const Root& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Root::IsInitialized() const {

  return true;
}

void Root::Swap(Root* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(readonly_, other->readonly_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Root::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Root_descriptor_;
  metadata.reflection = Root_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mount::kNameFieldNumber;
const int Mount::kPathFieldNumber;
const int Mount::kTypeFieldNumber;
const int Mount::kSourceFieldNumber;
const int Mount::kDestinationFieldNumber;
const int Mount::kOptionsFieldNumber;
#endif  // !_MSC_VER

Mount::Mount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Mount)
}

void Mount::InitAsDefaultInstance() {
}

Mount::Mount(const Mount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Mount)
}

void Mount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mount::~Mount() {
  // @@protoc_insertion_point(destructor:dos.Mount)
  SharedDtor();
}

void Mount::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete source_;
  }
  if (destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete destination_;
  }
  if (this != default_instance_) {
  }
}

void Mount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mount_descriptor_;
}

const Mount& Mount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Mount* Mount::default_instance_ = NULL;

Mount* Mount::New() const {
  return new Mount;
}

void Mount::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        source_->clear();
      }
    }
    if (has_destination()) {
      if (destination_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        destination_->clear();
      }
    }
  }
  options_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Mount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // optional string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_source;
        break;
      }

      // optional string source = 5;
      case 5: {
        if (tag == 42) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "source");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_destination;
        break;
      }

      // optional string destination = 6;
      case 6: {
        if (tag == 50) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->destination().data(), this->destination().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "destination");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_options;
        break;
      }

      // repeated string options = 7;
      case 7: {
        if (tag == 58) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_options()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->options(this->options_size() - 1).data(),
            this->options(this->options_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "options");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_options;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Mount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Mount)
  return false;
#undef DO_
}

void Mount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Mount)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional string source = 5;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source(), output);
  }

  // optional string destination = 6;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destination");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->destination(), output);
  }

  // repeated string options = 7;
  for (int i = 0; i < this->options_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->options(i).data(), this->options(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "options");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->options(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Mount)
}

::google::protobuf::uint8* Mount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Mount)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional string source = 5;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source(), target);
  }

  // optional string destination = 6;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->destination().data(), this->destination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "destination");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->destination(), target);
  }

  // repeated string options = 7;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->options(i).data(), this->options(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "options");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->options(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Mount)
  return target;
}

int Mount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string source = 5;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string destination = 6;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destination());
    }

  }
  // repeated string options = 7;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->options(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mount::MergeFrom(const Mount& from) {
  GOOGLE_CHECK_NE(&from, this);
  options_.MergeFrom(from.options_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_destination()) {
      set_destination(from.destination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mount::CopyFrom(const Mount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mount::IsInitialized() const {

  return true;
}

void Mount::Swap(Mount* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(path_, other->path_);
    std::swap(type_, other->type_);
    std::swap(source_, other->source_);
    std::swap(destination_, other->destination_);
    options_.Swap(&other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mount_descriptor_;
  metadata.reflection = Mount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Device::kPathFieldNumber;
const int Device::kTypeFieldNumber;
const int Device::kMajorFieldNumber;
const int Device::kMinorFieldNumber;
const int Device::kPermissionsFieldNumber;
const int Device::kModeFieldNumber;
const int Device::kUidFieldNumber;
const int Device::kGidFieldNumber;
#endif  // !_MSC_VER

Device::Device()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Device)
}

void Device::InitAsDefaultInstance() {
}

Device::Device(const Device& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Device)
}

void Device::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  major_ = 0;
  minor_ = 0;
  permissions_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  uid_ = 0;
  gid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:dos.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (permissions_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete permissions_;
  }
  if (this != default_instance_) {
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New() const {
  return new Device;
}

void Device::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Device*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, major_);
    ZR_(minor_, gid_);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_permissions()) {
      if (permissions_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        permissions_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_major;
        break;
      }

      // optional int32 major = 3;
      case 3: {
        if (tag == 24) {
         parse_major:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_minor;
        break;
      }

      // optional int32 minor = 4;
      case 4: {
        if (tag == 32) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_permissions;
        break;
      }

      // optional string permissions = 5;
      case 5: {
        if (tag == 42) {
         parse_permissions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_permissions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->permissions().data(), this->permissions().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "permissions");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mode;
        break;
      }

      // optional int32 mode = 6;
      case 6: {
        if (tag == 48) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_uid;
        break;
      }

      // optional int32 uid = 7;
      case 7: {
        if (tag == 56) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gid;
        break;
      }

      // optional int32 gid = 8;
      case 8: {
        if (tag == 64) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Device)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 major = 3;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->major(), output);
  }

  // optional int32 minor = 4;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minor(), output);
  }

  // optional string permissions = 5;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->permissions().data(), this->permissions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "permissions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->permissions(), output);
  }

  // optional int32 mode = 6;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mode(), output);
  }

  // optional int32 uid = 7;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->uid(), output);
  }

  // optional int32 gid = 8;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Device)
}

::google::protobuf::uint8* Device::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Device)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 major = 3;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->major(), target);
  }

  // optional int32 minor = 4;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minor(), target);
  }

  // optional string permissions = 5;
  if (has_permissions()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->permissions().data(), this->permissions().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "permissions");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->permissions(), target);
  }

  // optional int32 mode = 6;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mode(), target);
  }

  // optional int32 uid = 7;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->uid(), target);
  }

  // optional int32 gid = 8;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Device)
  return target;
}

int Device::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 major = 3;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major());
    }

    // optional int32 minor = 4;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor());
    }

    // optional string permissions = 5;
    if (has_permissions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->permissions());
    }

    // optional int32 mode = 6;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional int32 uid = 7;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 gid = 8;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Device* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Device*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_permissions()) {
      set_permissions(from.permissions());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {

  return true;
}

void Device::Swap(Device* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(type_, other->type_);
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(permissions_, other->permissions_);
    std::swap(mode_, other->mode_);
    std::swap(uid_, other->uid_);
    std::swap(gid_, other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeMeta::kIpFieldNumber;
const int NodeMeta::kHostnameFieldNumber;
const int NodeMeta::kEndpointFieldNumber;
const int NodeMeta::kResourceFieldNumber;
#endif  // !_MSC_VER

NodeMeta::NodeMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.NodeMeta)
}

void NodeMeta::InitAsDefaultInstance() {
  resource_ = const_cast< ::dos::Resource*>(&::dos::Resource::default_instance());
}

NodeMeta::NodeMeta(const NodeMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.NodeMeta)
}

void NodeMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeMeta::~NodeMeta() {
  // @@protoc_insertion_point(destructor:dos.NodeMeta)
  SharedDtor();
}

void NodeMeta::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hostname_;
  }
  if (endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endpoint_;
  }
  if (this != default_instance_) {
    delete resource_;
  }
}

void NodeMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeMeta_descriptor_;
}

const NodeMeta& NodeMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

NodeMeta* NodeMeta::default_instance_ = NULL;

NodeMeta* NodeMeta::New() const {
  return new NodeMeta;
}

void NodeMeta::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hostname_->clear();
      }
    }
    if (has_endpoint()) {
      if (endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endpoint_->clear();
      }
    }
    if (has_resource()) {
      if (resource_ != NULL) resource_->::dos::Resource::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.NodeMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (tag == 18) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_endpoint;
        break;
      }

      // optional string endpoint = 3;
      case 3: {
        if (tag == 26) {
         parse_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endpoint().data(), this->endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_resource;
        break;
      }

      // optional .dos.Resource resource = 4;
      case 4: {
        if (tag == 34) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.NodeMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.NodeMeta)
  return false;
#undef DO_
}

void NodeMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.NodeMeta)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // optional string endpoint = 3;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->endpoint(), output);
  }

  // optional .dos.Resource resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.NodeMeta)
}

::google::protobuf::uint8* NodeMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.NodeMeta)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional string hostname = 2;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional string endpoint = 3;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->endpoint(), target);
  }

  // optional .dos.Resource resource = 4;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.NodeMeta)
  return target;
}

int NodeMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string hostname = 2;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }

    // optional string endpoint = 3;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endpoint());
    }

    // optional .dos.Resource resource = 4;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeMeta::MergeFrom(const NodeMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_endpoint()) {
      set_endpoint(from.endpoint());
    }
    if (from.has_resource()) {
      mutable_resource()->::dos::Resource::MergeFrom(from.resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMeta::CopyFrom(const NodeMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMeta::IsInitialized() const {

  return true;
}

void NodeMeta::Swap(NodeMeta* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(hostname_, other->hostname_);
    std::swap(endpoint_, other->endpoint_);
    std::swap(resource_, other->resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeMeta_descriptor_;
  metadata.reflection = NodeMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Container::kRequirementFieldNumber;
const int Container::kImageFieldNumber;
const int Container::kTagFieldNumber;
const int Container::kUriFieldNumber;
const int Container::kTypeFieldNumber;
const int Container::kEnableNsFieldNumber;
const int Container::kReserveTimeFieldNumber;
const int Container::kRestartStrategyFieldNumber;
#endif  // !_MSC_VER

Container::Container()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.Container)
}

void Container::InitAsDefaultInstance() {
  requirement_ = const_cast< ::dos::Resource*>(&::dos::Resource::default_instance());
}

Container::Container(const Container& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.Container)
}

void Container::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  requirement_ = NULL;
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  enable_ns_ = false;
  reserve_time_ = 0;
  restart_strategy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:dos.Container)
  SharedDtor();
}

void Container::SharedDtor() {
  if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_;
  }
  if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tag_;
  }
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (this != default_instance_) {
    delete requirement_;
  }
}

void Container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Container_descriptor_;
}

const Container& Container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

Container* Container::default_instance_ = NULL;

Container* Container::New() const {
  return new Container;
}

void Container::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Container*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, restart_strategy_);
    if (has_requirement()) {
      if (requirement_ != NULL) requirement_->::dos::Resource::Clear();
    }
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tag_->clear();
      }
    }
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.Container)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.Resource requirement = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_requirement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_image;
        break;
      }

      // optional string image = 2;
      case 2: {
        if (tag == 18) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (tag == 26) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tag");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uri;
        break;
      }

      // optional string uri = 4;
      case 4: {
        if (tag == 34) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .dos.ContainerType type = 5;
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::ContainerType_IsValid(value)) {
            set_type(static_cast< ::dos::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_enable_ns;
        break;
      }

      // optional bool enable_ns = 6;
      case 6: {
        if (tag == 48) {
         parse_enable_ns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_ns_)));
          set_has_enable_ns();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reserve_time;
        break;
      }

      // optional int32 reserve_time = 7;
      case 7: {
        if (tag == 56) {
         parse_reserve_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve_time_)));
          set_has_reserve_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_restart_strategy;
        break;
      }

      // optional .dos.RestartStrategy restart_strategy = 8;
      case 8: {
        if (tag == 64) {
         parse_restart_strategy:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RestartStrategy_IsValid(value)) {
            set_restart_strategy(static_cast< ::dos::RestartStrategy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.Container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.Container)
  return false;
#undef DO_
}

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.Container)
  // optional .dos.Resource requirement = 1;
  if (has_requirement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->requirement(), output);
  }

  // optional string image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->image(), output);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // optional .dos.ContainerType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional bool enable_ns = 6;
  if (has_enable_ns()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->enable_ns(), output);
  }

  // optional int32 reserve_time = 7;
  if (has_reserve_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reserve_time(), output);
  }

  // optional .dos.RestartStrategy restart_strategy = 8;
  if (has_restart_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->restart_strategy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.Container)
}

::google::protobuf::uint8* Container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.Container)
  // optional .dos.Resource requirement = 1;
  if (has_requirement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->requirement(), target);
  }

  // optional string image = 2;
  if (has_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->image(), target);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // optional .dos.ContainerType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional bool enable_ns = 6;
  if (has_enable_ns()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->enable_ns(), target);
  }

  // optional int32 reserve_time = 7;
  if (has_reserve_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reserve_time(), target);
  }

  // optional .dos.RestartStrategy restart_strategy = 8;
  if (has_restart_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->restart_strategy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.Container)
  return target;
}

int Container::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.Resource requirement = 1;
    if (has_requirement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->requirement());
    }

    // optional string image = 2;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string uri = 4;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional .dos.ContainerType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool enable_ns = 6;
    if (has_enable_ns()) {
      total_size += 1 + 1;
    }

    // optional int32 reserve_time = 7;
    if (has_reserve_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve_time());
    }

    // optional .dos.RestartStrategy restart_strategy = 8;
    if (has_restart_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->restart_strategy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Container* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Container*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_requirement()) {
      mutable_requirement()->::dos::Resource::MergeFrom(from.requirement());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_enable_ns()) {
      set_enable_ns(from.enable_ns());
    }
    if (from.has_reserve_time()) {
      set_reserve_time(from.reserve_time());
    }
    if (from.has_restart_strategy()) {
      set_restart_strategy(from.restart_strategy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {

  return true;
}

void Container::Swap(Container* other) {
  if (other != this) {
    std::swap(requirement_, other->requirement_);
    std::swap(image_, other->image_);
    std::swap(tag_, other->tag_);
    std::swap(uri_, other->uri_);
    std::swap(type_, other->type_);
    std::swap(enable_ns_, other->enable_ns_);
    std::swap(reserve_time_, other->reserve_time_);
    std::swap(restart_strategy_, other->restart_strategy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Container_descriptor_;
  metadata.reflection = Container_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PodSpec::kContainersFieldNumber;
const int PodSpec::kLogSizeFieldNumber;
const int PodSpec::kTypeFieldNumber;
#endif  // !_MSC_VER

PodSpec::PodSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.PodSpec)
}

void PodSpec::InitAsDefaultInstance() {
}

PodSpec::PodSpec(const PodSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.PodSpec)
}

void PodSpec::SharedCtor() {
  _cached_size_ = 0;
  log_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PodSpec::~PodSpec() {
  // @@protoc_insertion_point(destructor:dos.PodSpec)
  SharedDtor();
}

void PodSpec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PodSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PodSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PodSpec_descriptor_;
}

const PodSpec& PodSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

PodSpec* PodSpec::default_instance_ = NULL;

PodSpec* PodSpec::New() const {
  return new PodSpec;
}

void PodSpec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PodSpec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(log_size_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  containers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PodSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.PodSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dos.Container containers = 1;
      case 1: {
        if (tag == 10) {
         parse_containers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_containers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_containers;
        if (input->ExpectTag(16)) goto parse_log_size;
        break;
      }

      // optional int32 log_size = 2;
      case 2: {
        if (tag == 16) {
         parse_log_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_size_)));
          set_has_log_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .dos.PodType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::PodType_IsValid(value)) {
            set_type(static_cast< ::dos::PodType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.PodSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.PodSpec)
  return false;
#undef DO_
}

void PodSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.PodSpec)
  // repeated .dos.Container containers = 1;
  for (int i = 0; i < this->containers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->containers(i), output);
  }

  // optional int32 log_size = 2;
  if (has_log_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->log_size(), output);
  }

  // optional .dos.PodType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.PodSpec)
}

::google::protobuf::uint8* PodSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.PodSpec)
  // repeated .dos.Container containers = 1;
  for (int i = 0; i < this->containers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->containers(i), target);
  }

  // optional int32 log_size = 2;
  if (has_log_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->log_size(), target);
  }

  // optional .dos.PodType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.PodSpec)
  return target;
}

int PodSpec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 log_size = 2;
    if (has_log_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->log_size());
    }

    // optional .dos.PodType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .dos.Container containers = 1;
  total_size += 1 * this->containers_size();
  for (int i = 0; i < this->containers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->containers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PodSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PodSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PodSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PodSpec::MergeFrom(const PodSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  containers_.MergeFrom(from.containers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_log_size()) {
      set_log_size(from.log_size());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PodSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodSpec::CopyFrom(const PodSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodSpec::IsInitialized() const {

  return true;
}

void PodSpec::Swap(PodSpec* other) {
  if (other != this) {
    containers_.Swap(&other->containers_);
    std::swap(log_size_, other->log_size_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PodSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PodSpec_descriptor_;
  metadata.reflection = PodSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobSpec::kNameFieldNumber;
const int JobSpec::kReplicaFieldNumber;
const int JobSpec::kDeployStepSizeFieldNumber;
const int JobSpec::kUpdateStepSizeFieldNumber;
const int JobSpec::kPodFieldNumber;
const int JobSpec::kVersionFieldNumber;
const int JobSpec::kRawFieldNumber;
#endif  // !_MSC_VER

JobSpec::JobSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.JobSpec)
}

void JobSpec::InitAsDefaultInstance() {
  pod_ = const_cast< ::dos::PodSpec*>(&::dos::PodSpec::default_instance());
}

JobSpec::JobSpec(const JobSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.JobSpec)
}

void JobSpec::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replica_ = 0u;
  deploy_step_size_ = 0u;
  update_step_size_ = 0u;
  pod_ = NULL;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  raw_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobSpec::~JobSpec() {
  // @@protoc_insertion_point(destructor:dos.JobSpec)
  SharedDtor();
}

void JobSpec::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (raw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete raw_;
  }
  if (this != default_instance_) {
    delete pod_;
  }
}

void JobSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobSpec_descriptor_;
}

const JobSpec& JobSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

JobSpec* JobSpec::default_instance_ = NULL;

JobSpec* JobSpec::New() const {
  return new JobSpec;
}

void JobSpec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JobSpec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(replica_, deploy_step_size_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    update_step_size_ = 0u;
    if (has_pod()) {
      if (pod_ != NULL) pod_->::dos::PodSpec::Clear();
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_raw()) {
      if (raw_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        raw_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.JobSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_replica;
        break;
      }

      // optional uint32 replica = 2;
      case 2: {
        if (tag == 16) {
         parse_replica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replica_)));
          set_has_replica();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_deploy_step_size;
        break;
      }

      // optional uint32 deploy_step_size = 3;
      case 3: {
        if (tag == 24) {
         parse_deploy_step_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deploy_step_size_)));
          set_has_deploy_step_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_update_step_size;
        break;
      }

      // optional uint32 update_step_size = 4;
      case 4: {
        if (tag == 32) {
         parse_update_step_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_step_size_)));
          set_has_update_step_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pod;
        break;
      }

      // optional .dos.PodSpec pod = 5;
      case 5: {
        if (tag == 42) {
         parse_pod:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pod()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // optional string version = 6;
      case 6: {
        if (tag == 50) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_raw;
        break;
      }

      // optional bytes raw = 7;
      case 7: {
        if (tag == 58) {
         parse_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.JobSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.JobSpec)
  return false;
#undef DO_
}

void JobSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.JobSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 replica = 2;
  if (has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replica(), output);
  }

  // optional uint32 deploy_step_size = 3;
  if (has_deploy_step_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deploy_step_size(), output);
  }

  // optional uint32 update_step_size = 4;
  if (has_update_step_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_step_size(), output);
  }

  // optional .dos.PodSpec pod = 5;
  if (has_pod()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pod(), output);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->version(), output);
  }

  // optional bytes raw = 7;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->raw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.JobSpec)
}

::google::protobuf::uint8* JobSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.JobSpec)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 replica = 2;
  if (has_replica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replica(), target);
  }

  // optional uint32 deploy_step_size = 3;
  if (has_deploy_step_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deploy_step_size(), target);
  }

  // optional uint32 update_step_size = 4;
  if (has_update_step_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->update_step_size(), target);
  }

  // optional .dos.PodSpec pod = 5;
  if (has_pod()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pod(), target);
  }

  // optional string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // optional bytes raw = 7;
  if (has_raw()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->raw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.JobSpec)
  return target;
}

int JobSpec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 replica = 2;
    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replica());
    }

    // optional uint32 deploy_step_size = 3;
    if (has_deploy_step_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deploy_step_size());
    }

    // optional uint32 update_step_size = 4;
    if (has_update_step_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_step_size());
    }

    // optional .dos.PodSpec pod = 5;
    if (has_pod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pod());
    }

    // optional string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional bytes raw = 7;
    if (has_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->raw());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobSpec::MergeFrom(const JobSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_replica()) {
      set_replica(from.replica());
    }
    if (from.has_deploy_step_size()) {
      set_deploy_step_size(from.deploy_step_size());
    }
    if (from.has_update_step_size()) {
      set_update_step_size(from.update_step_size());
    }
    if (from.has_pod()) {
      mutable_pod()->::dos::PodSpec::MergeFrom(from.pod());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_raw()) {
      set_raw(from.raw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSpec::CopyFrom(const JobSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSpec::IsInitialized() const {

  return true;
}

void JobSpec::Swap(JobSpec* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(replica_, other->replica_);
    std::swap(deploy_step_size_, other->deploy_step_size_);
    std::swap(update_step_size_, other->update_step_size_);
    std::swap(pod_, other->pod_);
    std::swap(version_, other->version_);
    std::swap(raw_, other->raw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobSpec_descriptor_;
  metadata.reflection = JobSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobStatus::kNameFieldNumber;
const int JobStatus::kStateFieldNumber;
const int JobStatus::kUserNameFieldNumber;
const int JobStatus::kCtimeFieldNumber;
const int JobStatus::kUtimeFieldNumber;
const int JobStatus::kDescFieldNumber;
#endif  // !_MSC_VER

JobStatus::JobStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.JobStatus)
}

void JobStatus::InitAsDefaultInstance() {
  desc_ = const_cast< ::dos::JobSpec*>(&::dos::JobSpec::default_instance());
}

JobStatus::JobStatus(const JobStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.JobStatus)
}

void JobStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ctime_ = GOOGLE_LONGLONG(0);
  utime_ = GOOGLE_LONGLONG(0);
  desc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobStatus::~JobStatus() {
  // @@protoc_insertion_point(destructor:dos.JobStatus)
  SharedDtor();
}

void JobStatus::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_name_;
  }
  if (this != default_instance_) {
    delete desc_;
  }
}

void JobStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobStatus_descriptor_;
}

const JobStatus& JobStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

JobStatus* JobStatus::default_instance_ = NULL;

JobStatus* JobStatus::New() const {
  return new JobStatus;
}

void JobStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JobStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(ctime_, utime_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    state_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != NULL) desc_->::dos::JobSpec::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.JobStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional .dos.JobState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::JobState_IsValid(value)) {
            set_state(static_cast< ::dos::JobState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }

      // optional string user_name = 3;
      case 3: {
        if (tag == 26) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ctime;
        break;
      }

      // optional int64 ctime = 4;
      case 4: {
        if (tag == 32) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_utime;
        break;
      }

      // optional int64 utime = 5;
      case 5: {
        if (tag == 40) {
         parse_utime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &utime_)));
          set_has_utime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // optional .dos.JobSpec desc = 6;
      case 6: {
        if (tag == 50) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.JobStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.JobStatus)
  return false;
#undef DO_
}

void JobStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.JobStatus)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .dos.JobState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_name(), output);
  }

  // optional int64 ctime = 4;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ctime(), output);
  }

  // optional int64 utime = 5;
  if (has_utime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->utime(), output);
  }

  // optional .dos.JobSpec desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.JobStatus)
}

::google::protobuf::uint8* JobStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.JobStatus)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dos.JobState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }

  // optional int64 ctime = 4;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ctime(), target);
  }

  // optional int64 utime = 5;
  if (has_utime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->utime(), target);
  }

  // optional .dos.JobSpec desc = 6;
  if (has_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.JobStatus)
  return target;
}

int JobStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dos.JobState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional int64 ctime = 4;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ctime());
    }

    // optional int64 utime = 5;
    if (has_utime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->utime());
    }

    // optional .dos.JobSpec desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobStatus::MergeFrom(const JobStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
    if (from.has_utime()) {
      set_utime(from.utime());
    }
    if (from.has_desc()) {
      mutable_desc()->::dos::JobSpec::MergeFrom(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatus::CopyFrom(const JobStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatus::IsInitialized() const {

  return true;
}

void JobStatus::Swap(JobStatus* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(state_, other->state_);
    std::swap(user_name_, other->user_name_);
    std::swap(ctime_, other->ctime_);
    std::swap(utime_, other->utime_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobStatus_descriptor_;
  metadata.reflection = JobStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PodLog::kNameFieldNumber;
const int PodLog::kStateFromFieldNumber;
const int PodLog::kStateToFieldNumber;
const int PodLog::kTimeFieldNumber;
const int PodLog::kMsgFieldNumber;
#endif  // !_MSC_VER

PodLog::PodLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.PodLog)
}

void PodLog::InitAsDefaultInstance() {
}

PodLog::PodLog(const PodLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.PodLog)
}

void PodLog::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_from_ = 0;
  state_to_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PodLog::~PodLog() {
  // @@protoc_insertion_point(destructor:dos.PodLog)
  SharedDtor();
}

void PodLog::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void PodLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PodLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PodLog_descriptor_;
}

const PodLog& PodLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

PodLog* PodLog::default_instance_ = NULL;

PodLog* PodLog::New() const {
  return new PodLog;
}

void PodLog::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PodLog*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(state_from_, time_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PodLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.PodLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state_from;
        break;
      }

      // optional .dos.PodState state_from = 2;
      case 2: {
        if (tag == 16) {
         parse_state_from:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::PodState_IsValid(value)) {
            set_state_from(static_cast< ::dos::PodState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state_to;
        break;
      }

      // optional .dos.PodState state_to = 3;
      case 3: {
        if (tag == 24) {
         parse_state_to:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::PodState_IsValid(value)) {
            set_state_to(static_cast< ::dos::PodState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }

      // optional string msg = 5;
      case 5: {
        if (tag == 42) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.PodLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.PodLog)
  return false;
#undef DO_
}

void PodLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.PodLog)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .dos.PodState state_from = 2;
  if (has_state_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state_from(), output);
  }

  // optional .dos.PodState state_to = 3;
  if (has_state_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state_to(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // optional string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.PodLog)
}

::google::protobuf::uint8* PodLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.PodLog)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dos.PodState state_from = 2;
  if (has_state_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state_from(), target);
  }

  // optional .dos.PodState state_to = 3;
  if (has_state_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state_to(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // optional string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.PodLog)
  return target;
}

int PodLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dos.PodState state_from = 2;
    if (has_state_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state_from());
    }

    // optional .dos.PodState state_to = 3;
    if (has_state_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state_to());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PodLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PodLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PodLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PodLog::MergeFrom(const PodLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_state_from()) {
      set_state_from(from.state_from());
    }
    if (from.has_state_to()) {
      set_state_to(from.state_to());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PodLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodLog::CopyFrom(const PodLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodLog::IsInitialized() const {

  return true;
}

void PodLog::Swap(PodLog* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(state_from_, other->state_from_);
    std::swap(state_to_, other->state_to_);
    std::swap(time_, other->time_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PodLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PodLog_descriptor_;
  metadata.reflection = PodLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PodStatus::kNameFieldNumber;
const int PodStatus::kCstatusFieldNumber;
const int PodStatus::kDescFieldNumber;
const int PodStatus::kStageFieldNumber;
const int PodStatus::kStateFieldNumber;
const int PodStatus::kSchedTimeFieldNumber;
const int PodStatus::kBootTimeFieldNumber;
const int PodStatus::kStartPendingTimeFieldNumber;
const int PodStatus::kEndpointFieldNumber;
const int PodStatus::kJobNameFieldNumber;
#endif  // !_MSC_VER

PodStatus::PodStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.PodStatus)
}

void PodStatus::InitAsDefaultInstance() {
  desc_ = const_cast< ::dos::PodSpec*>(&::dos::PodSpec::default_instance());
}

PodStatus::PodStatus(const PodStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.PodStatus)
}

void PodStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = NULL;
  stage_ = 0;
  state_ = 0;
  sched_time_ = GOOGLE_LONGLONG(0);
  boot_time_ = GOOGLE_LONGLONG(0);
  start_pending_time_ = GOOGLE_LONGLONG(0);
  endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PodStatus::~PodStatus() {
  // @@protoc_insertion_point(destructor:dos.PodStatus)
  SharedDtor();
}

void PodStatus::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endpoint_;
  }
  if (job_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete job_name_;
  }
  if (this != default_instance_) {
    delete desc_;
  }
}

void PodStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PodStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PodStatus_descriptor_;
}

const PodStatus& PodStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

PodStatus* PodStatus::default_instance_ = NULL;

PodStatus* PodStatus::New() const {
  return new PodStatus;
}

void PodStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PodStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 253) {
    ZR_(stage_, start_pending_time_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != NULL) desc_->::dos::PodSpec::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_endpoint()) {
      if (endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endpoint_->clear();
      }
    }
    if (has_job_name()) {
      if (job_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        job_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PodStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.PodStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cstatus;
        break;
      }

      // repeated .dos.ContainerStatus cstatus = 2;
      case 2: {
        if (tag == 18) {
         parse_cstatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_cstatus;
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional .dos.PodSpec desc = 3;
      case 3: {
        if (tag == 26) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // optional .dos.PodSchedStage stage = 4;
      case 4: {
        if (tag == 32) {
         parse_stage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::PodSchedStage_IsValid(value)) {
            set_stage(static_cast< ::dos::PodSchedStage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional .dos.PodState state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::PodState_IsValid(value)) {
            set_state(static_cast< ::dos::PodState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sched_time;
        break;
      }

      // optional int64 sched_time = 6;
      case 6: {
        if (tag == 48) {
         parse_sched_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sched_time_)));
          set_has_sched_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_boot_time;
        break;
      }

      // optional int64 boot_time = 7;
      case 7: {
        if (tag == 56) {
         parse_boot_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boot_time_)));
          set_has_boot_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_start_pending_time;
        break;
      }

      // optional int64 start_pending_time = 8;
      case 8: {
        if (tag == 64) {
         parse_start_pending_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_pending_time_)));
          set_has_start_pending_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_endpoint;
        break;
      }

      // optional string endpoint = 9;
      case 9: {
        if (tag == 74) {
         parse_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endpoint().data(), this->endpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endpoint");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_job_name;
        break;
      }

      // optional string job_name = 10;
      case 10: {
        if (tag == 82) {
         parse_job_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->job_name().data(), this->job_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "job_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.PodStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.PodStatus)
  return false;
#undef DO_
}

void PodStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.PodStatus)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .dos.ContainerStatus cstatus = 2;
  for (int i = 0; i < this->cstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cstatus(i), output);
  }

  // optional .dos.PodSpec desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->desc(), output);
  }

  // optional .dos.PodSchedStage stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->stage(), output);
  }

  // optional .dos.PodState state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional int64 sched_time = 6;
  if (has_sched_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->sched_time(), output);
  }

  // optional int64 boot_time = 7;
  if (has_boot_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->boot_time(), output);
  }

  // optional int64 start_pending_time = 8;
  if (has_start_pending_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->start_pending_time(), output);
  }

  // optional string endpoint = 9;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->endpoint(), output);
  }

  // optional string job_name = 10;
  if (has_job_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_name().data(), this->job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->job_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.PodStatus)
}

::google::protobuf::uint8* PodStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.PodStatus)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .dos.ContainerStatus cstatus = 2;
  for (int i = 0; i < this->cstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cstatus(i), target);
  }

  // optional .dos.PodSpec desc = 3;
  if (has_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->desc(), target);
  }

  // optional .dos.PodSchedStage stage = 4;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->stage(), target);
  }

  // optional .dos.PodState state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // optional int64 sched_time = 6;
  if (has_sched_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->sched_time(), target);
  }

  // optional int64 boot_time = 7;
  if (has_boot_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->boot_time(), target);
  }

  // optional int64 start_pending_time = 8;
  if (has_start_pending_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->start_pending_time(), target);
  }

  // optional string endpoint = 9;
  if (has_endpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), this->endpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->endpoint(), target);
  }

  // optional string job_name = 10;
  if (has_job_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->job_name().data(), this->job_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "job_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->job_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.PodStatus)
  return target;
}

int PodStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dos.PodSpec desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->desc());
    }

    // optional .dos.PodSchedStage stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

    // optional .dos.PodState state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 sched_time = 6;
    if (has_sched_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sched_time());
    }

    // optional int64 boot_time = 7;
    if (has_boot_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boot_time());
    }

    // optional int64 start_pending_time = 8;
    if (has_start_pending_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_pending_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string endpoint = 9;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endpoint());
    }

    // optional string job_name = 10;
    if (has_job_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_name());
    }

  }
  // repeated .dos.ContainerStatus cstatus = 2;
  total_size += 1 * this->cstatus_size();
  for (int i = 0; i < this->cstatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cstatus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PodStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PodStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PodStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PodStatus::MergeFrom(const PodStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  cstatus_.MergeFrom(from.cstatus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      mutable_desc()->::dos::PodSpec::MergeFrom(from.desc());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_sched_time()) {
      set_sched_time(from.sched_time());
    }
    if (from.has_boot_time()) {
      set_boot_time(from.boot_time());
    }
    if (from.has_start_pending_time()) {
      set_start_pending_time(from.start_pending_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endpoint()) {
      set_endpoint(from.endpoint());
    }
    if (from.has_job_name()) {
      set_job_name(from.job_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PodStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PodStatus::CopyFrom(const PodStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PodStatus::IsInitialized() const {

  return true;
}

void PodStatus::Swap(PodStatus* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    cstatus_.Swap(&other->cstatus_);
    std::swap(desc_, other->desc_);
    std::swap(stage_, other->stage_);
    std::swap(state_, other->state_);
    std::swap(sched_time_, other->sched_time_);
    std::swap(boot_time_, other->boot_time_);
    std::swap(start_pending_time_, other->start_pending_time_);
    std::swap(endpoint_, other->endpoint_);
    std::swap(job_name_, other->job_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PodStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PodStatus_descriptor_;
  metadata.reflection = PodStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeStatus::kResourceFieldNumber;
const int NodeStatus::kPstatusFieldNumber;
const int NodeStatus::kStateFieldNumber;
const int NodeStatus::kMetaFieldNumber;
const int NodeStatus::kTaskIdFieldNumber;
const int NodeStatus::kVersionFieldNumber;
#endif  // !_MSC_VER

NodeStatus::NodeStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.NodeStatus)
}

void NodeStatus::InitAsDefaultInstance() {
  resource_ = const_cast< ::dos::Resource*>(&::dos::Resource::default_instance());
  meta_ = const_cast< ::dos::NodeMeta*>(&::dos::NodeMeta::default_instance());
}

NodeStatus::NodeStatus(const NodeStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.NodeStatus)
}

void NodeStatus::SharedCtor() {
  _cached_size_ = 0;
  resource_ = NULL;
  state_ = 0;
  meta_ = NULL;
  task_id_ = GOOGLE_LONGLONG(0);
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeStatus::~NodeStatus() {
  // @@protoc_insertion_point(destructor:dos.NodeStatus)
  SharedDtor();
}

void NodeStatus::SharedDtor() {
  if (this != default_instance_) {
    delete resource_;
    delete meta_;
  }
}

void NodeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeStatus_descriptor_;
}

const NodeStatus& NodeStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

NodeStatus* NodeStatus::default_instance_ = NULL;

NodeStatus* NodeStatus::New() const {
  return new NodeStatus;
}

void NodeStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NodeStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 61) {
    ZR_(state_, task_id_);
    if (has_resource()) {
      if (resource_ != NULL) resource_->::dos::Resource::Clear();
    }
    if (has_meta()) {
      if (meta_ != NULL) meta_->::dos::NodeMeta::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  pstatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.NodeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.Resource resource = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pstatus;
        break;
      }

      // repeated .dos.PodStatus pstatus = 2;
      case 2: {
        if (tag == 18) {
         parse_pstatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pstatus;
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .dos.NodeState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::NodeState_IsValid(value)) {
            set_state(static_cast< ::dos::NodeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_meta;
        break;
      }

      // optional .dos.NodeMeta meta = 4;
      case 4: {
        if (tag == 34) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_task_id;
        break;
      }

      // optional int64 task_id = 5;
      case 5: {
        if (tag == 40) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_version;
        break;
      }

      // optional int32 version = 6;
      case 6: {
        if (tag == 48) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.NodeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.NodeStatus)
  return false;
#undef DO_
}

void NodeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.NodeStatus)
  // optional .dos.Resource resource = 1;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resource(), output);
  }

  // repeated .dos.PodStatus pstatus = 2;
  for (int i = 0; i < this->pstatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pstatus(i), output);
  }

  // optional .dos.NodeState state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional .dos.NodeMeta meta = 4;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->meta(), output);
  }

  // optional int64 task_id = 5;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->task_id(), output);
  }

  // optional int32 version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.NodeStatus)
}

::google::protobuf::uint8* NodeStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.NodeStatus)
  // optional .dos.Resource resource = 1;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource(), target);
  }

  // repeated .dos.PodStatus pstatus = 2;
  for (int i = 0; i < this->pstatus_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pstatus(i), target);
  }

  // optional .dos.NodeState state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional .dos.NodeMeta meta = 4;
  if (has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->meta(), target);
  }

  // optional int64 task_id = 5;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->task_id(), target);
  }

  // optional int32 version = 6;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.NodeStatus)
  return target;
}

int NodeStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.Resource resource = 1;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

    // optional .dos.NodeState state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional .dos.NodeMeta meta = 4;
    if (has_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meta());
    }

    // optional int64 task_id = 5;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

    // optional int32 version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  // repeated .dos.PodStatus pstatus = 2;
  total_size += 1 * this->pstatus_size();
  for (int i = 0; i < this->pstatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pstatus(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeStatus::MergeFrom(const NodeStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  pstatus_.MergeFrom(from.pstatus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resource()) {
      mutable_resource()->::dos::Resource::MergeFrom(from.resource());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_meta()) {
      mutable_meta()->::dos::NodeMeta::MergeFrom(from.meta());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeStatus::CopyFrom(const NodeStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeStatus::IsInitialized() const {

  return true;
}

void NodeStatus::Swap(NodeStatus* other) {
  if (other != this) {
    std::swap(resource_, other->resource_);
    pstatus_.Swap(&other->pstatus_);
    std::swap(state_, other->state_);
    std::swap(meta_, other->meta_);
    std::swap(task_id_, other->task_id_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeStatus_descriptor_;
  metadata.reflection = NodeStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerLog::kNameFieldNumber;
const int ContainerLog::kCfromFieldNumber;
const int ContainerLog::kCtoFieldNumber;
const int ContainerLog::kTimeFieldNumber;
const int ContainerLog::kMsgFieldNumber;
#endif  // !_MSC_VER

ContainerLog::ContainerLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.ContainerLog)
}

void ContainerLog::InitAsDefaultInstance() {
}

ContainerLog::ContainerLog(const ContainerLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.ContainerLog)
}

void ContainerLog::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cfrom_ = 0;
  cto_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerLog::~ContainerLog() {
  // @@protoc_insertion_point(destructor:dos.ContainerLog)
  SharedDtor();
}

void ContainerLog::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void ContainerLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerLog_descriptor_;
}

const ContainerLog& ContainerLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

ContainerLog* ContainerLog::default_instance_ = NULL;

ContainerLog* ContainerLog::New() const {
  return new ContainerLog;
}

void ContainerLog::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ContainerLog*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(cfrom_, time_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.ContainerLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cfrom;
        break;
      }

      // optional .dos.ContainerState cfrom = 2;
      case 2: {
        if (tag == 16) {
         parse_cfrom:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::ContainerState_IsValid(value)) {
            set_cfrom(static_cast< ::dos::ContainerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cto;
        break;
      }

      // optional .dos.ContainerState cto = 3;
      case 3: {
        if (tag == 24) {
         parse_cto:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::ContainerState_IsValid(value)) {
            set_cto(static_cast< ::dos::ContainerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }

      // optional string msg = 5;
      case 5: {
        if (tag == 42) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.ContainerLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.ContainerLog)
  return false;
#undef DO_
}

void ContainerLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.ContainerLog)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .dos.ContainerState cfrom = 2;
  if (has_cfrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cfrom(), output);
  }

  // optional .dos.ContainerState cto = 3;
  if (has_cto()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cto(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // optional string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.ContainerLog)
}

::google::protobuf::uint8* ContainerLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.ContainerLog)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .dos.ContainerState cfrom = 2;
  if (has_cfrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cfrom(), target);
  }

  // optional .dos.ContainerState cto = 3;
  if (has_cto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cto(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // optional string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.ContainerLog)
  return target;
}

int ContainerLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dos.ContainerState cfrom = 2;
    if (has_cfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cfrom());
    }

    // optional .dos.ContainerState cto = 3;
    if (has_cto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cto());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerLog::MergeFrom(const ContainerLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cfrom()) {
      set_cfrom(from.cfrom());
    }
    if (from.has_cto()) {
      set_cto(from.cto());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerLog::CopyFrom(const ContainerLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerLog::IsInitialized() const {

  return true;
}

void ContainerLog::Swap(ContainerLog* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(cfrom_, other->cfrom_);
    std::swap(cto_, other->cto_);
    std::swap(time_, other->time_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerLog_descriptor_;
  metadata.reflection = ContainerLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerStatus::kNameFieldNumber;
const int ContainerStatus::kStartTimeFieldNumber;
const int ContainerStatus::kResourceFieldNumber;
const int ContainerStatus::kStateFieldNumber;
const int ContainerStatus::kBootTimeFieldNumber;
const int ContainerStatus::kSpecFieldNumber;
const int ContainerStatus::kLastUpdateFieldNumber;
const int ContainerStatus::kRestartCountFieldNumber;
const int ContainerStatus::kNodeAddrFieldNumber;
const int ContainerStatus::kHealthStateFieldNumber;
const int ContainerStatus::kLowestFieldNumber;
const int ContainerStatus::kHighestFieldNumber;
#endif  // !_MSC_VER

ContainerStatus::ContainerStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.ContainerStatus)
}

void ContainerStatus::InitAsDefaultInstance() {
  resource_ = const_cast< ::dos::Resource*>(&::dos::Resource::default_instance());
  spec_ = const_cast< ::dos::Container*>(&::dos::Container::default_instance());
  lowest_ = const_cast< ::dos::Resource*>(&::dos::Resource::default_instance());
  highest_ = const_cast< ::dos::Resource*>(&::dos::Resource::default_instance());
}

ContainerStatus::ContainerStatus(const ContainerStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.ContainerStatus)
}

void ContainerStatus::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = GOOGLE_LONGLONG(0);
  resource_ = NULL;
  state_ = 0;
  boot_time_ = GOOGLE_LONGLONG(0);
  spec_ = NULL;
  last_update_ = GOOGLE_LONGLONG(0);
  restart_count_ = GOOGLE_LONGLONG(0);
  node_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  health_state_ = 0;
  lowest_ = NULL;
  highest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerStatus::~ContainerStatus() {
  // @@protoc_insertion_point(destructor:dos.ContainerStatus)
  SharedDtor();
}

void ContainerStatus::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (node_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete node_addr_;
  }
  if (this != default_instance_) {
    delete resource_;
    delete spec_;
    delete lowest_;
    delete highest_;
  }
}

void ContainerStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerStatus_descriptor_;
}

const ContainerStatus& ContainerStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dos_2eproto();
  return *default_instance_;
}

ContainerStatus* ContainerStatus::default_instance_ = NULL;

ContainerStatus* ContainerStatus::New() const {
  return new ContainerStatus;
}

void ContainerStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ContainerStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(last_update_, state_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    start_time_ = GOOGLE_LONGLONG(0);
    if (has_resource()) {
      if (resource_ != NULL) resource_->::dos::Resource::Clear();
    }
    boot_time_ = GOOGLE_LONGLONG(0);
    if (has_spec()) {
      if (spec_ != NULL) spec_->::dos::Container::Clear();
    }
    restart_count_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_node_addr()) {
      if (node_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        node_addr_->clear();
      }
    }
    health_state_ = 0;
    if (has_lowest()) {
      if (lowest_ != NULL) lowest_->::dos::Resource::Clear();
    }
    if (has_highest()) {
      if (highest_ != NULL) highest_->::dos::Resource::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.ContainerStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 2;
      case 2: {
        if (tag == 16) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional .dos.Resource resource = 3;
      case 3: {
        if (tag == 26) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .dos.ContainerState state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::ContainerState_IsValid(value)) {
            set_state(static_cast< ::dos::ContainerState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_boot_time;
        break;
      }

      // optional int64 boot_time = 6;
      case 6: {
        if (tag == 48) {
         parse_boot_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boot_time_)));
          set_has_boot_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_spec;
        break;
      }

      // optional .dos.Container spec = 7;
      case 7: {
        if (tag == 58) {
         parse_spec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spec()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_update;
        break;
      }

      // optional int64 last_update = 8;
      case 8: {
        if (tag == 64) {
         parse_last_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_update_)));
          set_has_last_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_restart_count;
        break;
      }

      // optional int64 restart_count = 9;
      case 9: {
        if (tag == 72) {
         parse_restart_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &restart_count_)));
          set_has_restart_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_node_addr;
        break;
      }

      // optional string node_addr = 10;
      case 10: {
        if (tag == 82) {
         parse_node_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_addr().data(), this->node_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "node_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_health_state;
        break;
      }

      // optional .dos.HealthState health_state = 11;
      case 11: {
        if (tag == 88) {
         parse_health_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::HealthState_IsValid(value)) {
            set_health_state(static_cast< ::dos::HealthState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_lowest;
        break;
      }

      // optional .dos.Resource lowest = 12;
      case 12: {
        if (tag == 98) {
         parse_lowest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lowest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_highest;
        break;
      }

      // optional .dos.Resource highest = 13;
      case 13: {
        if (tag == 106) {
         parse_highest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.ContainerStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.ContainerStatus)
  return false;
#undef DO_
}

void ContainerStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.ContainerStatus)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 start_time = 2;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->start_time(), output);
  }

  // optional .dos.Resource resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resource(), output);
  }

  // optional .dos.ContainerState state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional int64 boot_time = 6;
  if (has_boot_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->boot_time(), output);
  }

  // optional .dos.Container spec = 7;
  if (has_spec()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->spec(), output);
  }

  // optional int64 last_update = 8;
  if (has_last_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->last_update(), output);
  }

  // optional int64 restart_count = 9;
  if (has_restart_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->restart_count(), output);
  }

  // optional string node_addr = 10;
  if (has_node_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_addr().data(), this->node_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->node_addr(), output);
  }

  // optional .dos.HealthState health_state = 11;
  if (has_health_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->health_state(), output);
  }

  // optional .dos.Resource lowest = 12;
  if (has_lowest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->lowest(), output);
  }

  // optional .dos.Resource highest = 13;
  if (has_highest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->highest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.ContainerStatus)
}

::google::protobuf::uint8* ContainerStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.ContainerStatus)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 start_time = 2;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->start_time(), target);
  }

  // optional .dos.Resource resource = 3;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resource(), target);
  }

  // optional .dos.ContainerState state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional int64 boot_time = 6;
  if (has_boot_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->boot_time(), target);
  }

  // optional .dos.Container spec = 7;
  if (has_spec()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->spec(), target);
  }

  // optional int64 last_update = 8;
  if (has_last_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->last_update(), target);
  }

  // optional int64 restart_count = 9;
  if (has_restart_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->restart_count(), target);
  }

  // optional string node_addr = 10;
  if (has_node_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_addr().data(), this->node_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "node_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->node_addr(), target);
  }

  // optional .dos.HealthState health_state = 11;
  if (has_health_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->health_state(), target);
  }

  // optional .dos.Resource lowest = 12;
  if (has_lowest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->lowest(), target);
  }

  // optional .dos.Resource highest = 13;
  if (has_highest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->highest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.ContainerStatus)
  return target;
}

int ContainerStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional .dos.Resource resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }

    // optional .dos.ContainerState state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 boot_time = 6;
    if (has_boot_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boot_time());
    }

    // optional .dos.Container spec = 7;
    if (has_spec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spec());
    }

    // optional int64 last_update = 8;
    if (has_last_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_update());
    }

    // optional int64 restart_count = 9;
    if (has_restart_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->restart_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string node_addr = 10;
    if (has_node_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_addr());
    }

    // optional .dos.HealthState health_state = 11;
    if (has_health_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->health_state());
    }

    // optional .dos.Resource lowest = 12;
    if (has_lowest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lowest());
    }

    // optional .dos.Resource highest = 13;
    if (has_highest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerStatus::MergeFrom(const ContainerStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_resource()) {
      mutable_resource()->::dos::Resource::MergeFrom(from.resource());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_boot_time()) {
      set_boot_time(from.boot_time());
    }
    if (from.has_spec()) {
      mutable_spec()->::dos::Container::MergeFrom(from.spec());
    }
    if (from.has_last_update()) {
      set_last_update(from.last_update());
    }
    if (from.has_restart_count()) {
      set_restart_count(from.restart_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_node_addr()) {
      set_node_addr(from.node_addr());
    }
    if (from.has_health_state()) {
      set_health_state(from.health_state());
    }
    if (from.has_lowest()) {
      mutable_lowest()->::dos::Resource::MergeFrom(from.lowest());
    }
    if (from.has_highest()) {
      mutable_highest()->::dos::Resource::MergeFrom(from.highest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerStatus::CopyFrom(const ContainerStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerStatus::IsInitialized() const {

  return true;
}

void ContainerStatus::Swap(ContainerStatus* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(start_time_, other->start_time_);
    std::swap(resource_, other->resource_);
    std::swap(state_, other->state_);
    std::swap(boot_time_, other->boot_time_);
    std::swap(spec_, other->spec_);
    std::swap(last_update_, other->last_update_);
    std::swap(restart_count_, other->restart_count_);
    std::swap(node_addr_, other->node_addr_);
    std::swap(health_state_, other->health_state_);
    std::swap(lowest_, other->lowest_);
    std::swap(highest_, other->highest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerStatus_descriptor_;
  metadata.reflection = ContainerStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dos

// @@protoc_insertion_point(global_scope)
