// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine.proto

#ifndef PROTOBUF_engine_2eproto__INCLUDED
#define PROTOBUF_engine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "dos.pb.h"
// @@protoc_insertion_point(includes)

namespace dos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_engine_2eproto();
void protobuf_AssignDesc_engine_2eproto();
void protobuf_ShutdownFile_engine_2eproto();

class RunContainerRequest;
class RunContainerResponse;
class ContainerOverview;
class ShowContainerRequest;
class ShowContainerResponse;
class ShowCLogRequest;
class ShowCLogResponse;
class GetInitdRequest;
class GetInitdResponse;
class UpdateContainerRequest;
class UpdateContainerResponse;
class DeleteContainerRequest;
class DeleteContainerResponse;

// ===================================================================

class RunContainerRequest : public ::google::protobuf::Message {
 public:
  RunContainerRequest();
  virtual ~RunContainerRequest();

  RunContainerRequest(const RunContainerRequest& from);

  inline RunContainerRequest& operator=(const RunContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunContainerRequest& default_instance();

  void Swap(RunContainerRequest* other);

  // implements Message ----------------------------------------------

  RunContainerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunContainerRequest& from);
  void MergeFrom(const RunContainerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .dos.Container container = 2;
  inline bool has_container() const;
  inline void clear_container();
  static const int kContainerFieldNumber = 2;
  inline const ::dos::Container& container() const;
  inline ::dos::Container* mutable_container();
  inline ::dos::Container* release_container();
  inline void set_allocated_container(::dos::Container* container);

  // @@protoc_insertion_point(class_scope:dos.RunContainerRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_container();
  inline void clear_has_container();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::dos::Container* container_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static RunContainerRequest* default_instance_;
};
// -------------------------------------------------------------------

class RunContainerResponse : public ::google::protobuf::Message {
 public:
  RunContainerResponse();
  virtual ~RunContainerResponse();

  RunContainerResponse(const RunContainerResponse& from);

  inline RunContainerResponse& operator=(const RunContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunContainerResponse& default_instance();

  void Swap(RunContainerResponse* other);

  // implements Message ----------------------------------------------

  RunContainerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunContainerResponse& from);
  void MergeFrom(const RunContainerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dos.RpcStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::dos::RpcStatus status() const;
  inline void set_status(::dos::RpcStatus value);

  // @@protoc_insertion_point(class_scope:dos.RunContainerResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int status_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static RunContainerResponse* default_instance_;
};
// -------------------------------------------------------------------

class ContainerOverview : public ::google::protobuf::Message {
 public:
  ContainerOverview();
  virtual ~ContainerOverview();

  ContainerOverview(const ContainerOverview& from);

  inline ContainerOverview& operator=(const ContainerOverview& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerOverview& default_instance();

  void Swap(ContainerOverview* other);

  // implements Message ----------------------------------------------

  ContainerOverview* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerOverview& from);
  void MergeFrom(const ContainerOverview& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 start_time = 2;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  inline ::google::protobuf::int64 start_time() const;
  inline void set_start_time(::google::protobuf::int64 value);

  // optional .dos.ContainerState state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::dos::ContainerState state() const;
  inline void set_state(::dos::ContainerState value);

  // optional .dos.ContainerType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::dos::ContainerType type() const;
  inline void set_type(::dos::ContainerType value);

  // optional int64 boot_time = 5;
  inline bool has_boot_time() const;
  inline void clear_boot_time();
  static const int kBootTimeFieldNumber = 5;
  inline ::google::protobuf::int64 boot_time() const;
  inline void set_boot_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dos.ContainerOverview)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_boot_time();
  inline void clear_has_boot_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int64 start_time_;
  int state_;
  int type_;
  ::google::protobuf::int64 boot_time_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static ContainerOverview* default_instance_;
};
// -------------------------------------------------------------------

class ShowContainerRequest : public ::google::protobuf::Message {
 public:
  ShowContainerRequest();
  virtual ~ShowContainerRequest();

  ShowContainerRequest(const ShowContainerRequest& from);

  inline ShowContainerRequest& operator=(const ShowContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowContainerRequest& default_instance();

  void Swap(ShowContainerRequest* other);

  // implements Message ----------------------------------------------

  ShowContainerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowContainerRequest& from);
  void MergeFrom(const ShowContainerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 1;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:dos.ShowContainerRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static ShowContainerRequest* default_instance_;
};
// -------------------------------------------------------------------

class ShowContainerResponse : public ::google::protobuf::Message {
 public:
  ShowContainerResponse();
  virtual ~ShowContainerResponse();

  ShowContainerResponse(const ShowContainerResponse& from);

  inline ShowContainerResponse& operator=(const ShowContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowContainerResponse& default_instance();

  void Swap(ShowContainerResponse* other);

  // implements Message ----------------------------------------------

  ShowContainerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowContainerResponse& from);
  void MergeFrom(const ShowContainerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dos.RpcStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::dos::RpcStatus status() const;
  inline void set_status(::dos::RpcStatus value);

  // repeated .dos.ContainerOverview containers = 2;
  inline int containers_size() const;
  inline void clear_containers();
  static const int kContainersFieldNumber = 2;
  inline const ::dos::ContainerOverview& containers(int index) const;
  inline ::dos::ContainerOverview* mutable_containers(int index);
  inline ::dos::ContainerOverview* add_containers();
  inline const ::google::protobuf::RepeatedPtrField< ::dos::ContainerOverview >&
      containers() const;
  inline ::google::protobuf::RepeatedPtrField< ::dos::ContainerOverview >*
      mutable_containers();

  // @@protoc_insertion_point(class_scope:dos.ShowContainerResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dos::ContainerOverview > containers_;
  int status_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static ShowContainerResponse* default_instance_;
};
// -------------------------------------------------------------------

class ShowCLogRequest : public ::google::protobuf::Message {
 public:
  ShowCLogRequest();
  virtual ~ShowCLogRequest();

  ShowCLogRequest(const ShowCLogRequest& from);

  inline ShowCLogRequest& operator=(const ShowCLogRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowCLogRequest& default_instance();

  void Swap(ShowCLogRequest* other);

  // implements Message ----------------------------------------------

  ShowCLogRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowCLogRequest& from);
  void MergeFrom(const ShowCLogRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:dos.ShowCLogRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static ShowCLogRequest* default_instance_;
};
// -------------------------------------------------------------------

class ShowCLogResponse : public ::google::protobuf::Message {
 public:
  ShowCLogResponse();
  virtual ~ShowCLogResponse();

  ShowCLogResponse(const ShowCLogResponse& from);

  inline ShowCLogResponse& operator=(const ShowCLogResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowCLogResponse& default_instance();

  void Swap(ShowCLogResponse* other);

  // implements Message ----------------------------------------------

  ShowCLogResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShowCLogResponse& from);
  void MergeFrom(const ShowCLogResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dos.ContainerLog logs = 1;
  inline int logs_size() const;
  inline void clear_logs();
  static const int kLogsFieldNumber = 1;
  inline const ::dos::ContainerLog& logs(int index) const;
  inline ::dos::ContainerLog* mutable_logs(int index);
  inline ::dos::ContainerLog* add_logs();
  inline const ::google::protobuf::RepeatedPtrField< ::dos::ContainerLog >&
      logs() const;
  inline ::google::protobuf::RepeatedPtrField< ::dos::ContainerLog >*
      mutable_logs();

  // optional .dos.RpcStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::dos::RpcStatus status() const;
  inline void set_status(::dos::RpcStatus value);

  // @@protoc_insertion_point(class_scope:dos.ShowCLogResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dos::ContainerLog > logs_;
  int status_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static ShowCLogResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetInitdRequest : public ::google::protobuf::Message {
 public:
  GetInitdRequest();
  virtual ~GetInitdRequest();

  GetInitdRequest(const GetInitdRequest& from);

  inline GetInitdRequest& operator=(const GetInitdRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInitdRequest& default_instance();

  void Swap(GetInitdRequest* other);

  // implements Message ----------------------------------------------

  GetInitdRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInitdRequest& from);
  void MergeFrom(const GetInitdRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:dos.GetInitdRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static GetInitdRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetInitdResponse : public ::google::protobuf::Message {
 public:
  GetInitdResponse();
  virtual ~GetInitdResponse();

  GetInitdResponse(const GetInitdResponse& from);

  inline GetInitdResponse& operator=(const GetInitdResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetInitdResponse& default_instance();

  void Swap(GetInitdResponse* other);

  // implements Message ----------------------------------------------

  GetInitdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetInitdResponse& from);
  void MergeFrom(const GetInitdResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pid = 1;
  inline bool has_pid() const;
  inline void clear_pid();
  static const int kPidFieldNumber = 1;
  inline ::google::protobuf::int32 pid() const;
  inline void set_pid(::google::protobuf::int32 value);

  // optional string endpoint = 2;
  inline bool has_endpoint() const;
  inline void clear_endpoint();
  static const int kEndpointFieldNumber = 2;
  inline const ::std::string& endpoint() const;
  inline void set_endpoint(const ::std::string& value);
  inline void set_endpoint(const char* value);
  inline void set_endpoint(const char* value, size_t size);
  inline ::std::string* mutable_endpoint();
  inline ::std::string* release_endpoint();
  inline void set_allocated_endpoint(::std::string* endpoint);

  // optional string rootfs = 3;
  inline bool has_rootfs() const;
  inline void clear_rootfs();
  static const int kRootfsFieldNumber = 3;
  inline const ::std::string& rootfs() const;
  inline void set_rootfs(const ::std::string& value);
  inline void set_rootfs(const char* value);
  inline void set_rootfs(const char* value, size_t size);
  inline ::std::string* mutable_rootfs();
  inline ::std::string* release_rootfs();
  inline void set_allocated_rootfs(::std::string* rootfs);

  // optional .dos.RpcStatus status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::dos::RpcStatus status() const;
  inline void set_status(::dos::RpcStatus value);

  // @@protoc_insertion_point(class_scope:dos.GetInitdResponse)
 private:
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_endpoint();
  inline void clear_has_endpoint();
  inline void set_has_rootfs();
  inline void clear_has_rootfs();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* endpoint_;
  ::google::protobuf::int32 pid_;
  int status_;
  ::std::string* rootfs_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static GetInitdResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateContainerRequest : public ::google::protobuf::Message {
 public:
  UpdateContainerRequest();
  virtual ~UpdateContainerRequest();

  UpdateContainerRequest(const UpdateContainerRequest& from);

  inline UpdateContainerRequest& operator=(const UpdateContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateContainerRequest& default_instance();

  void Swap(UpdateContainerRequest* other);

  // implements Message ----------------------------------------------

  UpdateContainerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateContainerRequest& from);
  void MergeFrom(const UpdateContainerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dos.UpdateContainerRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static UpdateContainerRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateContainerResponse : public ::google::protobuf::Message {
 public:
  UpdateContainerResponse();
  virtual ~UpdateContainerResponse();

  UpdateContainerResponse(const UpdateContainerResponse& from);

  inline UpdateContainerResponse& operator=(const UpdateContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateContainerResponse& default_instance();

  void Swap(UpdateContainerResponse* other);

  // implements Message ----------------------------------------------

  UpdateContainerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateContainerResponse& from);
  void MergeFrom(const UpdateContainerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dos.UpdateContainerResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static UpdateContainerResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteContainerRequest : public ::google::protobuf::Message {
 public:
  DeleteContainerRequest();
  virtual ~DeleteContainerRequest();

  DeleteContainerRequest(const DeleteContainerRequest& from);

  inline DeleteContainerRequest& operator=(const DeleteContainerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteContainerRequest& default_instance();

  void Swap(DeleteContainerRequest* other);

  // implements Message ----------------------------------------------

  DeleteContainerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteContainerRequest& from);
  void MergeFrom(const DeleteContainerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:dos.DeleteContainerRequest)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static DeleteContainerRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteContainerResponse : public ::google::protobuf::Message {
 public:
  DeleteContainerResponse();
  virtual ~DeleteContainerResponse();

  DeleteContainerResponse(const DeleteContainerResponse& from);

  inline DeleteContainerResponse& operator=(const DeleteContainerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteContainerResponse& default_instance();

  void Swap(DeleteContainerResponse* other);

  // implements Message ----------------------------------------------

  DeleteContainerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteContainerResponse& from);
  void MergeFrom(const DeleteContainerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dos.RpcStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::dos::RpcStatus status() const;
  inline void set_status(::dos::RpcStatus value);

  // @@protoc_insertion_point(class_scope:dos.DeleteContainerResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int status_;
  friend void  protobuf_AddDesc_engine_2eproto();
  friend void protobuf_AssignDesc_engine_2eproto();
  friend void protobuf_ShutdownFile_engine_2eproto();

  void InitAsDefaultInstance();
  static DeleteContainerResponse* default_instance_;
};
// ===================================================================

class Engine_Stub;

class Engine : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Engine() {};
 public:
  virtual ~Engine();

  typedef Engine_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void RunContainer(::google::protobuf::RpcController* controller,
                       const ::dos::RunContainerRequest* request,
                       ::dos::RunContainerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowContainer(::google::protobuf::RpcController* controller,
                       const ::dos::ShowContainerRequest* request,
                       ::dos::ShowContainerResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowCLog(::google::protobuf::RpcController* controller,
                       const ::dos::ShowCLogRequest* request,
                       ::dos::ShowCLogResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetInitd(::google::protobuf::RpcController* controller,
                       const ::dos::GetInitdRequest* request,
                       ::dos::GetInitdResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteContainer(::google::protobuf::RpcController* controller,
                       const ::dos::DeleteContainerRequest* request,
                       ::dos::DeleteContainerResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Engine);
};

class Engine_Stub : public Engine {
 public:
  Engine_Stub(::google::protobuf::RpcChannel* channel);
  Engine_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Engine_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Engine ------------------------------------------

  void RunContainer(::google::protobuf::RpcController* controller,
                       const ::dos::RunContainerRequest* request,
                       ::dos::RunContainerResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowContainer(::google::protobuf::RpcController* controller,
                       const ::dos::ShowContainerRequest* request,
                       ::dos::ShowContainerResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowCLog(::google::protobuf::RpcController* controller,
                       const ::dos::ShowCLogRequest* request,
                       ::dos::ShowCLogResponse* response,
                       ::google::protobuf::Closure* done);
  void GetInitd(::google::protobuf::RpcController* controller,
                       const ::dos::GetInitdRequest* request,
                       ::dos::GetInitdResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteContainer(::google::protobuf::RpcController* controller,
                       const ::dos::DeleteContainerRequest* request,
                       ::dos::DeleteContainerResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Engine_Stub);
};


// ===================================================================


// ===================================================================

// RunContainerRequest

// optional string name = 1;
inline bool RunContainerRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunContainerRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunContainerRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunContainerRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RunContainerRequest::name() const {
  // @@protoc_insertion_point(field_get:dos.RunContainerRequest.name)
  return *name_;
}
inline void RunContainerRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:dos.RunContainerRequest.name)
}
inline void RunContainerRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dos.RunContainerRequest.name)
}
inline void RunContainerRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dos.RunContainerRequest.name)
}
inline ::std::string* RunContainerRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dos.RunContainerRequest.name)
  return name_;
}
inline ::std::string* RunContainerRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RunContainerRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dos.RunContainerRequest.name)
}

// optional .dos.Container container = 2;
inline bool RunContainerRequest::has_container() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunContainerRequest::set_has_container() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunContainerRequest::clear_has_container() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunContainerRequest::clear_container() {
  if (container_ != NULL) container_->::dos::Container::Clear();
  clear_has_container();
}
inline const ::dos::Container& RunContainerRequest::container() const {
  // @@protoc_insertion_point(field_get:dos.RunContainerRequest.container)
  return container_ != NULL ? *container_ : *default_instance_->container_;
}
inline ::dos::Container* RunContainerRequest::mutable_container() {
  set_has_container();
  if (container_ == NULL) container_ = new ::dos::Container;
  // @@protoc_insertion_point(field_mutable:dos.RunContainerRequest.container)
  return container_;
}
inline ::dos::Container* RunContainerRequest::release_container() {
  clear_has_container();
  ::dos::Container* temp = container_;
  container_ = NULL;
  return temp;
}
inline void RunContainerRequest::set_allocated_container(::dos::Container* container) {
  delete container_;
  container_ = container;
  if (container) {
    set_has_container();
  } else {
    clear_has_container();
  }
  // @@protoc_insertion_point(field_set_allocated:dos.RunContainerRequest.container)
}

// -------------------------------------------------------------------

// RunContainerResponse

// optional .dos.RpcStatus status = 1;
inline bool RunContainerResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunContainerResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunContainerResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunContainerResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::dos::RpcStatus RunContainerResponse::status() const {
  // @@protoc_insertion_point(field_get:dos.RunContainerResponse.status)
  return static_cast< ::dos::RpcStatus >(status_);
}
inline void RunContainerResponse::set_status(::dos::RpcStatus value) {
  assert(::dos::RpcStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dos.RunContainerResponse.status)
}

// -------------------------------------------------------------------

// ContainerOverview

// optional string name = 1;
inline bool ContainerOverview::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ContainerOverview::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ContainerOverview::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ContainerOverview::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ContainerOverview::name() const {
  // @@protoc_insertion_point(field_get:dos.ContainerOverview.name)
  return *name_;
}
inline void ContainerOverview::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:dos.ContainerOverview.name)
}
inline void ContainerOverview::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dos.ContainerOverview.name)
}
inline void ContainerOverview::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dos.ContainerOverview.name)
}
inline ::std::string* ContainerOverview::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dos.ContainerOverview.name)
  return name_;
}
inline ::std::string* ContainerOverview::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ContainerOverview::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dos.ContainerOverview.name)
}

// optional int64 start_time = 2;
inline bool ContainerOverview::has_start_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContainerOverview::set_has_start_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContainerOverview::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContainerOverview::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 ContainerOverview::start_time() const {
  // @@protoc_insertion_point(field_get:dos.ContainerOverview.start_time)
  return start_time_;
}
inline void ContainerOverview::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:dos.ContainerOverview.start_time)
}

// optional .dos.ContainerState state = 3;
inline bool ContainerOverview::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ContainerOverview::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ContainerOverview::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ContainerOverview::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::dos::ContainerState ContainerOverview::state() const {
  // @@protoc_insertion_point(field_get:dos.ContainerOverview.state)
  return static_cast< ::dos::ContainerState >(state_);
}
inline void ContainerOverview::set_state(::dos::ContainerState value) {
  assert(::dos::ContainerState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:dos.ContainerOverview.state)
}

// optional .dos.ContainerType type = 4;
inline bool ContainerOverview::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ContainerOverview::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ContainerOverview::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ContainerOverview::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::dos::ContainerType ContainerOverview::type() const {
  // @@protoc_insertion_point(field_get:dos.ContainerOverview.type)
  return static_cast< ::dos::ContainerType >(type_);
}
inline void ContainerOverview::set_type(::dos::ContainerType value) {
  assert(::dos::ContainerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:dos.ContainerOverview.type)
}

// optional int64 boot_time = 5;
inline bool ContainerOverview::has_boot_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ContainerOverview::set_has_boot_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ContainerOverview::clear_has_boot_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ContainerOverview::clear_boot_time() {
  boot_time_ = GOOGLE_LONGLONG(0);
  clear_has_boot_time();
}
inline ::google::protobuf::int64 ContainerOverview::boot_time() const {
  // @@protoc_insertion_point(field_get:dos.ContainerOverview.boot_time)
  return boot_time_;
}
inline void ContainerOverview::set_boot_time(::google::protobuf::int64 value) {
  set_has_boot_time();
  boot_time_ = value;
  // @@protoc_insertion_point(field_set:dos.ContainerOverview.boot_time)
}

// -------------------------------------------------------------------

// ShowContainerRequest

// repeated string names = 1;
inline int ShowContainerRequest::names_size() const {
  return names_.size();
}
inline void ShowContainerRequest::clear_names() {
  names_.Clear();
}
inline const ::std::string& ShowContainerRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:dos.ShowContainerRequest.names)
  return names_.Get(index);
}
inline ::std::string* ShowContainerRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:dos.ShowContainerRequest.names)
  return names_.Mutable(index);
}
inline void ShowContainerRequest::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dos.ShowContainerRequest.names)
  names_.Mutable(index)->assign(value);
}
inline void ShowContainerRequest::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dos.ShowContainerRequest.names)
}
inline void ShowContainerRequest::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dos.ShowContainerRequest.names)
}
inline ::std::string* ShowContainerRequest::add_names() {
  return names_.Add();
}
inline void ShowContainerRequest::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dos.ShowContainerRequest.names)
}
inline void ShowContainerRequest::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dos.ShowContainerRequest.names)
}
inline void ShowContainerRequest::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dos.ShowContainerRequest.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShowContainerRequest::names() const {
  // @@protoc_insertion_point(field_list:dos.ShowContainerRequest.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ShowContainerRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:dos.ShowContainerRequest.names)
  return &names_;
}

// -------------------------------------------------------------------

// ShowContainerResponse

// optional .dos.RpcStatus status = 1;
inline bool ShowContainerResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowContainerResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowContainerResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowContainerResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::dos::RpcStatus ShowContainerResponse::status() const {
  // @@protoc_insertion_point(field_get:dos.ShowContainerResponse.status)
  return static_cast< ::dos::RpcStatus >(status_);
}
inline void ShowContainerResponse::set_status(::dos::RpcStatus value) {
  assert(::dos::RpcStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dos.ShowContainerResponse.status)
}

// repeated .dos.ContainerOverview containers = 2;
inline int ShowContainerResponse::containers_size() const {
  return containers_.size();
}
inline void ShowContainerResponse::clear_containers() {
  containers_.Clear();
}
inline const ::dos::ContainerOverview& ShowContainerResponse::containers(int index) const {
  // @@protoc_insertion_point(field_get:dos.ShowContainerResponse.containers)
  return containers_.Get(index);
}
inline ::dos::ContainerOverview* ShowContainerResponse::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:dos.ShowContainerResponse.containers)
  return containers_.Mutable(index);
}
inline ::dos::ContainerOverview* ShowContainerResponse::add_containers() {
  // @@protoc_insertion_point(field_add:dos.ShowContainerResponse.containers)
  return containers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dos::ContainerOverview >&
ShowContainerResponse::containers() const {
  // @@protoc_insertion_point(field_list:dos.ShowContainerResponse.containers)
  return containers_;
}
inline ::google::protobuf::RepeatedPtrField< ::dos::ContainerOverview >*
ShowContainerResponse::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:dos.ShowContainerResponse.containers)
  return &containers_;
}

// -------------------------------------------------------------------

// ShowCLogRequest

// optional string name = 1;
inline bool ShowCLogRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowCLogRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowCLogRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowCLogRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ShowCLogRequest::name() const {
  // @@protoc_insertion_point(field_get:dos.ShowCLogRequest.name)
  return *name_;
}
inline void ShowCLogRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:dos.ShowCLogRequest.name)
}
inline void ShowCLogRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dos.ShowCLogRequest.name)
}
inline void ShowCLogRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dos.ShowCLogRequest.name)
}
inline ::std::string* ShowCLogRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dos.ShowCLogRequest.name)
  return name_;
}
inline ::std::string* ShowCLogRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShowCLogRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dos.ShowCLogRequest.name)
}

// -------------------------------------------------------------------

// ShowCLogResponse

// repeated .dos.ContainerLog logs = 1;
inline int ShowCLogResponse::logs_size() const {
  return logs_.size();
}
inline void ShowCLogResponse::clear_logs() {
  logs_.Clear();
}
inline const ::dos::ContainerLog& ShowCLogResponse::logs(int index) const {
  // @@protoc_insertion_point(field_get:dos.ShowCLogResponse.logs)
  return logs_.Get(index);
}
inline ::dos::ContainerLog* ShowCLogResponse::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:dos.ShowCLogResponse.logs)
  return logs_.Mutable(index);
}
inline ::dos::ContainerLog* ShowCLogResponse::add_logs() {
  // @@protoc_insertion_point(field_add:dos.ShowCLogResponse.logs)
  return logs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dos::ContainerLog >&
ShowCLogResponse::logs() const {
  // @@protoc_insertion_point(field_list:dos.ShowCLogResponse.logs)
  return logs_;
}
inline ::google::protobuf::RepeatedPtrField< ::dos::ContainerLog >*
ShowCLogResponse::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:dos.ShowCLogResponse.logs)
  return &logs_;
}

// optional .dos.RpcStatus status = 2;
inline bool ShowCLogResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowCLogResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowCLogResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowCLogResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::dos::RpcStatus ShowCLogResponse::status() const {
  // @@protoc_insertion_point(field_get:dos.ShowCLogResponse.status)
  return static_cast< ::dos::RpcStatus >(status_);
}
inline void ShowCLogResponse::set_status(::dos::RpcStatus value) {
  assert(::dos::RpcStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dos.ShowCLogResponse.status)
}

// -------------------------------------------------------------------

// GetInitdRequest

// optional string name = 1;
inline bool GetInitdRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetInitdRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetInitdRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetInitdRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GetInitdRequest::name() const {
  // @@protoc_insertion_point(field_get:dos.GetInitdRequest.name)
  return *name_;
}
inline void GetInitdRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:dos.GetInitdRequest.name)
}
inline void GetInitdRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dos.GetInitdRequest.name)
}
inline void GetInitdRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dos.GetInitdRequest.name)
}
inline ::std::string* GetInitdRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dos.GetInitdRequest.name)
  return name_;
}
inline ::std::string* GetInitdRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetInitdRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dos.GetInitdRequest.name)
}

// -------------------------------------------------------------------

// GetInitdResponse

// optional int32 pid = 1;
inline bool GetInitdResponse::has_pid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetInitdResponse::set_has_pid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetInitdResponse::clear_has_pid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetInitdResponse::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 GetInitdResponse::pid() const {
  // @@protoc_insertion_point(field_get:dos.GetInitdResponse.pid)
  return pid_;
}
inline void GetInitdResponse::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:dos.GetInitdResponse.pid)
}

// optional string endpoint = 2;
inline bool GetInitdResponse::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetInitdResponse::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetInitdResponse::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetInitdResponse::clear_endpoint() {
  if (endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endpoint_->clear();
  }
  clear_has_endpoint();
}
inline const ::std::string& GetInitdResponse::endpoint() const {
  // @@protoc_insertion_point(field_get:dos.GetInitdResponse.endpoint)
  return *endpoint_;
}
inline void GetInitdResponse::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endpoint_ = new ::std::string;
  }
  endpoint_->assign(value);
  // @@protoc_insertion_point(field_set:dos.GetInitdResponse.endpoint)
}
inline void GetInitdResponse::set_endpoint(const char* value) {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endpoint_ = new ::std::string;
  }
  endpoint_->assign(value);
  // @@protoc_insertion_point(field_set_char:dos.GetInitdResponse.endpoint)
}
inline void GetInitdResponse::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endpoint_ = new ::std::string;
  }
  endpoint_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dos.GetInitdResponse.endpoint)
}
inline ::std::string* GetInitdResponse::mutable_endpoint() {
  set_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endpoint_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dos.GetInitdResponse.endpoint)
  return endpoint_;
}
inline ::std::string* GetInitdResponse::release_endpoint() {
  clear_has_endpoint();
  if (endpoint_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endpoint_;
    endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetInitdResponse::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endpoint_;
  }
  if (endpoint) {
    set_has_endpoint();
    endpoint_ = endpoint;
  } else {
    clear_has_endpoint();
    endpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dos.GetInitdResponse.endpoint)
}

// optional string rootfs = 3;
inline bool GetInitdResponse::has_rootfs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetInitdResponse::set_has_rootfs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetInitdResponse::clear_has_rootfs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetInitdResponse::clear_rootfs() {
  if (rootfs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rootfs_->clear();
  }
  clear_has_rootfs();
}
inline const ::std::string& GetInitdResponse::rootfs() const {
  // @@protoc_insertion_point(field_get:dos.GetInitdResponse.rootfs)
  return *rootfs_;
}
inline void GetInitdResponse::set_rootfs(const ::std::string& value) {
  set_has_rootfs();
  if (rootfs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rootfs_ = new ::std::string;
  }
  rootfs_->assign(value);
  // @@protoc_insertion_point(field_set:dos.GetInitdResponse.rootfs)
}
inline void GetInitdResponse::set_rootfs(const char* value) {
  set_has_rootfs();
  if (rootfs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rootfs_ = new ::std::string;
  }
  rootfs_->assign(value);
  // @@protoc_insertion_point(field_set_char:dos.GetInitdResponse.rootfs)
}
inline void GetInitdResponse::set_rootfs(const char* value, size_t size) {
  set_has_rootfs();
  if (rootfs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rootfs_ = new ::std::string;
  }
  rootfs_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dos.GetInitdResponse.rootfs)
}
inline ::std::string* GetInitdResponse::mutable_rootfs() {
  set_has_rootfs();
  if (rootfs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rootfs_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dos.GetInitdResponse.rootfs)
  return rootfs_;
}
inline ::std::string* GetInitdResponse::release_rootfs() {
  clear_has_rootfs();
  if (rootfs_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rootfs_;
    rootfs_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetInitdResponse::set_allocated_rootfs(::std::string* rootfs) {
  if (rootfs_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rootfs_;
  }
  if (rootfs) {
    set_has_rootfs();
    rootfs_ = rootfs;
  } else {
    clear_has_rootfs();
    rootfs_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dos.GetInitdResponse.rootfs)
}

// optional .dos.RpcStatus status = 4;
inline bool GetInitdResponse::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetInitdResponse::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetInitdResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetInitdResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::dos::RpcStatus GetInitdResponse::status() const {
  // @@protoc_insertion_point(field_get:dos.GetInitdResponse.status)
  return static_cast< ::dos::RpcStatus >(status_);
}
inline void GetInitdResponse::set_status(::dos::RpcStatus value) {
  assert(::dos::RpcStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dos.GetInitdResponse.status)
}

// -------------------------------------------------------------------

// UpdateContainerRequest

// -------------------------------------------------------------------

// UpdateContainerResponse

// -------------------------------------------------------------------

// DeleteContainerRequest

// optional string name = 1;
inline bool DeleteContainerRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteContainerRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteContainerRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteContainerRequest::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DeleteContainerRequest::name() const {
  // @@protoc_insertion_point(field_get:dos.DeleteContainerRequest.name)
  return *name_;
}
inline void DeleteContainerRequest::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:dos.DeleteContainerRequest.name)
}
inline void DeleteContainerRequest::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:dos.DeleteContainerRequest.name)
}
inline void DeleteContainerRequest::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dos.DeleteContainerRequest.name)
}
inline ::std::string* DeleteContainerRequest::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:dos.DeleteContainerRequest.name)
  return name_;
}
inline ::std::string* DeleteContainerRequest::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeleteContainerRequest::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:dos.DeleteContainerRequest.name)
}

// -------------------------------------------------------------------

// DeleteContainerResponse

// optional .dos.RpcStatus status = 2;
inline bool DeleteContainerResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteContainerResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteContainerResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteContainerResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::dos::RpcStatus DeleteContainerResponse::status() const {
  // @@protoc_insertion_point(field_get:dos.DeleteContainerResponse.status)
  return static_cast< ::dos::RpcStatus >(status_);
}
inline void DeleteContainerResponse::set_status(::dos::RpcStatus value) {
  assert(::dos::RpcStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dos.DeleteContainerResponse.status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_engine_2eproto__INCLUDED
