// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: initd.proto

#ifndef PROTOBUF_initd_2eproto__INCLUDED
#define PROTOBUF_initd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "dos.pb.h"
// @@protoc_insertion_point(includes)

namespace dos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_initd_2eproto();
void protobuf_AssignDesc_initd_2eproto();
void protobuf_ShutdownFile_initd_2eproto();

class ForkRequest;
class ForkResponse;
class WaitRequest;
class WaitResponse;
class KillRequest;
class KillResponse;
class StatusRequest;
class StatusResponse;

// ===================================================================

class ForkRequest : public ::google::protobuf::Message {
 public:
  ForkRequest();
  virtual ~ForkRequest();

  ForkRequest(const ForkRequest& from);

  inline ForkRequest& operator=(const ForkRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForkRequest& default_instance();

  void Swap(ForkRequest* other);

  // implements Message ----------------------------------------------

  ForkRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForkRequest& from);
  void MergeFrom(const ForkRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dos.Process process = 1;
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 1;
  inline const ::dos::Process& process() const;
  inline ::dos::Process* mutable_process();
  inline ::dos::Process* release_process();
  inline void set_allocated_process(::dos::Process* process);

  // @@protoc_insertion_point(class_scope:dos.ForkRequest)
 private:
  inline void set_has_process();
  inline void clear_has_process();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::dos::Process* process_;
  friend void  protobuf_AddDesc_initd_2eproto();
  friend void protobuf_AssignDesc_initd_2eproto();
  friend void protobuf_ShutdownFile_initd_2eproto();

  void InitAsDefaultInstance();
  static ForkRequest* default_instance_;
};
// -------------------------------------------------------------------

class ForkResponse : public ::google::protobuf::Message {
 public:
  ForkResponse();
  virtual ~ForkResponse();

  ForkResponse(const ForkResponse& from);

  inline ForkResponse& operator=(const ForkResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForkResponse& default_instance();

  void Swap(ForkResponse* other);

  // implements Message ----------------------------------------------

  ForkResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForkResponse& from);
  void MergeFrom(const ForkResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dos.RpcStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::dos::RpcStatus status() const;
  inline void set_status(::dos::RpcStatus value);

  // @@protoc_insertion_point(class_scope:dos.ForkResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int status_;
  friend void  protobuf_AddDesc_initd_2eproto();
  friend void protobuf_AssignDesc_initd_2eproto();
  friend void protobuf_ShutdownFile_initd_2eproto();

  void InitAsDefaultInstance();
  static ForkResponse* default_instance_;
};
// -------------------------------------------------------------------

class WaitRequest : public ::google::protobuf::Message {
 public:
  WaitRequest();
  virtual ~WaitRequest();

  WaitRequest(const WaitRequest& from);

  inline WaitRequest& operator=(const WaitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaitRequest& default_instance();

  void Swap(WaitRequest* other);

  // implements Message ----------------------------------------------

  WaitRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaitRequest& from);
  void MergeFrom(const WaitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 1;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:dos.WaitRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  friend void  protobuf_AddDesc_initd_2eproto();
  friend void protobuf_AssignDesc_initd_2eproto();
  friend void protobuf_ShutdownFile_initd_2eproto();

  void InitAsDefaultInstance();
  static WaitRequest* default_instance_;
};
// -------------------------------------------------------------------

class WaitResponse : public ::google::protobuf::Message {
 public:
  WaitResponse();
  virtual ~WaitResponse();

  WaitResponse(const WaitResponse& from);

  inline WaitResponse& operator=(const WaitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WaitResponse& default_instance();

  void Swap(WaitResponse* other);

  // implements Message ----------------------------------------------

  WaitResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WaitResponse& from);
  void MergeFrom(const WaitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dos.Process processes = 1;
  inline int processes_size() const;
  inline void clear_processes();
  static const int kProcessesFieldNumber = 1;
  inline const ::dos::Process& processes(int index) const;
  inline ::dos::Process* mutable_processes(int index);
  inline ::dos::Process* add_processes();
  inline const ::google::protobuf::RepeatedPtrField< ::dos::Process >&
      processes() const;
  inline ::google::protobuf::RepeatedPtrField< ::dos::Process >*
      mutable_processes();

  // optional .dos.RpcStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::dos::RpcStatus status() const;
  inline void set_status(::dos::RpcStatus value);

  // @@protoc_insertion_point(class_scope:dos.WaitResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dos::Process > processes_;
  int status_;
  friend void  protobuf_AddDesc_initd_2eproto();
  friend void protobuf_AssignDesc_initd_2eproto();
  friend void protobuf_ShutdownFile_initd_2eproto();

  void InitAsDefaultInstance();
  static WaitResponse* default_instance_;
};
// -------------------------------------------------------------------

class KillRequest : public ::google::protobuf::Message {
 public:
  KillRequest();
  virtual ~KillRequest();

  KillRequest(const KillRequest& from);

  inline KillRequest& operator=(const KillRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KillRequest& default_instance();

  void Swap(KillRequest* other);

  // implements Message ----------------------------------------------

  KillRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KillRequest& from);
  void MergeFrom(const KillRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string names = 1;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 1;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // optional int32 signal = 2;
  inline bool has_signal() const;
  inline void clear_signal();
  static const int kSignalFieldNumber = 2;
  inline ::google::protobuf::int32 signal() const;
  inline void set_signal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dos.KillRequest)
 private:
  inline void set_has_signal();
  inline void clear_has_signal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::int32 signal_;
  friend void  protobuf_AddDesc_initd_2eproto();
  friend void protobuf_AssignDesc_initd_2eproto();
  friend void protobuf_ShutdownFile_initd_2eproto();

  void InitAsDefaultInstance();
  static KillRequest* default_instance_;
};
// -------------------------------------------------------------------

class KillResponse : public ::google::protobuf::Message {
 public:
  KillResponse();
  virtual ~KillResponse();

  KillResponse(const KillResponse& from);

  inline KillResponse& operator=(const KillResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KillResponse& default_instance();

  void Swap(KillResponse* other);

  // implements Message ----------------------------------------------

  KillResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KillResponse& from);
  void MergeFrom(const KillResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dos.RpcStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::dos::RpcStatus status() const;
  inline void set_status(::dos::RpcStatus value);

  // @@protoc_insertion_point(class_scope:dos.KillResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int status_;
  friend void  protobuf_AddDesc_initd_2eproto();
  friend void protobuf_AssignDesc_initd_2eproto();
  friend void protobuf_ShutdownFile_initd_2eproto();

  void InitAsDefaultInstance();
  static KillResponse* default_instance_;
};
// -------------------------------------------------------------------

class StatusRequest : public ::google::protobuf::Message {
 public:
  StatusRequest();
  virtual ~StatusRequest();

  StatusRequest(const StatusRequest& from);

  inline StatusRequest& operator=(const StatusRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusRequest& default_instance();

  void Swap(StatusRequest* other);

  // implements Message ----------------------------------------------

  StatusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusRequest& from);
  void MergeFrom(const StatusRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dos.StatusRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_initd_2eproto();
  friend void protobuf_AssignDesc_initd_2eproto();
  friend void protobuf_ShutdownFile_initd_2eproto();

  void InitAsDefaultInstance();
  static StatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class StatusResponse : public ::google::protobuf::Message {
 public:
  StatusResponse();
  virtual ~StatusResponse();

  StatusResponse(const StatusResponse& from);

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusResponse& default_instance();

  void Swap(StatusResponse* other);

  // implements Message ----------------------------------------------

  StatusResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusResponse& from);
  void MergeFrom(const StatusResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dos.RpcStatus status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::dos::RpcStatus status() const;
  inline void set_status(::dos::RpcStatus value);

  // @@protoc_insertion_point(class_scope:dos.StatusResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int status_;
  friend void  protobuf_AddDesc_initd_2eproto();
  friend void protobuf_AssignDesc_initd_2eproto();
  friend void protobuf_ShutdownFile_initd_2eproto();

  void InitAsDefaultInstance();
  static StatusResponse* default_instance_;
};
// ===================================================================

class Initd_Stub;

class Initd : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Initd() {};
 public:
  virtual ~Initd();

  typedef Initd_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Fork(::google::protobuf::RpcController* controller,
                       const ::dos::ForkRequest* request,
                       ::dos::ForkResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Wait(::google::protobuf::RpcController* controller,
                       const ::dos::WaitRequest* request,
                       ::dos::WaitResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Kill(::google::protobuf::RpcController* controller,
                       const ::dos::KillRequest* request,
                       ::dos::KillResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Status(::google::protobuf::RpcController* controller,
                       const ::dos::StatusRequest* request,
                       ::dos::StatusResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Initd);
};

class Initd_Stub : public Initd {
 public:
  Initd_Stub(::google::protobuf::RpcChannel* channel);
  Initd_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Initd_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Initd ------------------------------------------

  void Fork(::google::protobuf::RpcController* controller,
                       const ::dos::ForkRequest* request,
                       ::dos::ForkResponse* response,
                       ::google::protobuf::Closure* done);
  void Wait(::google::protobuf::RpcController* controller,
                       const ::dos::WaitRequest* request,
                       ::dos::WaitResponse* response,
                       ::google::protobuf::Closure* done);
  void Kill(::google::protobuf::RpcController* controller,
                       const ::dos::KillRequest* request,
                       ::dos::KillResponse* response,
                       ::google::protobuf::Closure* done);
  void Status(::google::protobuf::RpcController* controller,
                       const ::dos::StatusRequest* request,
                       ::dos::StatusResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Initd_Stub);
};


// ===================================================================


// ===================================================================

// ForkRequest

// optional .dos.Process process = 1;
inline bool ForkRequest::has_process() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForkRequest::set_has_process() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForkRequest::clear_has_process() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForkRequest::clear_process() {
  if (process_ != NULL) process_->::dos::Process::Clear();
  clear_has_process();
}
inline const ::dos::Process& ForkRequest::process() const {
  // @@protoc_insertion_point(field_get:dos.ForkRequest.process)
  return process_ != NULL ? *process_ : *default_instance_->process_;
}
inline ::dos::Process* ForkRequest::mutable_process() {
  set_has_process();
  if (process_ == NULL) process_ = new ::dos::Process;
  // @@protoc_insertion_point(field_mutable:dos.ForkRequest.process)
  return process_;
}
inline ::dos::Process* ForkRequest::release_process() {
  clear_has_process();
  ::dos::Process* temp = process_;
  process_ = NULL;
  return temp;
}
inline void ForkRequest::set_allocated_process(::dos::Process* process) {
  delete process_;
  process_ = process;
  if (process) {
    set_has_process();
  } else {
    clear_has_process();
  }
  // @@protoc_insertion_point(field_set_allocated:dos.ForkRequest.process)
}

// -------------------------------------------------------------------

// ForkResponse

// optional .dos.RpcStatus status = 1;
inline bool ForkResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForkResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForkResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForkResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::dos::RpcStatus ForkResponse::status() const {
  // @@protoc_insertion_point(field_get:dos.ForkResponse.status)
  return static_cast< ::dos::RpcStatus >(status_);
}
inline void ForkResponse::set_status(::dos::RpcStatus value) {
  assert(::dos::RpcStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dos.ForkResponse.status)
}

// -------------------------------------------------------------------

// WaitRequest

// repeated string names = 1;
inline int WaitRequest::names_size() const {
  return names_.size();
}
inline void WaitRequest::clear_names() {
  names_.Clear();
}
inline const ::std::string& WaitRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:dos.WaitRequest.names)
  return names_.Get(index);
}
inline ::std::string* WaitRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:dos.WaitRequest.names)
  return names_.Mutable(index);
}
inline void WaitRequest::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dos.WaitRequest.names)
  names_.Mutable(index)->assign(value);
}
inline void WaitRequest::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dos.WaitRequest.names)
}
inline void WaitRequest::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dos.WaitRequest.names)
}
inline ::std::string* WaitRequest::add_names() {
  return names_.Add();
}
inline void WaitRequest::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dos.WaitRequest.names)
}
inline void WaitRequest::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dos.WaitRequest.names)
}
inline void WaitRequest::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dos.WaitRequest.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WaitRequest::names() const {
  // @@protoc_insertion_point(field_list:dos.WaitRequest.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WaitRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:dos.WaitRequest.names)
  return &names_;
}

// -------------------------------------------------------------------

// WaitResponse

// repeated .dos.Process processes = 1;
inline int WaitResponse::processes_size() const {
  return processes_.size();
}
inline void WaitResponse::clear_processes() {
  processes_.Clear();
}
inline const ::dos::Process& WaitResponse::processes(int index) const {
  // @@protoc_insertion_point(field_get:dos.WaitResponse.processes)
  return processes_.Get(index);
}
inline ::dos::Process* WaitResponse::mutable_processes(int index) {
  // @@protoc_insertion_point(field_mutable:dos.WaitResponse.processes)
  return processes_.Mutable(index);
}
inline ::dos::Process* WaitResponse::add_processes() {
  // @@protoc_insertion_point(field_add:dos.WaitResponse.processes)
  return processes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dos::Process >&
WaitResponse::processes() const {
  // @@protoc_insertion_point(field_list:dos.WaitResponse.processes)
  return processes_;
}
inline ::google::protobuf::RepeatedPtrField< ::dos::Process >*
WaitResponse::mutable_processes() {
  // @@protoc_insertion_point(field_mutable_list:dos.WaitResponse.processes)
  return &processes_;
}

// optional .dos.RpcStatus status = 2;
inline bool WaitResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WaitResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WaitResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WaitResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::dos::RpcStatus WaitResponse::status() const {
  // @@protoc_insertion_point(field_get:dos.WaitResponse.status)
  return static_cast< ::dos::RpcStatus >(status_);
}
inline void WaitResponse::set_status(::dos::RpcStatus value) {
  assert(::dos::RpcStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dos.WaitResponse.status)
}

// -------------------------------------------------------------------

// KillRequest

// repeated string names = 1;
inline int KillRequest::names_size() const {
  return names_.size();
}
inline void KillRequest::clear_names() {
  names_.Clear();
}
inline const ::std::string& KillRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:dos.KillRequest.names)
  return names_.Get(index);
}
inline ::std::string* KillRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:dos.KillRequest.names)
  return names_.Mutable(index);
}
inline void KillRequest::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dos.KillRequest.names)
  names_.Mutable(index)->assign(value);
}
inline void KillRequest::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dos.KillRequest.names)
}
inline void KillRequest::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dos.KillRequest.names)
}
inline ::std::string* KillRequest::add_names() {
  return names_.Add();
}
inline void KillRequest::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dos.KillRequest.names)
}
inline void KillRequest::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dos.KillRequest.names)
}
inline void KillRequest::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dos.KillRequest.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
KillRequest::names() const {
  // @@protoc_insertion_point(field_list:dos.KillRequest.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
KillRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:dos.KillRequest.names)
  return &names_;
}

// optional int32 signal = 2;
inline bool KillRequest::has_signal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KillRequest::set_has_signal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KillRequest::clear_has_signal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KillRequest::clear_signal() {
  signal_ = 0;
  clear_has_signal();
}
inline ::google::protobuf::int32 KillRequest::signal() const {
  // @@protoc_insertion_point(field_get:dos.KillRequest.signal)
  return signal_;
}
inline void KillRequest::set_signal(::google::protobuf::int32 value) {
  set_has_signal();
  signal_ = value;
  // @@protoc_insertion_point(field_set:dos.KillRequest.signal)
}

// -------------------------------------------------------------------

// KillResponse

// optional .dos.RpcStatus status = 1;
inline bool KillResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KillResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KillResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KillResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::dos::RpcStatus KillResponse::status() const {
  // @@protoc_insertion_point(field_get:dos.KillResponse.status)
  return static_cast< ::dos::RpcStatus >(status_);
}
inline void KillResponse::set_status(::dos::RpcStatus value) {
  assert(::dos::RpcStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dos.KillResponse.status)
}

// -------------------------------------------------------------------

// StatusRequest

// -------------------------------------------------------------------

// StatusResponse

// optional .dos.RpcStatus status = 1;
inline bool StatusResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::dos::RpcStatus StatusResponse::status() const {
  // @@protoc_insertion_point(field_get:dos.StatusResponse.status)
  return static_cast< ::dos::RpcStatus >(status_);
}
inline void StatusResponse::set_status(::dos::RpcStatus value) {
  assert(::dos::RpcStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:dos.StatusResponse.status)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dos

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_initd_2eproto__INCLUDED
