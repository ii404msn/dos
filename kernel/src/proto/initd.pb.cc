// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: initd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "initd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dos {

namespace {

const ::google::protobuf::Descriptor* ForkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForkRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForkResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForkResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* Initd_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_initd_2eproto() {
  protobuf_AddDesc_initd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "initd.proto");
  GOOGLE_CHECK(file != NULL);
  ForkRequest_descriptor_ = file->message_type(0);
  static const int ForkRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkRequest, process_),
  };
  ForkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForkRequest_descriptor_,
      ForkRequest::default_instance_,
      ForkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForkRequest));
  ForkResponse_descriptor_ = file->message_type(1);
  static const int ForkResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkResponse, status_),
  };
  ForkResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForkResponse_descriptor_,
      ForkResponse::default_instance_,
      ForkResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForkResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForkResponse));
  WaitRequest_descriptor_ = file->message_type(2);
  static const int WaitRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitRequest, names_),
  };
  WaitRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaitRequest_descriptor_,
      WaitRequest::default_instance_,
      WaitRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaitRequest));
  WaitResponse_descriptor_ = file->message_type(3);
  static const int WaitResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitResponse, processes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitResponse, status_),
  };
  WaitResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaitResponse_descriptor_,
      WaitResponse::default_instance_,
      WaitResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaitResponse));
  KillRequest_descriptor_ = file->message_type(4);
  static const int KillRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRequest, names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRequest, signal_),
  };
  KillRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillRequest_descriptor_,
      KillRequest::default_instance_,
      KillRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillRequest));
  KillResponse_descriptor_ = file->message_type(5);
  static const int KillResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillResponse, status_),
  };
  KillResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillResponse_descriptor_,
      KillResponse::default_instance_,
      KillResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillResponse));
  StatusRequest_descriptor_ = file->message_type(6);
  static const int StatusRequest_offsets_[1] = {
  };
  StatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusRequest_descriptor_,
      StatusRequest::default_instance_,
      StatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusRequest));
  StatusResponse_descriptor_ = file->message_type(7);
  static const int StatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, status_),
  };
  StatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusResponse_descriptor_,
      StatusResponse::default_instance_,
      StatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusResponse));
  Initd_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_initd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForkRequest_descriptor_, &ForkRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForkResponse_descriptor_, &ForkResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaitRequest_descriptor_, &WaitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaitResponse_descriptor_, &WaitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillRequest_descriptor_, &KillRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillResponse_descriptor_, &KillResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusRequest_descriptor_, &StatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusResponse_descriptor_, &StatusResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_initd_2eproto() {
  delete ForkRequest::default_instance_;
  delete ForkRequest_reflection_;
  delete ForkResponse::default_instance_;
  delete ForkResponse_reflection_;
  delete WaitRequest::default_instance_;
  delete WaitRequest_reflection_;
  delete WaitResponse::default_instance_;
  delete WaitResponse_reflection_;
  delete KillRequest::default_instance_;
  delete KillRequest_reflection_;
  delete KillResponse::default_instance_;
  delete KillResponse_reflection_;
  delete StatusRequest::default_instance_;
  delete StatusRequest_reflection_;
  delete StatusResponse::default_instance_;
  delete StatusResponse_reflection_;
}

void protobuf_AddDesc_initd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dos::protobuf_AddDesc_dos_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013initd.proto\022\003dos\032\tdos.proto\",\n\013ForkReq"
    "uest\022\035\n\007process\030\001 \001(\0132\014.dos.Process\".\n\014F"
    "orkResponse\022\036\n\006status\030\001 \001(\0162\016.dos.RpcSta"
    "tus\"\034\n\013WaitRequest\022\r\n\005names\030\001 \003(\t\"O\n\014Wai"
    "tResponse\022\037\n\tprocesses\030\001 \003(\0132\014.dos.Proce"
    "ss\022\036\n\006status\030\002 \001(\0162\016.dos.RpcStatus\",\n\013Ki"
    "llRequest\022\r\n\005names\030\001 \003(\t\022\016\n\006signal\030\002 \001(\005"
    "\".\n\014KillResponse\022\036\n\006status\030\001 \001(\0162\016.dos.R"
    "pcStatus\"\017\n\rStatusRequest\"0\n\016StatusRespo"
    "nse\022\036\n\006status\030\001 \001(\0162\016.dos.RpcStatus2\301\001\n\005"
    "Initd\022+\n\004Fork\022\020.dos.ForkRequest\032\021.dos.Fo"
    "rkResponse\022+\n\004Wait\022\020.dos.WaitRequest\032\021.d"
    "os.WaitResponse\022+\n\004Kill\022\020.dos.KillReques"
    "t\032\021.dos.KillResponse\0221\n\006Status\022\022.dos.Sta"
    "tusRequest\032\023.dos.StatusResponseB\006\200\001\001\220\001\001", 599);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "initd.proto", &protobuf_RegisterTypes);
  ForkRequest::default_instance_ = new ForkRequest();
  ForkResponse::default_instance_ = new ForkResponse();
  WaitRequest::default_instance_ = new WaitRequest();
  WaitResponse::default_instance_ = new WaitResponse();
  KillRequest::default_instance_ = new KillRequest();
  KillResponse::default_instance_ = new KillResponse();
  StatusRequest::default_instance_ = new StatusRequest();
  StatusResponse::default_instance_ = new StatusResponse();
  ForkRequest::default_instance_->InitAsDefaultInstance();
  ForkResponse::default_instance_->InitAsDefaultInstance();
  WaitRequest::default_instance_->InitAsDefaultInstance();
  WaitResponse::default_instance_->InitAsDefaultInstance();
  KillRequest::default_instance_->InitAsDefaultInstance();
  KillResponse::default_instance_->InitAsDefaultInstance();
  StatusRequest::default_instance_->InitAsDefaultInstance();
  StatusResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_initd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_initd_2eproto {
  StaticDescriptorInitializer_initd_2eproto() {
    protobuf_AddDesc_initd_2eproto();
  }
} static_descriptor_initializer_initd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ForkRequest::kProcessFieldNumber;
#endif  // !_MSC_VER

ForkRequest::ForkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.ForkRequest)
}

void ForkRequest::InitAsDefaultInstance() {
  process_ = const_cast< ::dos::Process*>(&::dos::Process::default_instance());
}

ForkRequest::ForkRequest(const ForkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.ForkRequest)
}

void ForkRequest::SharedCtor() {
  _cached_size_ = 0;
  process_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForkRequest::~ForkRequest() {
  // @@protoc_insertion_point(destructor:dos.ForkRequest)
  SharedDtor();
}

void ForkRequest::SharedDtor() {
  if (this != default_instance_) {
    delete process_;
  }
}

void ForkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForkRequest_descriptor_;
}

const ForkRequest& ForkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initd_2eproto();
  return *default_instance_;
}

ForkRequest* ForkRequest::default_instance_ = NULL;

ForkRequest* ForkRequest::New() const {
  return new ForkRequest;
}

void ForkRequest::Clear() {
  if (has_process()) {
    if (process_ != NULL) process_->::dos::Process::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.ForkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.Process process = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.ForkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.ForkRequest)
  return false;
#undef DO_
}

void ForkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.ForkRequest)
  // optional .dos.Process process = 1;
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.ForkRequest)
}

::google::protobuf::uint8* ForkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.ForkRequest)
  // optional .dos.Process process = 1;
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.ForkRequest)
  return target;
}

int ForkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.Process process = 1;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForkRequest::MergeFrom(const ForkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process()) {
      mutable_process()->::dos::Process::MergeFrom(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForkRequest::CopyFrom(const ForkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForkRequest::IsInitialized() const {

  return true;
}

void ForkRequest::Swap(ForkRequest* other) {
  if (other != this) {
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForkRequest_descriptor_;
  metadata.reflection = ForkRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForkResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ForkResponse::ForkResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.ForkResponse)
}

void ForkResponse::InitAsDefaultInstance() {
}

ForkResponse::ForkResponse(const ForkResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.ForkResponse)
}

void ForkResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForkResponse::~ForkResponse() {
  // @@protoc_insertion_point(destructor:dos.ForkResponse)
  SharedDtor();
}

void ForkResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForkResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForkResponse_descriptor_;
}

const ForkResponse& ForkResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initd_2eproto();
  return *default_instance_;
}

ForkResponse* ForkResponse::default_instance_ = NULL;

ForkResponse* ForkResponse::New() const {
  return new ForkResponse;
}

void ForkResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.ForkResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.RpcStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.ForkResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.ForkResponse)
  return false;
#undef DO_
}

void ForkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.ForkResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.ForkResponse)
}

::google::protobuf::uint8* ForkResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.ForkResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.ForkResponse)
  return target;
}

int ForkResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.RpcStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForkResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForkResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForkResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForkResponse::MergeFrom(const ForkResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForkResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForkResponse::CopyFrom(const ForkResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForkResponse::IsInitialized() const {

  return true;
}

void ForkResponse::Swap(ForkResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForkResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForkResponse_descriptor_;
  metadata.reflection = ForkResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaitRequest::kNamesFieldNumber;
#endif  // !_MSC_VER

WaitRequest::WaitRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.WaitRequest)
}

void WaitRequest::InitAsDefaultInstance() {
}

WaitRequest::WaitRequest(const WaitRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.WaitRequest)
}

void WaitRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaitRequest::~WaitRequest() {
  // @@protoc_insertion_point(destructor:dos.WaitRequest)
  SharedDtor();
}

void WaitRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WaitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaitRequest_descriptor_;
}

const WaitRequest& WaitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initd_2eproto();
  return *default_instance_;
}

WaitRequest* WaitRequest::default_instance_ = NULL;

WaitRequest* WaitRequest::New() const {
  return new WaitRequest;
}

void WaitRequest::Clear() {
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.WaitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (tag == 10) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.WaitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.WaitRequest)
  return false;
#undef DO_
}

void WaitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.WaitRequest)
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.WaitRequest)
}

::google::protobuf::uint8* WaitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.WaitRequest)
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.WaitRequest)
  return target;
}

int WaitRequest::ByteSize() const {
  int total_size = 0;

  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaitRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaitRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaitRequest::MergeFrom(const WaitRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitRequest::CopyFrom(const WaitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitRequest::IsInitialized() const {

  return true;
}

void WaitRequest::Swap(WaitRequest* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaitRequest_descriptor_;
  metadata.reflection = WaitRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaitResponse::kProcessesFieldNumber;
const int WaitResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

WaitResponse::WaitResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.WaitResponse)
}

void WaitResponse::InitAsDefaultInstance() {
}

WaitResponse::WaitResponse(const WaitResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.WaitResponse)
}

void WaitResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaitResponse::~WaitResponse() {
  // @@protoc_insertion_point(destructor:dos.WaitResponse)
  SharedDtor();
}

void WaitResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WaitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaitResponse_descriptor_;
}

const WaitResponse& WaitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initd_2eproto();
  return *default_instance_;
}

WaitResponse* WaitResponse::default_instance_ = NULL;

WaitResponse* WaitResponse::New() const {
  return new WaitResponse;
}

void WaitResponse::Clear() {
  status_ = 0;
  processes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.WaitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dos.Process processes = 1;
      case 1: {
        if (tag == 10) {
         parse_processes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_processes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_processes;
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .dos.RpcStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.WaitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.WaitResponse)
  return false;
#undef DO_
}

void WaitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.WaitResponse)
  // repeated .dos.Process processes = 1;
  for (int i = 0; i < this->processes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->processes(i), output);
  }

  // optional .dos.RpcStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.WaitResponse)
}

::google::protobuf::uint8* WaitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.WaitResponse)
  // repeated .dos.Process processes = 1;
  for (int i = 0; i < this->processes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->processes(i), target);
  }

  // optional .dos.RpcStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.WaitResponse)
  return target;
}

int WaitResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .dos.RpcStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .dos.Process processes = 1;
  total_size += 1 * this->processes_size();
  for (int i = 0; i < this->processes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->processes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaitResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaitResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaitResponse::MergeFrom(const WaitResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  processes_.MergeFrom(from.processes_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitResponse::CopyFrom(const WaitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitResponse::IsInitialized() const {

  return true;
}

void WaitResponse::Swap(WaitResponse* other) {
  if (other != this) {
    processes_.Swap(&other->processes_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaitResponse_descriptor_;
  metadata.reflection = WaitResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillRequest::kNamesFieldNumber;
const int KillRequest::kSignalFieldNumber;
#endif  // !_MSC_VER

KillRequest::KillRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.KillRequest)
}

void KillRequest::InitAsDefaultInstance() {
}

KillRequest::KillRequest(const KillRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.KillRequest)
}

void KillRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  signal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillRequest::~KillRequest() {
  // @@protoc_insertion_point(destructor:dos.KillRequest)
  SharedDtor();
}

void KillRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillRequest_descriptor_;
}

const KillRequest& KillRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initd_2eproto();
  return *default_instance_;
}

KillRequest* KillRequest::default_instance_ = NULL;

KillRequest* KillRequest::New() const {
  return new KillRequest;
}

void KillRequest::Clear() {
  signal_ = 0;
  names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.KillRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string names = 1;
      case 1: {
        if (tag == 10) {
         parse_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names(this->names_size() - 1).data(),
            this->names(this->names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_names;
        if (input->ExpectTag(16)) goto parse_signal;
        break;
      }

      // optional int32 signal = 2;
      case 2: {
        if (tag == 16) {
         parse_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_)));
          set_has_signal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.KillRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.KillRequest)
  return false;
#undef DO_
}

void KillRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.KillRequest)
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->names(i).data(), this->names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->names(i), output);
  }

  // optional int32 signal = 2;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.KillRequest)
}

::google::protobuf::uint8* KillRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.KillRequest)
  // repeated string names = 1;
  for (int i = 0; i < this->names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), this->names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->names(i), target);
  }

  // optional int32 signal = 2;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.KillRequest)
  return target;
}

int KillRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 signal = 2;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal());
    }

  }
  // repeated string names = 1;
  total_size += 1 * this->names_size();
  for (int i = 0; i < this->names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillRequest::MergeFrom(const KillRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  names_.MergeFrom(from.names_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_signal()) {
      set_signal(from.signal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillRequest::CopyFrom(const KillRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillRequest::IsInitialized() const {

  return true;
}

void KillRequest::Swap(KillRequest* other) {
  if (other != this) {
    names_.Swap(&other->names_);
    std::swap(signal_, other->signal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillRequest_descriptor_;
  metadata.reflection = KillRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

KillResponse::KillResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.KillResponse)
}

void KillResponse::InitAsDefaultInstance() {
}

KillResponse::KillResponse(const KillResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.KillResponse)
}

void KillResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillResponse::~KillResponse() {
  // @@protoc_insertion_point(destructor:dos.KillResponse)
  SharedDtor();
}

void KillResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillResponse_descriptor_;
}

const KillResponse& KillResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initd_2eproto();
  return *default_instance_;
}

KillResponse* KillResponse::default_instance_ = NULL;

KillResponse* KillResponse::New() const {
  return new KillResponse;
}

void KillResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.KillResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.RpcStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.KillResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.KillResponse)
  return false;
#undef DO_
}

void KillResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.KillResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.KillResponse)
}

::google::protobuf::uint8* KillResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.KillResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.KillResponse)
  return target;
}

int KillResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.RpcStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillResponse::MergeFrom(const KillResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillResponse::CopyFrom(const KillResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillResponse::IsInitialized() const {

  return true;
}

void KillResponse::Swap(KillResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillResponse_descriptor_;
  metadata.reflection = KillResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StatusRequest::StatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.StatusRequest)
}

void StatusRequest::InitAsDefaultInstance() {
}

StatusRequest::StatusRequest(const StatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.StatusRequest)
}

void StatusRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusRequest::~StatusRequest() {
  // @@protoc_insertion_point(destructor:dos.StatusRequest)
  SharedDtor();
}

void StatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusRequest_descriptor_;
}

const StatusRequest& StatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initd_2eproto();
  return *default_instance_;
}

StatusRequest* StatusRequest::default_instance_ = NULL;

StatusRequest* StatusRequest::New() const {
  return new StatusRequest;
}

void StatusRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.StatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dos.StatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.StatusRequest)
  return false;
#undef DO_
}

void StatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.StatusRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.StatusRequest)
}

::google::protobuf::uint8* StatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.StatusRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.StatusRequest)
  return target;
}

int StatusRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusRequest::MergeFrom(const StatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusRequest::CopyFrom(const StatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusRequest::IsInitialized() const {

  return true;
}

void StatusRequest::Swap(StatusRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusRequest_descriptor_;
  metadata.reflection = StatusRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

StatusResponse::StatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dos.StatusResponse)
}

void StatusResponse::InitAsDefaultInstance() {
}

StatusResponse::StatusResponse(const StatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dos.StatusResponse)
}

void StatusResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:dos.StatusResponse)
  SharedDtor();
}

void StatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusResponse_descriptor_;
}

const StatusResponse& StatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_initd_2eproto();
  return *default_instance_;
}

StatusResponse* StatusResponse::default_instance_ = NULL;

StatusResponse* StatusResponse::New() const {
  return new StatusResponse;
}

void StatusResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dos.StatusResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dos.RpcStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dos::RpcStatus_IsValid(value)) {
            set_status(static_cast< ::dos::RpcStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dos.StatusResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dos.StatusResponse)
  return false;
#undef DO_
}

void StatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dos.StatusResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dos.StatusResponse)
}

::google::protobuf::uint8* StatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dos.StatusResponse)
  // optional .dos.RpcStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dos.StatusResponse)
  return target;
}

int StatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dos.RpcStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusResponse::MergeFrom(const StatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {

  return true;
}

void StatusResponse::Swap(StatusResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusResponse_descriptor_;
  metadata.reflection = StatusResponse_reflection_;
  return metadata;
}


// ===================================================================

Initd::~Initd() {}

const ::google::protobuf::ServiceDescriptor* Initd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Initd_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* Initd::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return Initd_descriptor_;
}

void Initd::Fork(::google::protobuf::RpcController* controller,
                         const ::dos::ForkRequest*,
                         ::dos::ForkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Fork() not implemented.");
  done->Run();
}

void Initd::Wait(::google::protobuf::RpcController* controller,
                         const ::dos::WaitRequest*,
                         ::dos::WaitResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Wait() not implemented.");
  done->Run();
}

void Initd::Kill(::google::protobuf::RpcController* controller,
                         const ::dos::KillRequest*,
                         ::dos::KillResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Kill() not implemented.");
  done->Run();
}

void Initd::Status(::google::protobuf::RpcController* controller,
                         const ::dos::StatusRequest*,
                         ::dos::StatusResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Status() not implemented.");
  done->Run();
}

void Initd::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), Initd_descriptor_);
  switch(method->index()) {
    case 0:
      Fork(controller,
             ::google::protobuf::down_cast<const ::dos::ForkRequest*>(request),
             ::google::protobuf::down_cast< ::dos::ForkResponse*>(response),
             done);
      break;
    case 1:
      Wait(controller,
             ::google::protobuf::down_cast<const ::dos::WaitRequest*>(request),
             ::google::protobuf::down_cast< ::dos::WaitResponse*>(response),
             done);
      break;
    case 2:
      Kill(controller,
             ::google::protobuf::down_cast<const ::dos::KillRequest*>(request),
             ::google::protobuf::down_cast< ::dos::KillResponse*>(response),
             done);
      break;
    case 3:
      Status(controller,
             ::google::protobuf::down_cast<const ::dos::StatusRequest*>(request),
             ::google::protobuf::down_cast< ::dos::StatusResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Initd::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dos::ForkRequest::default_instance();
    case 1:
      return ::dos::WaitRequest::default_instance();
    case 2:
      return ::dos::KillRequest::default_instance();
    case 3:
      return ::dos::StatusRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& Initd::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::dos::ForkResponse::default_instance();
    case 1:
      return ::dos::WaitResponse::default_instance();
    case 2:
      return ::dos::KillResponse::default_instance();
    case 3:
      return ::dos::StatusResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

Initd_Stub::Initd_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Initd_Stub::Initd_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Initd_Stub::~Initd_Stub() {
  if (owns_channel_) delete channel_;
}

void Initd_Stub::Fork(::google::protobuf::RpcController* controller,
                              const ::dos::ForkRequest* request,
                              ::dos::ForkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Initd_Stub::Wait(::google::protobuf::RpcController* controller,
                              const ::dos::WaitRequest* request,
                              ::dos::WaitResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void Initd_Stub::Kill(::google::protobuf::RpcController* controller,
                              const ::dos::KillRequest* request,
                              ::dos::KillResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void Initd_Stub::Status(::google::protobuf::RpcController* controller,
                              const ::dos::StatusRequest* request,
                              ::dos::StatusResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace dos

// @@protoc_insertion_point(global_scope)
